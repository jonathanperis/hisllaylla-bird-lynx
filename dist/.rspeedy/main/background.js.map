{"version":3,"file":".rspeedy/main/background.js","sources":["file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/css-extract-webpack-plugin/runtime/hotModuleReplacement.cjs","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react-refresh-webpack-plugin/runtime/refresh.cjs","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/refresh/dist/index.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/jsx-dev-runtime/index.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/backgroundSnapshot.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/compat/componentIs.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/compat/initData.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/compat/lynxComponent.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/debug/profile.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/document.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/gesture/processGesture.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/gesture/processGestureBagkround.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/gesture/types.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/hooks/react.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/hooks/useLynxGlobalEventListener.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/hydrate.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/index.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/internal.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lifecycle/delayUnmount.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lifecycle/destroy.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lifecycle/pass.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lifecycle/patch/commit.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lifecycle/patch/snapshotPatch.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lifecycle/patch/snapshotPatchApply.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lifecycle/patch/updateMainThread.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lifecycle/reload.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lifecycle/render.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lifecycleConstant.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/list.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lynx-api.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lynx.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lynx/component.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lynx/dynamic-js.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lynx/env.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lynx/lazy-bundle.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lynx/performance.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/lynx/tt.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/opcodes.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/renderToOpcodes/constants.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/renderToOpcodes/index.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/root.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/snapshot.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/snapshot/event.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/snapshot/gesture.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/snapshot/platformInfo.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/snapshot/ref.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/snapshot/spread.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/snapshot/workletEvent.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/snapshot/workletRef.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/utils.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/worklet/ctx.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/worklet/destroy.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/worklet/execMap.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/worklet/functionCall.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/worklet/functionality.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/worklet/hmr.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/worklet/indexMap.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/worklet/runOnBackground.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/worklet/runOnMainThread.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/worklet/transformToWorklet.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/worklet/workletRef.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/runtime/lib/worklet/workletRefPool.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/worklet-runtime/lib/bindings/bindings.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/worklet-runtime/lib/bindings/events.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/worklet-runtime/lib/bindings/index.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/worklet-runtime/lib/bindings/loadRuntime.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/react/worklet-runtime/lib/global.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/rspeedy/client/hmr/WebSocketClient.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/webpack-dev-transport/lib/client/createSocketURL.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/webpack-dev-transport/lib/client/index.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/webpack-dev-transport/lib/client/log.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/webpack-dev-transport/lib/client/parseURL.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/webpack-dev-transport/lib/client/reloadApp.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/webpack-dev-transport/lib/client/socket.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/webpack-dev-transport/lib/client/transport.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/websocket/lib/WebSocket.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/websocket/lib/WebSocketImpl.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@lynx-js/websocket/lib/index.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@rspack/core/hot/dev-server.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@rspack/core/hot/emitter.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@rspack/core/hot/log-apply-result.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@rspack/core/hot/log.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@swc/helpers/esm/_check_private_redeclaration.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@swc/helpers/esm/_class_apply_descriptor_get.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@swc/helpers/esm/_class_apply_descriptor_set.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@swc/helpers/esm/_class_apply_descriptor_update.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@swc/helpers/esm/_class_check_private_static_access.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@swc/helpers/esm/_class_check_private_static_field_descriptor.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@swc/helpers/esm/_class_extract_field_descriptor.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@swc/helpers/esm/_class_private_field_get.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@swc/helpers/esm/_class_private_field_init.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@swc/helpers/esm/_class_private_field_set.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@swc/helpers/esm/_class_private_method_get.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@swc/helpers/esm/_class_private_method_init.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/@swc/helpers/esm/_class_static_private_field_update.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/eventemitter3/index.js","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/eventemitter3/index.mjs","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/preact/compat/dist/compat.mjs","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/preact/dist/preact.mjs","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/preact/hooks/dist/hooks.mjs","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/node_modules/preact/jsx-runtime/dist/jsxRuntime.mjs","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/src/App.tsx","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/src/index.tsx","file:///Users/jonathanperis/Projects/hisllaylla-bird-lynx/src/App.css"],"sourcesContent":["/**\n * @param {Function} fn\n * @param {number} time\n * @returns {function(): void}\n */\nfunction debounce(fn, time) {\n  let timeout = 0;\n\n  return function debounced(...args) {\n    clearTimeout(timeout);\n\n    timeout = setTimeout(\n      () => fn.apply(this, args),\n      time,\n    );\n  };\n}\n\nfunction updateStyle(cssId = 0) {\n  const cssHotUpdateList = __webpack_require__.cssHotUpdateList;\n  if (!cssHotUpdateList) {\n    throw new Error('cssHotUpdateList is not found');\n  }\n\n  for (const [chunkName, cssHotUpdatePath] of cssHotUpdateList) {\n    lynx.requireModuleAsync(\n      // lynx.requireModuleAsync has two level hash and we cannot delete\n      // the LynxGroup level cache here.\n      // Temporarily using `Date.now` to avoid being cached.\n      __webpack_require__.p + cssHotUpdatePath,\n      (err, ret) => {\n        if (err) {\n          throw new Error(\n            `Failed to load CSS update file: ${cssHotUpdatePath}`,\n          );\n        }\n\n        if (ret.content) {\n          lynx.getCoreContext().dispatchEvent({\n            type: 'lynx.hmr.css',\n            data: {\n              cssId,\n              content: ret.content,\n              deps: ret.deps,\n              entry: lynx.__chunk_entries__[chunkName],\n            },\n          });\n        }\n      },\n    );\n  }\n}\n\n/**\n * @param {string | number} moduleId\n * @param {unknown} options\n * @param {number=} cssId\n * @returns {() => void}\n */\nmodule.exports = function update(moduleId, options, cssId) {\n  // TODO: should not pass cssId === ''\n  if (!cssId) {\n    cssId = 0;\n  }\n\n  function update() {\n    updateStyle(cssId);\n  }\n\n  return debounce(update, 50);\n};\n","const { isComponent, flush } = require('@lynx-js/react/refresh');\n\n// eslint-disable-next-line\nconst getExports = m => m.exports || m.__proto__.exports;\n\nfunction isSafeExport(key) {\n  return (\n    key === '__esModule'\n    || key === '__N_SSG'\n    || key === '__N_SSP'\n    || key === 'config'\n  );\n}\n\nfunction registerExports(moduleExports, moduleId) {\n  globalThis['__PREFRESH__'].register(moduleExports, moduleId + ' %exports%');\n  if (moduleExports == null || typeof moduleExports !== 'object') return;\n\n  for (const key in moduleExports) {\n    if (isSafeExport(key)) continue;\n    const exportValue = moduleExports[key];\n    const typeID = moduleId + ' %exports% ' + key;\n    globalThis['__PREFRESH__'].register(exportValue, typeID);\n  }\n}\n\nconst shouldBind = m => {\n  let isCitizen = false;\n  const moduleExports = getExports(m);\n\n  if (isComponent(moduleExports)) {\n    isCitizen = true;\n  }\n\n  if (\n    moduleExports === undefined\n    || moduleExports === null\n    || typeof moduleExports !== 'object'\n  ) {\n    isCitizen = isCitizen || false;\n  } else {\n    for (const key in moduleExports) {\n      if (key === '__esModule') continue;\n\n      const exportValue = moduleExports[key];\n      if (isComponent(exportValue)) {\n        isCitizen = isCitizen || true;\n      }\n    }\n  }\n\n  return isCitizen;\n};\n\nmodule.exports = Object.freeze({\n  getExports,\n  shouldBind,\n  flush,\n  registerExports,\n});\n","// ../../../node_modules/.pnpm/@prefresh+core@1.5.3_preact@10.23.2/node_modules/@prefresh/core/src/runtime/catchError.js\nimport { options } from \"@lynx-js/react/internal\";\n\n// ../../../node_modules/.pnpm/@prefresh+core@1.5.3_preact@10.23.2/node_modules/@prefresh/core/src/constants.js\nvar VNODE_COMPONENT = \"__c\";\nvar NAMESPACE = \"__PREFRESH__\";\nvar COMPONENT_HOOKS = \"__H\";\nvar HOOKS_LIST = \"__\";\nvar EFFECTS_LIST = \"__h\";\nvar RERENDER_COUNT = \"__r\";\nvar CATCH_ERROR_OPTION = \"__e\";\nvar COMPONENT_DIRTY = \"__d\";\nvar HOOK_VALUE = \"__\";\nvar HOOK_ARGS = \"__H\";\nvar HOOK_CLEANUP = \"__c\";\n\n// ../../../node_modules/.pnpm/@prefresh+core@1.5.3_preact@10.23.2/node_modules/@prefresh/core/src/runtime/catchError.js\nvar oldCatchError = options[CATCH_ERROR_OPTION];\noptions[CATCH_ERROR_OPTION] = (error, vnode, oldVNode) => {\n  if (vnode[VNODE_COMPONENT] && vnode[VNODE_COMPONENT][COMPONENT_DIRTY]) {\n    vnode[VNODE_COMPONENT][COMPONENT_DIRTY] = false;\n  }\n  if (oldCatchError) oldCatchError(error, vnode, oldVNode);\n};\n\n// ../../../node_modules/.pnpm/@prefresh+core@1.5.3_preact@10.23.2/node_modules/@prefresh/core/src/runtime/debounceRendering.js\nimport { options as options2 } from \"@lynx-js/react/internal\";\nvar defer = typeof Promise == \"function\" ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout;\noptions2.debounceRendering = (process) => {\n  defer(() => {\n    try {\n      process();\n    } catch (e) {\n      process[RERENDER_COUNT] = 0;\n      throw e;\n    }\n  });\n};\n\n// ../../../node_modules/.pnpm/@prefresh+core@1.5.3_preact@10.23.2/node_modules/@prefresh/core/src/runtime/vnode.js\nimport { options as options3 } from \"@lynx-js/react/internal\";\n\n// ../../../node_modules/.pnpm/@prefresh+core@1.5.3_preact@10.23.2/node_modules/@prefresh/core/src/runtime/vnodesForComponent.js\nvar vnodesForComponent = /* @__PURE__ */ new WeakMap();\nvar mappedVNodes = /* @__PURE__ */ new WeakMap();\n\n// ../../../node_modules/.pnpm/@prefresh+core@1.5.3_preact@10.23.2/node_modules/@prefresh/core/src/runtime/vnode.js\nvar getMappedVnode = (type) => {\n  if (mappedVNodes.has(type)) {\n    return getMappedVnode(mappedVNodes.get(type));\n  }\n  return type;\n};\nvar BUILT_IN_COMPONENTS = [\"Fragment\", \"Suspense\", \"SuspenseList\"];\nvar isBuiltIn = (type) => {\n  return BUILT_IN_COMPONENTS.includes(type.name);\n};\nvar oldVnode = options3.vnode;\noptions3.vnode = (vnode) => {\n  if (vnode && typeof vnode.type === \"function\" && !isBuiltIn(vnode.type)) {\n    const vnodes = vnodesForComponent.get(vnode.type);\n    if (!vnodes) {\n      vnodesForComponent.set(vnode.type, [vnode]);\n    } else {\n      vnodes.push(vnode);\n    }\n    const foundType = getMappedVnode(vnode.type);\n    if (foundType !== vnode.type) {\n      const vnodes2 = vnodesForComponent.get(foundType);\n      if (!vnodes2) {\n        vnodesForComponent.set(foundType, [vnode]);\n      } else {\n        vnodes2.push(vnode);\n      }\n    }\n    vnode.type = foundType;\n    if (vnode[VNODE_COMPONENT] && \"prototype\" in vnode.type && vnode.type.prototype.render) {\n      vnode[VNODE_COMPONENT].constructor = vnode.type;\n    }\n  }\n  if (oldVnode) oldVnode(vnode);\n};\nvar oldDiffed = options3.diffed;\noptions3.diffed = (vnode) => {\n  if (vnode && typeof vnode.type === \"function\") {\n    const vnodes = vnodesForComponent.get(vnode.type);\n    if (vnodes) {\n      const matchingDom = vnodes.filter((p) => p.__c === vnode.__c);\n      if (matchingDom.length > 1) {\n        const i = vnodes.findIndex((p) => p === matchingDom[0]);\n        vnodes.splice(i, 1);\n      }\n    }\n  }\n  if (oldDiffed) oldDiffed(vnode);\n};\n\n// ../../../node_modules/.pnpm/@prefresh+core@1.5.3_preact@10.23.2/node_modules/@prefresh/core/src/runtime/unmount.js\nimport { options as options4 } from \"@lynx-js/react/internal\";\nvar oldUnmount = options4.unmount;\noptions4.unmount = (vnode) => {\n  const type = (vnode || {}).type;\n  if (typeof type === \"function\" && vnodesForComponent.has(type)) {\n    const vnodes = vnodesForComponent.get(type);\n    if (vnodes) {\n      const index = vnodes.indexOf(vnode);\n      if (index !== -1) {\n        vnodes.splice(index, 1);\n      }\n    }\n  }\n  if (oldUnmount) oldUnmount(vnode);\n};\n\n// ../../../node_modules/.pnpm/@prefresh+core@1.5.3_preact@10.23.2/node_modules/@prefresh/core/src/index.js\nimport { Component } from \"@lynx-js/react/internal\";\n\n// ../../../node_modules/.pnpm/@prefresh+core@1.5.3_preact@10.23.2/node_modules/@prefresh/core/src/runtime/signaturesForType.js\nvar signaturesForType = /* @__PURE__ */ new WeakMap();\n\n// ../../../node_modules/.pnpm/@prefresh+core@1.5.3_preact@10.23.2/node_modules/@prefresh/core/src/computeKey.js\nvar computeKey = (signature) => {\n  let fullKey = signature.key;\n  let hooks;\n  try {\n    hooks = signature.getCustomHooks();\n  } catch (err) {\n    signature.forceReset = true;\n    return fullKey;\n  }\n  for (let i = 0; i < hooks.length; i++) {\n    const hook = hooks[i];\n    if (typeof hook !== \"function\") {\n      signature.forceReset = true;\n      return fullKey;\n    }\n    const nestedHookSignature = signaturesForType.get(hook);\n    if (nestedHookSignature === void 0) continue;\n    const nestedHookKey = computeKey(nestedHookSignature);\n    if (nestedHookSignature.forceReset) signature.forceReset = true;\n    fullKey += \"\\n---\\n\" + nestedHookKey;\n  }\n  return fullKey;\n};\n\n// ../../../node_modules/.pnpm/@prefresh+core@1.5.3_preact@10.23.2/node_modules/@prefresh/core/src/index.js\nvar typesById = /* @__PURE__ */ new Map();\nvar pendingUpdates = [];\nfunction sign(type, key, forceReset, getCustomHooks, status) {\n  if (type) {\n    let signature = signaturesForType.get(type);\n    if (status === \"begin\") {\n      signaturesForType.set(type, {\n        type,\n        key,\n        forceReset,\n        getCustomHooks: getCustomHooks || (() => [])\n      });\n      return \"needsHooks\";\n    } else if (status === \"needsHooks\") {\n      signature.fullKey = computeKey(signature);\n    }\n  }\n}\nfunction replaceComponent(OldType, NewType, resetHookState) {\n  const vnodes = vnodesForComponent.get(OldType);\n  if (!vnodes) return;\n  vnodesForComponent.delete(OldType);\n  vnodesForComponent.set(NewType, vnodes);\n  mappedVNodes.set(OldType, NewType);\n  pendingUpdates = pendingUpdates.filter((p) => p[0] !== OldType);\n  vnodes.forEach((vnode) => {\n    if (!vnode.__c || !vnode.__c.__P) return;\n    vnode.type = NewType;\n    if (vnode[VNODE_COMPONENT]) {\n      vnode[VNODE_COMPONENT].constructor = vnode.type;\n      try {\n        if (vnode[VNODE_COMPONENT] instanceof OldType) {\n          const oldInst = vnode[VNODE_COMPONENT];\n          const newInst = new NewType(\n            vnode[VNODE_COMPONENT].props,\n            vnode[VNODE_COMPONENT].context\n          );\n          vnode[VNODE_COMPONENT] = newInst;\n          for (let i in oldInst) {\n            const type = typeof oldInst[i];\n            if (!(i in newInst)) {\n              newInst[i] = oldInst[i];\n            } else if (type !== \"function\" && typeof newInst[i] === type) {\n              if (type === \"object\" && newInst[i] != null && newInst[i].constructor === oldInst[i].constructor) {\n                Object.assign(newInst[i], oldInst[i]);\n              } else {\n                newInst[i] = oldInst[i];\n              }\n            }\n          }\n        }\n      } catch (e) {\n        vnode[VNODE_COMPONENT].constructor = NewType;\n      }\n      if (resetHookState) {\n        if (vnode[VNODE_COMPONENT][COMPONENT_HOOKS] && vnode[VNODE_COMPONENT][COMPONENT_HOOKS][HOOKS_LIST] && vnode[VNODE_COMPONENT][COMPONENT_HOOKS][HOOKS_LIST].length) {\n          vnode[VNODE_COMPONENT][COMPONENT_HOOKS][HOOKS_LIST].forEach(\n            (possibleEffect) => {\n              if (possibleEffect[HOOK_CLEANUP] && typeof possibleEffect[HOOK_CLEANUP] === \"function\") {\n                possibleEffect[HOOK_CLEANUP]();\n                possibleEffect[HOOK_CLEANUP] = void 0;\n              } else if (possibleEffect[HOOK_ARGS] && possibleEffect[HOOK_VALUE] && Object.keys(possibleEffect).length === 3) {\n                const cleanupKey = Object.keys(possibleEffect).find(\n                  (key) => key !== HOOK_ARGS && key !== HOOK_VALUE\n                );\n                if (cleanupKey && typeof possibleEffect[cleanupKey] == \"function\") {\n                  possibleEffect[cleanupKey]();\n                  possibleEffect[cleanupKey] = void 0;\n                }\n              }\n            }\n          );\n        }\n        vnode[VNODE_COMPONENT][COMPONENT_HOOKS] = {\n          [HOOKS_LIST]: [],\n          [EFFECTS_LIST]: []\n        };\n      } else if (vnode[VNODE_COMPONENT][COMPONENT_HOOKS] && vnode[VNODE_COMPONENT][COMPONENT_HOOKS][HOOKS_LIST] && vnode[VNODE_COMPONENT][COMPONENT_HOOKS][HOOKS_LIST].length) {\n        vnode[VNODE_COMPONENT][COMPONENT_HOOKS][HOOKS_LIST].forEach(\n          (possibleEffect) => {\n            if (possibleEffect[HOOK_CLEANUP] && typeof possibleEffect[HOOK_CLEANUP] === \"function\") {\n              possibleEffect[HOOK_CLEANUP]();\n              possibleEffect[HOOK_CLEANUP] = void 0;\n            } else if (possibleEffect[HOOK_ARGS] && possibleEffect[HOOK_VALUE] && Object.keys(possibleEffect).length === 3) {\n              const cleanupKey = Object.keys(possibleEffect).find(\n                (key) => key !== HOOK_ARGS && key !== HOOK_VALUE\n              );\n              if (cleanupKey && typeof possibleEffect[cleanupKey] == \"function\")\n                possibleEffect[cleanupKey]();\n              possibleEffect[cleanupKey] = void 0;\n            }\n          }\n        );\n        vnode[VNODE_COMPONENT][COMPONENT_HOOKS][HOOKS_LIST].forEach((hook) => {\n          if (hook.__H && Array.isArray(hook.__H)) {\n            hook.__H = void 0;\n          }\n        });\n      }\n      Component.prototype.forceUpdate.call(vnode[VNODE_COMPONENT]);\n    }\n  });\n}\nglobalThis[NAMESPACE] = {\n  getSignature: (type) => signaturesForType.get(type),\n  register: (type, id) => {\n    if (typeof type !== \"function\") return;\n    if (typesById.has(id)) {\n      const existing = typesById.get(id);\n      if (existing !== type) {\n        pendingUpdates.push([existing, type]);\n        typesById.set(id, type);\n      }\n    } else {\n      typesById.set(id, type);\n    }\n    if (!signaturesForType.has(type)) {\n      signaturesForType.set(type, {\n        getCustomHooks: () => [],\n        type\n      });\n    }\n  },\n  getPendingUpdates: () => pendingUpdates,\n  flush: () => {\n    pendingUpdates = [];\n  },\n  replaceComponent,\n  sign,\n  computeKey\n};\n\n// ../../../node_modules/.pnpm/@prefresh+utils@1.2.0/node_modules/@prefresh/utils/src/index.js\nvar compareSignatures = (prev, next) => {\n  const prevSignature = globalThis.__PREFRESH__.getSignature(prev) || {};\n  const nextSignature = globalThis.__PREFRESH__.getSignature(next) || {};\n  if (prevSignature.key !== nextSignature.key || globalThis.__PREFRESH__.computeKey(prevSignature) !== globalThis.__PREFRESH__.computeKey(nextSignature) || nextSignature.forceReset) {\n    globalThis.__PREFRESH__.replaceComponent(prev, next, true);\n  } else {\n    globalThis.__PREFRESH__.replaceComponent(prev, next, false);\n  }\n};\nvar flush = () => {\n  const pending = [...globalThis.__PREFRESH__.getPendingUpdates()];\n  globalThis.__PREFRESH__.flush();\n  if (pending.length > 0) {\n    pending.forEach(([prev, next]) => {\n      compareSignatures(prev, next);\n    });\n  }\n};\nvar isComponent = (exportValue) => {\n  if (typeof exportValue === \"function\") {\n    if (exportValue.prototype != null && exportValue.prototype.isReactComponent) {\n      return true;\n    }\n    const name = exportValue.name || exportValue.displayName;\n    return typeof name === \"string\" && name[0] && name[0] == name[0].toUpperCase();\n  }\n  return false;\n};\nexport {\n  flush,\n  isComponent\n};\n","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport { jsx, jsxs, jsxDEV, Fragment } from 'preact/jsx-runtime';\n","import { diffArrayAction, diffArrayLepus } from './hydrate.js';\nimport { globalBackgroundSnapshotInstancesToRemove } from './lifecycle/patch/commit.js';\nimport { markRefToRemove } from './snapshot/ref.js';\nimport { transformSpread } from './snapshot/spread.js';\nimport { DynamicPartType, backgroundSnapshotInstanceManager, snapshotManager, traverseSnapshotInstance, } from './snapshot.js';\nimport { SnapshotOperation, __globalSnapshotPatch, initGlobalSnapshotPatch, takeGlobalSnapshotPatch, } from './lifecycle/patch/snapshotPatch.js';\nimport { isDirectOrDeepEqual } from './utils.js';\nimport { onPostWorkletCtx } from './worklet/ctx.js';\nimport { processGestureBackground } from './gesture/processGestureBagkround.js';\nimport { globalPipelineOptions } from './lynx/performance.js';\nexport class BackgroundSnapshotInstance {\n    type;\n    constructor(type) {\n        this.type = type;\n        let id;\n        id = this.__id = backgroundSnapshotInstanceManager.nextId += 1;\n        backgroundSnapshotInstanceManager.values.set(id, this);\n        __globalSnapshotPatch?.push(SnapshotOperation.CreateElement, type, id);\n    }\n    __id;\n    __values;\n    __parent = null;\n    __firstChild = null;\n    __lastChild = null;\n    __previousSibling = null;\n    __nextSibling = null;\n    get parentNode() {\n        return this.__parent;\n    }\n    get nextSibling() {\n        return this.__nextSibling;\n    }\n    // get isConnected() {\n    //   return !!this.__parent;\n    // }\n    contains(child) {\n        return child.parentNode === this;\n    }\n    // TODO: write tests for this\n    // This will be called in `lazy`/`Suspense`.\n    // We currently ignore this since we did not find a way to test.\n    /* v8 ignore start */\n    appendChild(child) {\n        return this.insertBefore(child);\n    }\n    /* v8 ignore stop */\n    insertBefore(node, beforeNode) {\n        __globalSnapshotPatch?.push(SnapshotOperation.InsertBefore, this.__id, node.__id, beforeNode?.__id);\n        // If the node already has a parent, remove it from its current parent\n        const p = node.__parent;\n        if (p) {\n            if (node.__previousSibling) {\n                node.__previousSibling.__nextSibling = node.__nextSibling;\n            }\n            else {\n                p.__firstChild = node.__nextSibling;\n            }\n            if (node.__nextSibling) {\n                node.__nextSibling.__previousSibling = node.__previousSibling;\n            }\n            else {\n                p.__lastChild = node.__previousSibling;\n            }\n        }\n        // If beforeNode is not provided, add the new node as the last child\n        if (beforeNode) {\n            // If beforeNode is provided, insert the new node before beforeNode\n            if (beforeNode.__previousSibling) {\n                beforeNode.__previousSibling.__nextSibling = node;\n                node.__previousSibling = beforeNode.__previousSibling;\n            }\n            else {\n                this.__firstChild = node;\n                node.__previousSibling = null;\n            }\n            beforeNode.__previousSibling = node;\n            node.__nextSibling = beforeNode;\n            node.__parent = this;\n        }\n        else {\n            if (this.__lastChild) {\n                this.__lastChild.__nextSibling = node;\n                node.__previousSibling = this.__lastChild;\n            }\n            else {\n                this.__firstChild = node;\n                node.__previousSibling = null;\n            }\n            this.__lastChild = node;\n            node.__parent = this;\n            node.__nextSibling = null;\n        }\n    }\n    removeChild(node) {\n        __globalSnapshotPatch?.push(SnapshotOperation.RemoveChild, this.__id, node.__id);\n        if (node.__parent !== this) {\n            throw new Error('The node to be removed is not a child of this node.');\n        }\n        if (node.__previousSibling) {\n            node.__previousSibling.__nextSibling = node.__nextSibling;\n        }\n        else {\n            this.__firstChild = node.__nextSibling;\n        }\n        if (node.__nextSibling) {\n            node.__nextSibling.__previousSibling = node.__previousSibling;\n        }\n        else {\n            this.__lastChild = node.__previousSibling;\n        }\n        node.__parent = null;\n        node.__previousSibling = null;\n        node.__nextSibling = null;\n        traverseSnapshotInstance(node, v => {\n            v.__parent = null;\n            globalBackgroundSnapshotInstancesToRemove.push(v.__id);\n        });\n    }\n    get childNodes() {\n        const nodes = [];\n        let node = this.__firstChild;\n        while (node) {\n            nodes.push(node);\n            if (node === this.__lastChild) {\n                break;\n            }\n            node = node.__nextSibling;\n        }\n        return nodes;\n    }\n    setAttribute(key, value) {\n        if (__PROFILE__) {\n            console.profile('setAttribute');\n        }\n        if (key === 'values') {\n            if (__globalSnapshotPatch) {\n                const oldValues = this.__values;\n                if (oldValues) {\n                    for (let index = 0; index < value.length; index++) {\n                        const { needUpdate, valueToCommit } = this.setAttributeImpl(value[index], oldValues[index], index);\n                        if (needUpdate) {\n                            __globalSnapshotPatch?.push(SnapshotOperation.SetAttribute, this.__id, index, valueToCommit);\n                        }\n                    }\n                }\n                else {\n                    const patch = [];\n                    const length = value.length;\n                    for (let index = 0; index < length; ++index) {\n                        const { valueToCommit } = this.setAttributeImpl(value[index], null, index);\n                        patch[index] = valueToCommit;\n                    }\n                    __globalSnapshotPatch?.push(SnapshotOperation.SetAttributes, this.__id, patch);\n                }\n            }\n            this.__values = value;\n            if (__PROFILE__) {\n                console.profileEnd();\n            }\n            return;\n        }\n        // old path (`<__snapshot_xxxx_xxxx __0={} __1={} />` or `this.setAttribute(0, xxx)`)\n        // is reserved as slow path\n        const index = typeof key === 'string' ? Number(key.slice(2)) : key;\n        (this.__values ??= [])[index] = value;\n        __globalSnapshotPatch?.push(SnapshotOperation.SetAttribute, this.__id, index, value);\n        if (__PROFILE__) {\n            console.profileEnd();\n        }\n    }\n    setAttributeImpl(newValue, oldValue, index) {\n        if (!newValue) {\n            if (oldValue && oldValue.__ref) {\n                markRefToRemove(`${this.__id}:${index}:`, oldValue);\n            }\n            return { needUpdate: oldValue !== newValue, valueToCommit: newValue };\n        }\n        const newType = typeof newValue;\n        if (newType === 'object') {\n            if (newValue.__spread) {\n                const oldSpread = oldValue ? oldValue.__spread : oldValue;\n                const newSpread = transformSpread(this, index, newValue);\n                const needUpdate = !isDirectOrDeepEqual(oldSpread, newSpread);\n                // use __spread to cache the transform result for next diff\n                newValue.__spread = newSpread;\n                if (needUpdate) {\n                    if (oldSpread && oldSpread.ref) {\n                        markRefToRemove(`${this.__id}:${index}:ref`, oldValue.ref);\n                    }\n                    for (let key in newSpread) {\n                        const newSpreadValue = newSpread[key];\n                        if (!newSpreadValue) {\n                            continue;\n                        }\n                        if (newSpreadValue._wkltId) {\n                            newSpread[key] = onPostWorkletCtx(newSpreadValue);\n                        }\n                        else if (newSpreadValue.__isGesture) {\n                            processGestureBackground(newSpreadValue);\n                        }\n                        else if (key == '__lynx_timing_flag' && oldSpread?.[key] != newSpreadValue) {\n                            if (globalPipelineOptions) {\n                                globalPipelineOptions.needTimestamps = true;\n                            }\n                        }\n                    }\n                }\n                return { needUpdate, valueToCommit: newSpread };\n            }\n            if (newValue.__ref) {\n                // force update to update ref value\n                // TODO: ref: optimize this. The ref update maybe can be done on the background thread to reduce updating.\n                // The old ref must have a place to be stored because it needs to be cleared when the main thread returns.\n                markRefToRemove(`${this.__id}:${index}:`, oldValue);\n                // update ref. On the main thread, the ref id will be replaced with value's sign when updating.\n                return { needUpdate: true, valueToCommit: newValue.__ref };\n            }\n            if (newValue._wkltId) {\n                return { needUpdate: true, valueToCommit: onPostWorkletCtx(newValue) };\n            }\n            if (newValue.__isGesture) {\n                processGestureBackground(newValue);\n                return { needUpdate: true, valueToCommit: newValue };\n            }\n            if (newValue.__ltf) {\n                // __lynx_timing_flag\n                if (globalPipelineOptions && oldValue?.__ltf != newValue.__ltf) {\n                    globalPipelineOptions.needTimestamps = true;\n                    return { needUpdate: true, valueToCommit: newValue };\n                }\n                return { needUpdate: false, valueToCommit: newValue };\n            }\n            return { needUpdate: !isDirectOrDeepEqual(oldValue, newValue), valueToCommit: newValue };\n        }\n        if (newType === 'function') {\n            if (newValue.__ref) {\n                markRefToRemove(`${this.__id}:${index}:`, oldValue);\n                return { needUpdate: true, valueToCommit: newValue.__ref };\n            }\n            /* event */\n            return { needUpdate: !oldValue, valueToCommit: 1 };\n        }\n        return { needUpdate: oldValue !== newValue, valueToCommit: newValue };\n    }\n}\nexport function hydrate(before, after) {\n    initGlobalSnapshotPatch();\n    const helper2 = (afters, parentId) => {\n        for (const child of afters) {\n            const id = child.__id;\n            __globalSnapshotPatch.push(SnapshotOperation.CreateElement, child.type, id);\n            const values = child.__values;\n            if (values) {\n                child.__values = undefined;\n                child.setAttribute('values', values);\n            }\n            helper2(child.childNodes, id);\n            __globalSnapshotPatch.push(SnapshotOperation.InsertBefore, parentId, id, undefined);\n        }\n    };\n    const helper = (before, after) => {\n        backgroundSnapshotInstanceManager.updateId(after.__id, before.id);\n        after.__values?.forEach((value, index) => {\n            const old = before.values[index];\n            if (value) {\n                if (value.__spread) {\n                    // `value.__spread` my contain event ids using snapshot ids before hydration. Remove it.\n                    delete value.__spread;\n                    value = transformSpread(after, index, value);\n                    for (let key in value) {\n                        if (value[key] && value[key]._wkltId) {\n                            onPostWorkletCtx(value[key]);\n                        }\n                        else if (value[key] && value[key].__isGesture) {\n                            processGestureBackground(value[key]);\n                        }\n                    }\n                    after.__values[index].__spread = value;\n                }\n                else if (value.__ref) {\n                    if (old) {\n                        // skip patch\n                        value = old;\n                    }\n                    else {\n                        value = value.__ref;\n                    }\n                }\n                else if (typeof value === 'function') {\n                    value = `${after.__id}:${index}:`;\n                }\n            }\n            if (value && value._wkltId) {\n                onPostWorkletCtx(value);\n            }\n            else if (value && value.__isGesture) {\n                processGestureBackground(value);\n            }\n            if (!isDirectOrDeepEqual(value, old)) {\n                __globalSnapshotPatch.push(SnapshotOperation.SetAttribute, after.__id, index, value);\n            }\n        });\n        const { slot } = snapshotManager.values.get(after.type);\n        const beforeChildNodes = before.children || [];\n        const afterChildNodes = after.childNodes;\n        if (!slot) {\n            return;\n        }\n        slot.forEach(([type], index) => {\n            switch (type) {\n                case DynamicPartType.Slot:\n                case DynamicPartType.MultiChildren: {\n                    // TODO: the following null assertions are not 100% safe\n                    const v1 = beforeChildNodes[index];\n                    const v2 = afterChildNodes[index];\n                    helper(v1, v2);\n                    break;\n                }\n                case DynamicPartType.Children:\n                case DynamicPartType.ListChildren: {\n                    const diffResult = diffArrayLepus(beforeChildNodes, afterChildNodes, (a, b) => a.type === b.type, (a, b) => {\n                        helper(a, b);\n                    });\n                    diffArrayAction(beforeChildNodes, diffResult, (node, target) => {\n                        __globalSnapshotPatch.push(SnapshotOperation.CreateElement, node.type, node.__id);\n                        helper2(node.childNodes, node.__id);\n                        const values = node.__values;\n                        if (values) {\n                            node.__values = undefined;\n                            node.setAttribute('values', values);\n                        }\n                        __globalSnapshotPatch.push(SnapshotOperation.InsertBefore, before.id, node.__id, target?.id);\n                        return undefined;\n                    }, node => {\n                        __globalSnapshotPatch.push(SnapshotOperation.RemoveChild, before.id, node.id);\n                    }, (node, target) => {\n                        // changedList.push([SnapshotOperation.RemoveChild, before.id, node.id]);\n                        __globalSnapshotPatch.push(SnapshotOperation.InsertBefore, before.id, node.id, target?.id);\n                    });\n                    break;\n                }\n            }\n        });\n    };\n    helper(before, after);\n    return takeGlobalSnapshotPatch();\n}\n//# sourceMappingURL=backgroundSnapshot.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n// for better reuse if runtime is changed\nexport function factory({ createElement, useMemo, Suspense, lazy }, loadLazyBundle) {\n    /**\n     * @internal a polyfill for <component is=? />\n     */\n    const __ComponentIsPolyfill = ({ is, ...props }) => {\n        if (typeof is !== 'string') {\n            lynx.reportError(new Error('You must provide a string to props `is` when using syntax `<component is=? />`.'));\n            return null;\n        }\n        // @ts-ignore\n        const D = useMemo(() => lazy(() => loadLazyBundle(is)), [is]);\n        return createElement(Suspense, { key: is }, createElement(D, props));\n    };\n    return __ComponentIsPolyfill;\n}\n//# sourceMappingURL=componentIs.js.map","import { useLynxGlobalEventListener } from '../hooks/useLynxGlobalEventListener.js';\n// for better reuse if runtime is changed\nexport function factory({ createContext, useState, createElement, useLynxGlobalEventListener: useListener }, prop, eventName) {\n    const Context = createContext({});\n    const Provider = ({ children }) => {\n        const [__, set] = useState(lynx[prop]);\n        const handleChange = () => {\n            set(lynx[prop]);\n        };\n        useChanged(handleChange);\n        return createElement(Context.Provider, {\n            value: __,\n        }, children);\n    };\n    const Consumer = Context.Consumer;\n    const use = () => {\n        const [__, set] = useState(lynx[prop]);\n        useChanged(() => {\n            set(lynx[prop]);\n        });\n        return __;\n    };\n    const useChanged = (callback) => {\n        if (!__LEPUS__) {\n            // @ts-ignore\n            useListener(eventName, callback);\n        }\n    };\n    return {\n        Context: () => Context,\n        Provider: () => Provider,\n        Consumer: () => Consumer,\n        use: () => use,\n        useChanged: () => useChanged,\n    };\n}\n/**\n * Higher-Order Component (HOC) that injects `initData` into the state of the given class component.\n *\n * This HOC checks if the provided component is a class component. If it is, it wraps the component\n * and injects the `initData` into its state. It also adds a listener\n * to update the state when data changes, and removes the listener when the component unmounts.\n *\n * @typeParam P - The type of the props of the wrapped component.\n * @typeParam S - The type of the state of the wrapped component.\n *\n * @param App - The class component to be wrapped by the HOC.\n *\n * @returns The original component if it is not a class component, otherwise a new class component\n *          with `initData` injection and state update functionality.\n *\n * @example\n * ```typescript\n * class App extends React.Component<MyProps, MyState> {\n *   // component implementation\n * }\n *\n * export default withInitDataInState(App);\n * ```\n * @public\n */\nexport function withInitDataInState(App) {\n    const isClassComponent = 'prototype' in App && App.prototype.render;\n    if (!isClassComponent) {\n        // return as-is when not class component\n        return App;\n    }\n    class C extends App {\n        h;\n        constructor(props) {\n            super(props);\n            this.state = {\n                ...this.state,\n                ...lynx.__initData,\n            };\n            if (!__LEPUS__) {\n                lynx.getJSModule('GlobalEventEmitter').addListener('onDataChanged', this.h = () => {\n                    this.setState(lynx.__initData);\n                });\n            }\n        }\n        componentWillUnmount() {\n            super.componentWillUnmount?.();\n            if (!__LEPUS__) {\n                lynx.getJSModule('GlobalEventEmitter').removeListener('onDataChanged', this.h);\n            }\n        }\n    }\n    return C;\n}\n//# sourceMappingURL=initData.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { Component } from 'preact';\nexport function wrapWithLynxComponent(jsxSnapshot, jsxComponent) {\n    const C = jsxComponent.type;\n    if (typeof C === 'function') {\n        if (C === ComponentFromReactRuntime || C.prototype instanceof ComponentFromReactRuntime) {\n            if (jsxSnapshot.length === 1) {\n                return jsxSnapshot(jsxComponent);\n            }\n            else {\n                // spread\n                if (!jsxComponent.props.removeComponentElement) {\n                    return jsxSnapshot(jsxComponent, takeComponentAttributes(jsxComponent));\n                }\n            }\n        }\n    }\n    return jsxComponent;\n}\n// @ts-expect-error\nexport class ComponentFromReactRuntime extends Component {\n}\nconst __COMPONENT_ATTRIBUTES__ = /* @__PURE__ */ new Set([\n    'name',\n    'style',\n    'class',\n    'flatten',\n    'clip-radius',\n    'overlap',\n    'user-interaction-enabled',\n    'native-interaction-enabled',\n    'block-native-event',\n    'enableLayoutOnly',\n    'cssAlignWithLegacyW3C',\n    'intersection-observers',\n    'trigger-global-event',\n    'exposure-scene',\n    'exposure-id',\n    'exposure-screen-margin-top',\n    'exposure-screen-margin-bottom',\n    'exposure-screen-margin-left',\n    'exposure-screen-margin-right',\n    'focusable',\n    'focus-index',\n    'accessibility-label',\n    'accessibility-element',\n    'accessibility-traits',\n    'enable-new-animator',\n]);\nfunction takeComponentAttributes(jsxComponent) {\n    const attributes = {};\n    Object.keys(jsxComponent.props).forEach((k) => {\n        // let re1 = Regex::new(r\"^(global-bind|bind|catch|capture-bind|capture-catch)([A-Za-z]+)$\").unwrap();\n        // let re2 = Regex::new(r\"^data-([A-Za-z]+)$\").unwrap();\n        if (__COMPONENT_ATTRIBUTES__.has(k)\n            || k === 'id'\n            || k === 'className'\n            || k === 'dataSet'\n            || k === 'data-set'\n            || k === 'removeComponentElement'\n            || k.match(/^(global-bind|bind|catch|capture-bind|capture-catch)([A-Za-z]+)$/)\n            || k.match(/^data-([A-Za-z]+)$/)) {\n            attributes[k] = jsxComponent.props[k];\n            delete jsxComponent.props[k];\n        }\n    });\n    return attributes;\n}\n//# sourceMappingURL=lynxComponent.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { options } from 'preact';\nimport { COMPONENT, DIFF, DIFFED, RENDER } from '../renderToOpcodes/constants.js';\nexport function initProfileHook() {\n    const oldDiff = options[DIFF];\n    options[DIFF] = function (vnode) {\n        // This __PROFILE__ is used for DCE testing\n        if (__PROFILE__ && typeof vnode.type === 'function') {\n            // We only add profiling trace for Component\n            console.profile(`diff::${getDisplayName(vnode.type)}`);\n        }\n        oldDiff?.(vnode);\n    };\n    const oldDiffed = options[DIFFED];\n    options[DIFFED] = function (vnode) {\n        // This __PROFILE__ is used for DCE testing\n        if (__PROFILE__ && typeof vnode.type === 'function') {\n            console.profileEnd(); // for options[DIFF]\n        }\n        oldDiffed?.(vnode);\n    };\n    // Profile the user-provided `render`.\n    const oldRender = options[RENDER];\n    options[RENDER] = function (vnode) {\n        const displayName = getDisplayName(vnode.type);\n        const originalRender = vnode[COMPONENT].render;\n        vnode[COMPONENT].render = function render(props, state, context) {\n            // This __PROFILE__ is used for DCE testing\n            if (__PROFILE__) {\n                console.profile(`render::${displayName}`);\n            }\n            try {\n                return originalRender.call(this, props, state, context);\n            }\n            finally {\n                // This __PROFILE__ is used for DCE testing\n                if (__PROFILE__) {\n                    console.profileEnd();\n                }\n                vnode[COMPONENT].render = originalRender;\n            }\n        };\n        oldRender?.(vnode);\n    };\n}\nfunction getDisplayName(type) {\n    return type.displayName ?? type.name;\n}\n//# sourceMappingURL=profile.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { BackgroundSnapshotInstance } from './backgroundSnapshot.js';\nimport { SnapshotInstance } from './snapshot.js';\nconst document = {};\nfunction setupBackgroundDocument() {\n    document.createElement = function (type) {\n        return new BackgroundSnapshotInstance(type);\n    };\n    document.createElementNS = function (_ns, type) {\n        return new BackgroundSnapshotInstance(type);\n    };\n    document.createTextNode = function (text) {\n        const i = new BackgroundSnapshotInstance(null);\n        i.setAttribute(0, text);\n        Object.defineProperty(i, 'data', {\n            set(v) {\n                i.setAttribute(0, v);\n            },\n        });\n        return i;\n    };\n}\nfunction setupDocument() {\n    document.createElement = function (type) {\n        return new SnapshotInstance(type);\n    };\n    document.createElementNS = function (_ns, type) {\n        return new SnapshotInstance(type);\n    };\n    document.createTextNode = function (text) {\n        const i = new SnapshotInstance(null);\n        i.setAttribute(0, text);\n        Object.defineProperty(i, 'data', {\n            set(v) {\n                i.setAttribute(0, v);\n            },\n        });\n        return i;\n    };\n}\n// if (__JS__) {\n//   setupBackgroundDocument();\n// } else if (__LEPUS__) {\n//   setupDocument();\n// }\nexport { setupBackgroundDocument, setupDocument, document };\n//# sourceMappingURL=document.js.map","import { GestureTypeInner, } from './types.js';\nimport { onWorkletCtxUpdate } from '@lynx-js/react/worklet-runtime/bindings';\nfunction isSerializedGesture(gesture) {\n    return gesture.__isSerialized ?? false;\n}\nfunction getGestureInfo(gesture, dom) {\n    const config = {\n        callbacks: [],\n    };\n    const baseGesture = gesture;\n    if (baseGesture.config) {\n        config.config = baseGesture.config;\n    }\n    for (const key of Object.keys(baseGesture.callbacks)) {\n        const callback = baseGesture.callbacks[key];\n        onWorkletCtxUpdate(callback, dom);\n        config.callbacks.push({\n            name: key,\n            callback: callback,\n        });\n    }\n    const relationMap = {\n        waitFor: baseGesture?.waitFor?.map(subGesture => subGesture.id) ?? [],\n        simultaneous: baseGesture?.simultaneousWith?.map(subGesture => subGesture.id) ?? [],\n        continueWith: baseGesture?.continueWith?.map(subGesture => subGesture.id) ?? [],\n    };\n    return {\n        config,\n        relationMap,\n    };\n}\nexport function processGesture(dom, gesture, gestureOptions) {\n    if (!gesture || !isSerializedGesture(gesture)) {\n        return;\n    }\n    if (!(gestureOptions && gestureOptions.domSet)) {\n        __SetAttribute(dom, 'has-react-gesture', true);\n        __SetAttribute(dom, 'flatten', false);\n    }\n    if (gesture.type === GestureTypeInner.COMPOSED) {\n        for (const subGesture of gesture.gestures) {\n            processGesture(dom, subGesture, { domSet: true });\n        }\n    }\n    else {\n        const baseGesture = gesture;\n        const { config, relationMap } = getGestureInfo(baseGesture, dom);\n        __SetGestureDetector(dom, baseGesture.id, baseGesture.type, config, relationMap);\n    }\n}\n//# sourceMappingURL=processGesture.js.map","import { onPostWorkletCtx } from '../worklet/ctx.js';\nimport { GestureTypeInner } from './types.js';\nexport function processGestureBackground(gesture) {\n    if (gesture.type === GestureTypeInner.COMPOSED) {\n        for (const subGesture of gesture.gestures) {\n            processGestureBackground(subGesture);\n        }\n    }\n    else {\n        const baseGesture = gesture;\n        for (const [name, value] of Object.entries(baseGesture.callbacks)) {\n            baseGesture.callbacks[name] = onPostWorkletCtx(value);\n        }\n    }\n}\n//# sourceMappingURL=processGestureBagkround.js.map","export var GestureTypeInner;\n(function (GestureTypeInner) {\n    GestureTypeInner[GestureTypeInner[\"COMPOSED\"] = -1] = \"COMPOSED\";\n    GestureTypeInner[GestureTypeInner[\"PAN\"] = 0] = \"PAN\";\n    GestureTypeInner[GestureTypeInner[\"FLING\"] = 1] = \"FLING\";\n    GestureTypeInner[GestureTypeInner[\"DEFAULT\"] = 2] = \"DEFAULT\";\n    GestureTypeInner[GestureTypeInner[\"TAP\"] = 3] = \"TAP\";\n    GestureTypeInner[GestureTypeInner[\"LONGPRESS\"] = 4] = \"LONGPRESS\";\n    GestureTypeInner[GestureTypeInner[\"ROTATION\"] = 5] = \"ROTATION\";\n    GestureTypeInner[GestureTypeInner[\"PINCH\"] = 6] = \"PINCH\";\n    GestureTypeInner[GestureTypeInner[\"NATIVE\"] = 7] = \"NATIVE\";\n})(GestureTypeInner || (GestureTypeInner = {}));\n//# sourceMappingURL=types.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { useCallback, useContext, useDebugValue, useErrorBoundary, useId, useImperativeHandle, useMemo, useLayoutEffect as usePreactLayoutEffect, useReducer, useRef, useState, } from 'preact/hooks';\n/**\n * `useLayoutEffect` is now an alias of `useEffect`. Use `useEffect` instead.\n *\n * Accepts a function that contains imperative, possibly effectful code. The effects run after main thread dom update without blocking it.\n *\n * @param effect - Imperative function that can return a cleanup function\n * @param deps - If present, effect will only activate if the values in the list change (using ===).\n *\n * @public\n *\n * @deprecated `useLayoutEffect` in the background thread cannot offer the precise timing for reading layout information and synchronously re-render, which is different from React.\n */\nfunction useLayoutEffect(effect, deps) {\n    return usePreactLayoutEffect(effect, deps);\n}\n/**\n * Accepts a function that contains imperative, possibly effectful code.\n * The effects run after main thread dom update without blocking it.\n *\n * @param effect - Imperative function that can return a cleanup function\n * @param deps - If present, effect will only activate if the values in the list change (using ===).\n *\n * @public\n */\nfunction useEffect(effect, deps) {\n    return usePreactLayoutEffect(effect, deps);\n}\nexport { \n// preact\nuseState, useReducer, useRef, useImperativeHandle, useLayoutEffect, useEffect, useCallback, useMemo, useContext, useDebugValue, useErrorBoundary, useId, };\n//# sourceMappingURL=react.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { useEffect, useMemo, useRef } from 'preact/hooks';\n/**\n * `useLynxGlobalEventListener` help you `addListener` as early as possible.\n *\n * @example\n *\n * Use this hooks to listen to event 'exposure' and event 'disexposure'\n *\n * ```jsx\n * function App() {\n *   useLynxGlobalEventListener('exposure', (e) => {\n *     console.log(\"exposure\", e)\n *   })\n *   useLynxGlobalEventListener('disexposure', (e) => {\n *     console.log(\"disexposure\", e)\n *   })\n *   return (\n *     <view\n *       style='width: 100px; height: 100px; background-color: red;'\n *       exposure-id='a'\n *     />\n *   )\n * }\n * ```\n *\n * @param eventName - Event name to listen\n * @param listener - Event handler\n * @public\n */\nexport function useLynxGlobalEventListener(eventName, listener) {\n    'background only';\n    const previousArgsRef = useRef();\n    useMemo(() => {\n        if (previousArgsRef.current) {\n            const [eventName, listener] = previousArgsRef.current;\n            lynx.getJSModule('GlobalEventEmitter').removeListener(eventName, listener);\n        }\n        lynx.getJSModule('GlobalEventEmitter').addListener(eventName, listener);\n        previousArgsRef.current = [eventName, listener];\n    }, [eventName, listener]);\n    useEffect(() => {\n        return () => {\n            if (previousArgsRef.current) {\n                const [eventName, listener] = previousArgsRef.current;\n                lynx.getJSModule('GlobalEventEmitter').removeListener(eventName, listener);\n            }\n        };\n    }, []);\n}\n//# sourceMappingURL=useLynxGlobalEventListener.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { __pendingListUpdates, componentAtIndexFactory, enqueueComponentFactory } from './list.js';\nimport { unref } from './snapshot/ref.js';\nimport { DynamicPartType, SnapshotInstance } from './snapshot.js';\nimport { isEmptyObject } from './utils.js';\nexport function isEmptyDiffResult(diffResult) {\n    const hasChanged = !isEmptyObject(diffResult.i)\n        || !isEmptyObject(diffResult.m) || diffResult.r.length > 0;\n    return !hasChanged;\n}\nexport function diffArrayLepus(before, after, isSameType, onDiffChildren) {\n    let lastPlacedIndex = 0;\n    const result = {\n        $$diff: true,\n        i: {},\n        r: [],\n        m: {},\n    };\n    const beforeMap = {};\n    for (let i = 0; i < before.length; i++) {\n        const node = before[i];\n        (beforeMap[node.type] ??= new Set()).add([node, i]);\n    }\n    for (let i = 0; i < after.length; i++) {\n        const afterNode = after[i];\n        const beforeNodes = beforeMap[afterNode.type];\n        let beforeNode;\n        if (beforeNodes\n            && beforeNodes.size > 0\n            // @ts-expect-error TS does not know about iterator :)\n            && (([beforeNode] = beforeNodes), beforeNode)\n            && isSameType(beforeNode[0], afterNode)) {\n            // Reuse old node\n            beforeNodes.delete(beforeNode);\n            const oldIndex = beforeNode[1];\n            onDiffChildren(beforeNode[0], afterNode, oldIndex, i);\n            if (oldIndex < lastPlacedIndex) {\n                result.m[oldIndex] = i;\n                continue;\n            }\n            else {\n                lastPlacedIndex = oldIndex;\n            }\n        }\n        else {\n            // Create new node\n            result.i[i] = afterNode;\n        }\n    }\n    // Delete\n    for (const k in beforeMap) {\n        for (const [, i] of beforeMap[k]) {\n            result.r.push(i);\n        }\n    }\n    return result;\n}\n// export function diffIterableLepus<A extends Typed, B extends Typed>(\n//   before: A[],\n//   after: Iterable<B>,\n//   isSameType: (a: A, b: B) => boolean,\n//   onDiffChildren: (a: A, b: B) => void\n// ): DiffResult<B> {\n//   let returnResult = EMPTY_DIFF_RESULT as DiffResult<B>;\n//   let lastPlacedIndex = 0;\n//   const result: DiffResult<B> = {\n//     $$diff: true,\n//     i: {},\n//     r: [],\n//     m: {},\n//   };\n//   const beforeMap: Record<string, Set<[A, number]>> = {};\n//   for (let i = 0; i < before.length; i++) {\n//     let node = before[i];\n//     (beforeMap[node.type] ??= new Set()).add([node, i]);\n//   }\n//   let i = 0;\n//   for (const afterNode of after) {\n//     const beforeNodes = beforeMap[afterNode.type];\n//     let beforeNode: [A, number];\n//     if (beforeNodes && (([beforeNode] = beforeNodes), beforeNode) && isSameType(beforeNode[0], afterNode)) {\n//       // Reuse old node\n//       beforeNodes.delete(beforeNode);\n//       const oldIndex = beforeNode[1];\n//       onDiffChildren(beforeNode[0], afterNode);\n//       if (oldIndex < lastPlacedIndex) {\n//         result.m[oldIndex] = i;\n//         returnResult = result;\n//         i++;\n//         continue;\n//       } else {\n//         lastPlacedIndex = oldIndex;\n//       }\n//     } else {\n//       // Create new node\n//       result.i[i] = afterNode;\n//       returnResult = result;\n//     }\n//     i++;\n//   }\n//   // delete\n//   for (const k in beforeMap) {\n//     for (const [, i] of beforeMap[k]) {\n//       result.r.push(i);\n//       returnResult = result;\n//     }\n//   }\n//   return result;\n// }\nexport function diffArrayAction(before, diffResult, onInsert, onRemove, onMove) {\n    if (isEmptyDiffResult(diffResult)) {\n        return before;\n    }\n    const deleteSet = new Set(diffResult.r);\n    const { i: insertMap, m: placementMap } = diffResult;\n    const moveTempMap = new Map();\n    let old;\n    let k = 0;\n    old = before[k];\n    // let current: T | null | undefined = null;\n    const result = [];\n    let i = 0; // index of the old list\n    let j = 0; // index of the new list\n    let remain = Object.keys(insertMap).length;\n    while (old || remain > 0) {\n        let keep = false;\n        if (old && deleteSet.has(j)) {\n            // delete\n            onRemove(old);\n        }\n        else if (old && placementMap[j] !== undefined) {\n            // save node to re-use\n            moveTempMap.set(placementMap[j], old);\n            remain++;\n        }\n        else {\n            // insert node\n            let newNode = old;\n            if (moveTempMap.has(i)) {\n                // insert re-used node\n                newNode = moveTempMap.get(i);\n                keep = true;\n                onMove(newNode, old);\n                remain--;\n            }\n            else if (insertMap[i] !== undefined) {\n                // insert new node\n                newNode = onInsert(insertMap[i], old);\n                keep = true;\n                remain--;\n            }\n            result.push(newNode);\n            i++;\n        }\n        if (old && !keep) {\n            old = before[++k];\n            j++;\n        }\n    }\n    return result;\n}\nexport function hydrate(before, after, options) {\n    after.__elements = before.__elements;\n    after.__element_root = before.__element_root;\n    if (!(options?.skipUnRef)) {\n        unref(before, false);\n    }\n    let swap;\n    if (swap = options?.swap) {\n        swap[before.__id] = after.__id;\n    }\n    after.__values?.forEach((value, index) => {\n        const old = before.__values[index];\n        if (value !== old) {\n            after.__values[index] = old;\n            after.setAttribute(index, value);\n        }\n    });\n    const { slot } = after.__snapshot_def;\n    if (!slot) {\n        return;\n    }\n    const beforeChildNodes = before.childNodes;\n    const afterChildNodes = after.childNodes;\n    slot.forEach(([type, elementIndex], index) => {\n        switch (type) {\n            case DynamicPartType.Slot:\n            case DynamicPartType.MultiChildren: {\n                // TODO: the following null assertions are not 100% safe\n                const v1 = beforeChildNodes[index];\n                const v2 = afterChildNodes[index];\n                hydrate(v1, v2, options);\n                break;\n            }\n            case DynamicPartType.Children: {\n                const diffResult = diffArrayLepus(beforeChildNodes, afterChildNodes, (a, b) => a.type === b.type, (a, b) => {\n                    hydrate(a, b, options);\n                });\n                diffArrayAction(beforeChildNodes, diffResult, (node, target) => {\n                    node.ensureElements();\n                    __InsertElementBefore(before.__elements[elementIndex], node.__element_root, target?.__element_root);\n                    return node;\n                }, node => {\n                    __RemoveElement(before.__elements[elementIndex], node.__element_root);\n                }, (node, target) => {\n                    __RemoveElement(before.__elements[elementIndex], node.__element_root);\n                    __InsertElementBefore(before.__elements[elementIndex], node.__element_root, target?.__element_root);\n                });\n                break;\n            }\n            case DynamicPartType.ListChildren: {\n                const removals = [];\n                const insertions = [];\n                const updateAction = [];\n                const diffResult = diffArrayLepus(beforeChildNodes, afterChildNodes, (a, b) => a.type === b.type, (a, b, oldIndex, newIndex) => {\n                    if (JSON.stringify(a.__listItemPlatformInfo)\n                        !== JSON.stringify(b.__listItemPlatformInfo)) {\n                        updateAction.push({\n                            ...b.__listItemPlatformInfo,\n                            from: newIndex,\n                            to: newIndex,\n                            // no flush\n                            flush: false,\n                        });\n                    }\n                    // Mark list-item which is rendered (has `__elements`) as DELETE\n                    // so list platform will call `enqueueComponent` on it\n                    // and will call `componentAtIndex` on the inserted one\n                    // In this way:\n                    //  1. we make sure `<list/>` for hydrate is like a leaf node\n                    //  2. we avoid hydrate so modifying recycleMap can be avoid\n                    //  3. the delete list-item is recycled for later use, so no waste\n                    if (a.__elements) {\n                        removals.push(oldIndex);\n                        insertions.push(newIndex);\n                    }\n                });\n                for (const i of diffResult.r) {\n                    removals.push(i);\n                }\n                for (const i in diffResult.i) {\n                    insertions.push(Number(i));\n                }\n                for (const i in diffResult.m) {\n                    removals.push(Number(i));\n                    insertions.push(diffResult.m[i]);\n                }\n                insertions.sort((a, b) => a - b);\n                removals.sort((a, b) => a - b);\n                const info = {\n                    insertAction: insertions.map((it) => ({\n                        position: it,\n                        type: afterChildNodes[it].type,\n                        ...afterChildNodes[it].__listItemPlatformInfo,\n                    })),\n                    removeAction: removals,\n                    updateAction,\n                };\n                const listElement = before.__elements[elementIndex];\n                __SetAttribute(listElement, 'update-list-info', info);\n                __UpdateListCallbacks(listElement, componentAtIndexFactory(afterChildNodes), enqueueComponentFactory());\n                // The `before` & `after` target to the same list element, so we need to\n                // avoid the newly created list's (behind snapshot instance `after`) \"update-list-info\" being recorded.\n                delete __pendingListUpdates.values[after.__id];\n            }\n        }\n    });\n}\n//# sourceMappingURL=hydrate.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport './lynx.js';\nimport './lynx/component.js';\nimport { Children, Component, Fragment, PureComponent, Suspense, lazy as backgroundLazy, createContext, createElement, createRef, forwardRef, isValidElement, memo, useSyncExternalStore, } from 'preact/compat';\nimport { useCallback, useContext, useDebugValue, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState, } from './hooks/react.js';\nimport { mainThreadLazy } from './lynx/lazy-bundle.js';\nexport { Component, createContext } from 'preact';\nexport { PureComponent } from 'preact/compat';\nexport * from './hooks/react.js';\nconst lazy = __LEPUS__\n    ? mainThreadLazy\n    : backgroundLazy;\n/**\n * @internal\n */\nexport default {\n    // hooks\n    useState,\n    useReducer,\n    useEffect,\n    useLayoutEffect,\n    useRef,\n    useImperativeHandle,\n    useMemo,\n    useCallback,\n    useContext,\n    useDebugValue,\n    useSyncExternalStore,\n    createContext,\n    createRef,\n    Fragment,\n    isValidElement,\n    Children,\n    Component,\n    PureComponent,\n    memo,\n    forwardRef,\n    Suspense,\n    lazy,\n    createElement,\n};\nexport { Children, createRef, Fragment, isValidElement, memo, forwardRef, Suspense, lazy, createElement, useSyncExternalStore, };\nexport * from './lynx-api.js';\n//# sourceMappingURL=index.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { Suspense, createElement, lazy } from 'preact/compat';\nimport './lynx.js';\nimport { factory as factory2 } from './compat/componentIs.js';\nimport { useMemo } from './hooks/react.js';\nimport { snapshotCreateList } from './list.js';\nimport { loadLazyBundle } from './lynx/lazy-bundle.js';\nimport { __root } from './root.js';\nimport { DynamicPartType, SnapshotInstance, __page, __pageId, createSnapshot, snapshotManager } from './snapshot.js';\nexport { __page, __pageId, __root };\nexport { SnapshotInstance, snapshotCreateList, createSnapshot, snapshotManager };\nexport const __DynamicPartSlot = DynamicPartType.Slot;\nexport const __DynamicPartMultiChildren = DynamicPartType.MultiChildren;\nexport const __DynamicPartChildren = DynamicPartType.Children;\nexport const __DynamicPartListChildren = DynamicPartType.ListChildren;\nexport const __DynamicPartChildren_0 = [[DynamicPartType.Children, 0]];\nexport { updateSpread } from './snapshot/spread.js';\nexport { updateEvent } from './snapshot/event.js';\nexport { updateRef, transformRef } from './snapshot/ref.js';\nexport { updateWorkletEvent } from './snapshot/workletEvent.js';\nexport { updateWorkletRef } from './snapshot/workletRef.js';\nexport { updateGesture } from './snapshot/gesture.js';\nexport { updateListItemPlatformInfo } from './snapshot/platformInfo.js';\nexport { options, \n// Component is not an internal API, but refresh needs it from 'react/internal'\nComponent, } from 'preact';\nexport { loadDynamicJS, __dynamicImport } from './lynx/dynamic-js.js';\nexport { withInitDataInState } from './compat/initData.js';\nexport { wrapWithLynxComponent } from './compat/lynxComponent.js';\n/**\n * @internal a polyfill for <component is=? />\n */\nexport const __ComponentIsPolyfill = /* @__PURE__ */ factory2(\n// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n{ Suspense, lazy, createElement, useMemo }, loadLazyBundle);\nexport { loadLazyBundle } from './lynx/lazy-bundle.js';\nexport { transformToWorklet } from './worklet/transformToWorklet.js';\nexport { registerWorkletOnBackground } from './worklet/hmr.js';\nexport { loadWorkletRuntime } from '@lynx-js/react/worklet-runtime/bindings';\n//# sourceMappingURL=internal.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { options } from 'preact';\nimport { CATCH_ERROR, COMPONENT, DIFF, VNODE } from '../renderToOpcodes/constants.js';\nlet delayedUnmounts = [];\nlet parentVNode;\nfunction takeDelayedUnmounts() {\n    const ret = delayedUnmounts;\n    delayedUnmounts = [];\n    // not clearing `parentVNode` here, which would be cleared before next diff in `options[DIFF]`\n    return ret;\n}\nfunction runDelayedUnmounts(delayedUnmounts) {\n    for (const fn of delayedUnmounts) {\n        fn();\n    }\n}\n/**\n * Delay `componentWillUnmount` until main thread patching finishes.\n */\nfunction initDelayUnmount() {\n    const oldUnmount = options.unmount;\n    options.unmount = (vnode) => {\n        if (!parentVNode) {\n            // `parentVNode` is the first vnode to unmount,\n            // which is needed to find proper error boundary when running `componentWillUnmount`.\n            // Shallow copy vnode to prevent modification to vnode in preact unmounting process.\n            parentVNode = { ...vnode };\n            const oldDiff = options[DIFF];\n            options[DIFF] = (vnode) => {\n                // A new diff indicates that the unmounting process of parentVNode is finished.\n                parentVNode = undefined;\n                options[DIFF] = oldDiff;\n                oldDiff?.(vnode);\n            };\n        }\n        const component = vnode[COMPONENT];\n        if (component) {\n            if (oldUnmount) {\n                const vnode_clone = { ...vnode };\n                delayedUnmounts.push(() => {\n                    const v = vnode_clone[COMPONENT][VNODE];\n                    vnode_clone[COMPONENT][VNODE] = vnode_clone;\n                    oldUnmount?.(vnode_clone);\n                    vnode_clone[COMPONENT][VNODE] = v;\n                });\n            }\n            if (component.componentWillUnmount) {\n                const unmount = component.componentWillUnmount;\n                // @ts-ignore\n                component.componentWillUnmount = undefined;\n                const parentVNode_ = parentVNode;\n                delayedUnmounts.push(() => {\n                    try {\n                        component.componentWillUnmount = unmount;\n                        component.componentWillUnmount();\n                    }\n                    catch (e) {\n                        options[CATCH_ERROR](e, parentVNode_);\n                    }\n                });\n            }\n        }\n    };\n}\nexport { initDelayUnmount, takeDelayedUnmounts, runDelayedUnmounts };\n//# sourceMappingURL=delayUnmount.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { render } from 'preact';\nimport { __root } from '../root.js';\nimport { globalCommitTaskMap } from './patch/commit.js';\nfunction destroyBackground() {\n    if (__PROFILE__) {\n        console.profile('destroyBackground');\n    }\n    render(null, __root);\n    globalCommitTaskMap.forEach(task => {\n        task();\n    });\n    globalCommitTaskMap.clear();\n    if (__PROFILE__) {\n        console.profileEnd();\n    }\n}\nexport { destroyBackground };\n//# sourceMappingURL=destroy.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nlet reloadVersion = 0;\nfunction getReloadVersion() {\n    return reloadVersion;\n}\nfunction increaseReloadVersion() {\n    return ++reloadVersion;\n}\nexport { getReloadVersion, increaseReloadVersion };\n//# sourceMappingURL=pass.js.map","import { options } from 'preact';\nimport { takeGlobalSnapshotPatch } from './snapshotPatch.js';\nimport { LifecycleConstant } from '../../lifecycleConstant.js';\nimport { PerformanceTimingKeys, globalPipelineOptions, markTiming, markTimingLegacy, setPipeline, } from '../../lynx/performance.js';\nimport { CATCH_ERROR, COMMIT, RENDER_CALLBACKS, VNODE } from '../../renderToOpcodes/constants.js';\nimport { updateBackgroundRefs } from '../../snapshot/ref.js';\nimport { backgroundSnapshotInstanceManager } from '../../snapshot.js';\nimport { isEmptyObject } from '../../utils.js';\nimport { takeWorkletRefInitValuePatch } from '../../worklet/workletRefPool.js';\nimport { runDelayedUnmounts, takeDelayedUnmounts } from '../delayUnmount.js';\nimport { getReloadVersion } from '../pass.js';\nlet globalFlushOptions = {};\nconst globalCommitTaskMap = /*@__PURE__*/ new Map();\nlet nextCommitTaskId = 1;\nlet globalBackgroundSnapshotInstancesToRemove = [];\nfunction replaceCommitHook() {\n    const oldCommit = options[COMMIT];\n    options[COMMIT] = async (vnode, commitQueue) => {\n        if (__LEPUS__) {\n            // for testing only\n            commitQueue.length = 0;\n            return;\n        }\n        markTimingLegacy(PerformanceTimingKeys.update_diff_vdom_end);\n        markTiming(PerformanceTimingKeys.diff_vdom_end);\n        markTiming(PerformanceTimingKeys.pack_changes_start);\n        if (__PROFILE__) {\n            console.profile('commitChanges');\n        }\n        const renderCallbacks = commitQueue.map(component => {\n            const ret = {\n                component,\n                [RENDER_CALLBACKS]: component[RENDER_CALLBACKS],\n                [VNODE]: component[VNODE],\n            };\n            component[RENDER_CALLBACKS] = [];\n            return ret;\n        });\n        commitQueue.length = 0;\n        const delayedUnmounts = takeDelayedUnmounts();\n        const backgroundSnapshotInstancesToRemove = globalBackgroundSnapshotInstancesToRemove;\n        globalBackgroundSnapshotInstancesToRemove = [];\n        const commitTaskId = genCommitTaskId();\n        globalCommitTaskMap.set(commitTaskId, () => {\n            updateBackgroundRefs(commitTaskId);\n            runDelayedUnmounts(delayedUnmounts);\n            oldCommit?.(vnode, renderCallbacks);\n            renderCallbacks.some(wrapper => {\n                try {\n                    wrapper[RENDER_CALLBACKS].some((cb) => {\n                        cb.call(wrapper.component);\n                    });\n                }\n                catch (e) {\n                    options[CATCH_ERROR](e, wrapper[VNODE]);\n                }\n            });\n            if (backgroundSnapshotInstancesToRemove.length) {\n                setTimeout(() => {\n                    backgroundSnapshotInstancesToRemove.forEach(id => {\n                        backgroundSnapshotInstanceManager.values.delete(id);\n                    });\n                }, 10000);\n            }\n        });\n        const snapshotPatch = takeGlobalSnapshotPatch();\n        const flushOptions = globalFlushOptions;\n        const workletRefInitValuePatch = takeWorkletRefInitValuePatch();\n        globalFlushOptions = {};\n        if (!snapshotPatch && workletRefInitValuePatch.length === 0) {\n            // before hydration, skip patch\n            if (__PROFILE__) {\n                console.profileEnd();\n            }\n            return;\n        }\n        const patch = {};\n        // TODO: check all fields in `flushOptions` from runtime3\n        if (snapshotPatch?.length) {\n            patch.snapshotPatch = snapshotPatch;\n        }\n        if (!isEmptyObject(flushOptions)) {\n            patch.flushOptions = flushOptions;\n        }\n        if (workletRefInitValuePatch.length) {\n            patch.workletRefInitValuePatch = workletRefInitValuePatch;\n        }\n        await commitPatchUpdate(patch, { commitTaskId });\n        const commitTask = globalCommitTaskMap.get(commitTaskId);\n        if (commitTask) {\n            commitTask();\n            globalCommitTaskMap.delete(commitTaskId);\n        }\n    };\n}\nfunction commitPatchUpdate(data, patchOptions) {\n    return new Promise(resolve => {\n        // console.debug('********** JS update:');\n        // printSnapshotInstance(\n        //   (backgroundSnapshotInstanceManager.values.get(1) || backgroundSnapshotInstanceManager.values.get(-1))!,\n        // );\n        // console.debug('commitPatchUpdate: ', JSON.stringify(data));\n        const obj = {\n            data: JSON.stringify(data),\n            patchOptions: {\n                ...patchOptions,\n                reloadVersion: getReloadVersion(),\n            },\n        };\n        markTiming(PerformanceTimingKeys.pack_changes_end);\n        if (globalPipelineOptions) {\n            obj.patchOptions.pipelineOptions = globalPipelineOptions;\n            setPipeline(undefined);\n        }\n        if (__PROFILE__) {\n            console.profileEnd();\n        }\n        lynx.getNativeApp().callLepusMethod(LifecycleConstant.patchUpdate, obj, resolve);\n    });\n}\nfunction genCommitTaskId() {\n    return nextCommitTaskId++;\n}\nfunction replaceRequestAnimationFrame() {\n    // to make afterPaintEffects run faster\n    const resolvedPromise = Promise.resolve();\n    options.requestAnimationFrame = (cb) => {\n        resolvedPromise.then(cb);\n    };\n}\n/**\n * @internal\n */\nexport { commitPatchUpdate, genCommitTaskId, globalBackgroundSnapshotInstancesToRemove, globalCommitTaskMap, globalFlushOptions, nextCommitTaskId, replaceCommitHook, replaceRequestAnimationFrame, };\n//# sourceMappingURL=commit.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport var SnapshotOperation;\n(function (SnapshotOperation) {\n    SnapshotOperation[SnapshotOperation[\"CreateElement\"] = 0] = \"CreateElement\";\n    SnapshotOperation[SnapshotOperation[\"InsertBefore\"] = 1] = \"InsertBefore\";\n    SnapshotOperation[SnapshotOperation[\"RemoveChild\"] = 2] = \"RemoveChild\";\n    SnapshotOperation[SnapshotOperation[\"SetAttribute\"] = 3] = \"SetAttribute\";\n    SnapshotOperation[SnapshotOperation[\"SetAttributes\"] = 4] = \"SetAttributes\";\n    SnapshotOperation[SnapshotOperation[\"DEV_ONLY_AddSnapshot\"] = 100] = \"DEV_ONLY_AddSnapshot\";\n    SnapshotOperation[SnapshotOperation[\"DEV_ONLY_RegisterWorklet\"] = 101] = \"DEV_ONLY_RegisterWorklet\";\n})(SnapshotOperation || (SnapshotOperation = {}));\nexport let __globalSnapshotPatch;\nexport function takeGlobalSnapshotPatch() {\n    if (__globalSnapshotPatch) {\n        const list = __globalSnapshotPatch;\n        __globalSnapshotPatch = [];\n        return list;\n    }\n    else {\n        return undefined;\n    }\n}\nexport function initGlobalSnapshotPatch() {\n    __globalSnapshotPatch = [];\n}\nexport function deinitGlobalSnapshotPatch() {\n    __globalSnapshotPatch = undefined;\n}\n//# sourceMappingURL=snapshotPatch.js.map","import { SnapshotOperation } from './snapshotPatch.js';\nimport { SnapshotInstance, createSnapshot, snapshotInstanceManager, snapshotManager } from '../../snapshot.js';\nfunction reportCtxNotFound() {\n    lynx.reportError(new Error(`snapshotPatchApply failed: ctx not found`));\n}\nexport function snapshotPatchApply(snapshotPatch) {\n    const length = snapshotPatch.length;\n    for (let i = 0; i < length; ++i) {\n        switch (snapshotPatch[i]) {\n            case SnapshotOperation.CreateElement: {\n                const type = snapshotPatch[++i];\n                const id = snapshotPatch[++i];\n                new SnapshotInstance(type, id);\n                break;\n            }\n            case SnapshotOperation.InsertBefore: {\n                const parentId = snapshotPatch[++i];\n                const childId = snapshotPatch[++i];\n                const beforeId = snapshotPatch[++i];\n                const parent = snapshotInstanceManager.values.get(parentId);\n                const child = snapshotInstanceManager.values.get(childId);\n                const existingNode = snapshotInstanceManager.values.get(beforeId);\n                if (!parent || !child) {\n                    reportCtxNotFound();\n                }\n                else {\n                    parent.insertBefore(child, existingNode);\n                }\n                break;\n            }\n            case SnapshotOperation.RemoveChild: {\n                const parentId = snapshotPatch[++i];\n                const childId = snapshotPatch[++i];\n                const parent = snapshotInstanceManager.values.get(parentId);\n                const child = snapshotInstanceManager.values.get(childId);\n                if (!parent || !child) {\n                    reportCtxNotFound();\n                }\n                else {\n                    parent.removeChild(child);\n                }\n                break;\n            }\n            case SnapshotOperation.SetAttribute: {\n                const id = snapshotPatch[++i];\n                const dynamicPartIndex = snapshotPatch[++i];\n                const value = snapshotPatch[++i];\n                const si = snapshotInstanceManager.values.get(id);\n                if (si) {\n                    si.setAttribute(dynamicPartIndex, value);\n                }\n                else {\n                    reportCtxNotFound();\n                }\n                break;\n            }\n            case SnapshotOperation.SetAttributes: {\n                const id = snapshotPatch[++i];\n                const values = snapshotPatch[++i];\n                const si = snapshotInstanceManager.values.get(id);\n                if (si) {\n                    si.setAttribute('values', values);\n                }\n                else {\n                    reportCtxNotFound();\n                }\n                break;\n            }\n            case SnapshotOperation.DEV_ONLY_AddSnapshot: {\n                if (__DEV__) {\n                    const uniqID = snapshotPatch[++i];\n                    const create = snapshotPatch[++i];\n                    const update = snapshotPatch[++i];\n                    const slot = snapshotPatch[++i];\n                    const cssId = snapshotPatch[++i] ?? 0;\n                    const entryName = snapshotPatch[++i];\n                    if (!snapshotManager.values.has(uniqID)) {\n                        // HMR-related\n                        // Update the evaluated snapshots from JS.\n                        createSnapshot(uniqID, evaluate(create), update.map(evaluate), slot, cssId, entryName);\n                    }\n                }\n                break;\n            }\n            case SnapshotOperation.DEV_ONLY_RegisterWorklet: {\n                // HMR-related\n                if (__DEV__) {\n                    const hash = snapshotPatch[++i];\n                    const fnStr = snapshotPatch[++i];\n                    const fn = evaluate(fnStr);\n                    registerWorklet('main-thread', hash, fn);\n                }\n                break;\n            }\n        }\n    }\n}\n/**\n * Given an expression string, return the evaluated result with ReactLynx runtime injected.\n *\n * @param code - The code to be evaluated\n * @returns the evaluated expression\n */\nfunction evaluate(code) {\n    return new Function(`return ${code}`)();\n}\n//# sourceMappingURL=snapshotPatchApply.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { clearDelayedWorklets, updateWorkletRefInitValueChanges } from '@lynx-js/react/worklet-runtime/bindings';\nimport { snapshotPatchApply } from './snapshotPatchApply.js';\nimport { LifecycleConstant } from '../../lifecycleConstant.js';\nimport { __pendingListUpdates } from '../../list.js';\nimport { PerformanceTimingKeys, markTiming, setPipeline } from '../../lynx/performance.js';\nimport { takeGlobalRefPatchMap } from '../../snapshot/ref.js';\nimport { __page } from '../../snapshot.js';\nimport { isEmptyObject } from '../../utils.js';\nimport { getReloadVersion } from '../pass.js';\nfunction updateMainThread({ data, patchOptions }) {\n    if ((patchOptions.reloadVersion ?? 0) < getReloadVersion()) {\n        return;\n    }\n    setPipeline(patchOptions.pipelineOptions);\n    markTiming(PerformanceTimingKeys.parse_changes_start);\n    let { snapshotPatch, workletRefInitValuePatch, flushOptions } = JSON.parse(data);\n    markTiming(PerformanceTimingKeys.parse_changes_end);\n    markTiming(PerformanceTimingKeys.patch_changes_start);\n    updateWorkletRefInitValueChanges(workletRefInitValuePatch);\n    __pendingListUpdates.clear();\n    if (snapshotPatch) {\n        snapshotPatchApply(snapshotPatch);\n    }\n    __pendingListUpdates.flush();\n    // console.debug('********** Lepus updatePatch:');\n    // printSnapshotInstance(snapshotInstanceManager.values.get(-1)!);\n    commitMainThreadPatchUpdate(patchOptions.commitTaskId);\n    if (patchOptions.isHydration) {\n        clearDelayedWorklets();\n    }\n    markTiming(PerformanceTimingKeys.patch_changes_end);\n    flushOptions ||= {};\n    if (patchOptions.pipelineOptions) {\n        flushOptions.pipelineOptions = patchOptions.pipelineOptions;\n    }\n    // TODO: triggerDataUpdated?\n    __FlushElementTree(__page, flushOptions);\n}\nfunction injectUpdateMainThread() {\n    Object.assign(globalThis, { [LifecycleConstant.patchUpdate]: updateMainThread });\n}\nfunction commitMainThreadPatchUpdate(commitTaskId) {\n    const refPatch = takeGlobalRefPatchMap();\n    if (!isEmptyObject(refPatch)) {\n        __OnLifecycleEvent([LifecycleConstant.ref, { commitTaskId, refPatch: JSON.stringify(refPatch) }]);\n    }\n}\n/**\n * @internal\n */\nexport { injectUpdateMainThread, commitMainThreadPatchUpdate };\n//# sourceMappingURL=updateMainThread.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { render } from 'preact';\nimport { __root, setRoot } from '../root.js';\nimport { SnapshotInstance, __page, snapshotInstanceManager } from '../snapshot.js';\nimport { isEmptyObject } from '../utils.js';\nimport { destroyBackground } from './destroy.js';\nimport { increaseReloadVersion } from './pass.js';\nimport { renderMainThread } from './render.js';\nimport { hydrate } from '../hydrate.js';\nimport { LifecycleConstant } from '../lifecycleConstant.js';\nimport { __pendingListUpdates } from '../list.js';\nimport { takeGlobalRefPatchMap } from '../snapshot/ref.js';\nimport { deinitGlobalSnapshotPatch } from './patch/snapshotPatch.js';\nimport { destroyWorklet } from '../worklet/destroy.js';\nfunction reloadMainThread(data, options) {\n    if (__PROFILE__) {\n        console.profile('reloadTemplate');\n    }\n    increaseReloadVersion();\n    if (typeof data == 'object' && !isEmptyObject(data)) {\n        Object.assign(lynx.__initData, data);\n    }\n    destroyWorklet();\n    snapshotInstanceManager.clear();\n    __pendingListUpdates.clear();\n    const oldRoot = __root;\n    setRoot(new SnapshotInstance('root'));\n    __root.__jsx = oldRoot.__jsx;\n    renderMainThread();\n    hydrate(oldRoot, __root, {\n        skipUnRef: true,\n    });\n    // always call this before `__FlushElementTree`\n    __pendingListUpdates.flush();\n    __FlushElementTree(__page, options);\n    __OnLifecycleEvent([\n        LifecycleConstant.firstScreen, /* FIRST_SCREEN */\n        {\n            root: JSON.stringify(__root),\n            refPatch: JSON.stringify(takeGlobalRefPatchMap()),\n        },\n    ]);\n    if (__PROFILE__) {\n        console.profileEnd();\n    }\n    return;\n}\nfunction reloadBackground(updateData) {\n    if (__PROFILE__) {\n        console.profile('reload');\n    }\n    deinitGlobalSnapshotPatch();\n    destroyBackground();\n    increaseReloadVersion();\n    // COW when modify `lynx.__initData` to make sure Provider & Consumer works\n    lynx.__initData = Object.assign({}, lynx.__initData, updateData);\n    render(__root.__jsx, __root);\n    if (__PROFILE__) {\n        console.profileEnd();\n    }\n}\nexport { reloadMainThread, reloadBackground };\n//# sourceMappingURL=reload.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { render } from 'preact';\nimport { renderOpcodesInto } from '../opcodes.js';\nimport { render as renderToString } from '../renderToOpcodes/index.js';\nimport { __root } from '../root.js';\n// @ts-ignore\nfunction renderMainThread() {\n    /* v8 ignore start */\n    if (process.env['NODE_ENV'] === 'test' && typeof __TESTING_FORCE_RENDER_TO_OPCODE__ !== 'undefined'\n        && !__TESTING_FORCE_RENDER_TO_OPCODE__) {\n        render(__root.__jsx, __root);\n    }\n    else {\n        let opcodes;\n        try {\n            if (__PROFILE__) {\n                console.profile('renderToString');\n            }\n            // @ts-ignore\n            opcodes = renderToString(__root.__jsx);\n        }\n        catch (e) {\n            lynx.reportError(e);\n            opcodes = [];\n        }\n        finally {\n            if (__PROFILE__) {\n                console.profileEnd();\n            }\n        }\n        if (__PROFILE__) {\n            console.profile('renderOpcodesInto');\n        }\n        renderOpcodesInto(opcodes, __root);\n        if (__PROFILE__) {\n            console.profileEnd();\n        }\n    }\n    /* v8 ignore stop */\n}\nexport { renderMainThread };\n//# sourceMappingURL=render.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport class LifecycleConstant {\n    static firstScreen = 'rLynxFirstScreen';\n    static updateFromRoot = 'updateFromRoot';\n    static globalEventFromLepus = 'globalEventFromLepus';\n    static ref = 'rLynxRef';\n    static jsReady = 'rLynxJSReady';\n    static patchUpdate = 'rLynxChange';\n}\nexport var NativeUpdateDataType;\n(function (NativeUpdateDataType) {\n    NativeUpdateDataType[NativeUpdateDataType[\"UPDATE\"] = 0] = \"UPDATE\";\n    NativeUpdateDataType[NativeUpdateDataType[\"RESET\"] = 1] = \"RESET\";\n})(NativeUpdateDataType || (NativeUpdateDataType = {}));\n//# sourceMappingURL=lifecycleConstant.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { hydrate } from './hydrate.js';\nimport { commitMainThreadPatchUpdate } from './lifecycle/patch/updateMainThread.js';\n// class ListUpdateInfoDiffing implements ListUpdateInfo {\n//   private oldChildNodes: SnapshotInstance[];\n//   constructor(private list: SnapshotInstance) {\n//     this.oldChildNodes = list.childNodes;\n//   }\n//   flush(): void {\n//     Object.defineProperty(SnapshotInstance.prototype, \"key\", {\n//       get: function () {\n//         return this.values[0][\"item-key\"];\n//       },\n//     });\n//   }\n//   onInsertBefore(newNode: SnapshotInstance, existingNode?: SnapshotInstance | undefined): void {}\n//   onRemoveChild(child: SnapshotInstance): void {}\n//   onSetAttribute(child: SnapshotInstance, attr: any): void {\n//     throw new Error(\"Method not implemented.\");\n//   }\n// }\nexport class ListUpdateInfoRecording {\n    list;\n    constructor(list) {\n        this.list = list;\n        this.oldChildNodes = list.childNodes;\n        // this.oldChildNodesSet = new Set(this.oldChildNodes);\n    }\n    // private __commitAndReset() {\n    //   (this.__pendingAttributes ??= []).push(this.__toAttribute());\n    //   this.oldChildNodes = this.list.childNodes;\n    //   this.oldChildNodesSet = new Set(this.oldChildNodes);\n    //   this.removeChild1.clear();\n    //   this.removeChild2.clear();\n    //   this.insertBefore.clear();\n    //   this.appendChild.length = 0;\n    //   this.platformInfoUpdate.clear();\n    // }\n    flush() {\n        const elementIndex = this.list.__snapshot_def.slot[0][1];\n        const listElement = this.list.__elements[elementIndex];\n        // this.__pendingAttributes?.forEach(pendingAttribute => {\n        //   __SetAttribute(listElement, \"update-list-info\", pendingAttribute);\n        //   __FlushElementTree(listElement);\n        // });\n        __SetAttribute(listElement, 'update-list-info', this.__toAttribute());\n        __UpdateListCallbacks(listElement, componentAtIndexFactory(this.list.childNodes), enqueueComponentFactory());\n    }\n    oldChildNodes;\n    // private oldChildNodesSet: Set<SnapshotInstance>;\n    removeChild = new Set();\n    insertBefore = new Map(); // insert V before K\n    appendChild = [];\n    platformInfoUpdate = new Map();\n    onInsertBefore(newNode, existingNode) {\n        // @ts-ignore\n        if (newNode.__parent) {\n            // if (!this.oldChildNodesSet.has(newNode)) {\n            //   this.__commitAndReset();\n            // }\n            this.removeChild.add(newNode);\n        }\n        if (existingNode) {\n            // if (!this.oldChildNodesSet.has(existingNode)) {\n            //   this.__commitAndReset();\n            // }\n            const newChildren = this.insertBefore.get(existingNode) ?? [];\n            newChildren.push(newNode);\n            this.insertBefore.set(existingNode, newChildren);\n        }\n        else {\n            this.appendChild.push(newNode);\n        }\n    }\n    onRemoveChild(child) {\n        // if (!this.oldChildNodesSet.has(child)) {\n        //   this.__commitAndReset();\n        // }\n        this.removeChild.add(child);\n    }\n    onSetAttribute(child, attr, _oldAttr) {\n        this.platformInfoUpdate.set(child, attr);\n    }\n    __toAttribute() {\n        const { removeChild, insertBefore, appendChild, platformInfoUpdate } = this;\n        const removals = [];\n        const insertions = [];\n        const updates = [];\n        let j = 0;\n        for (let i = 0; i < this.oldChildNodes.length; i++, j++) {\n            const child = this.oldChildNodes[i];\n            if (platformInfoUpdate.has(child)) {\n                updates.push({\n                    ...platformInfoUpdate.get(child),\n                    from: +j,\n                    to: +j,\n                    // no flush\n                    flush: false,\n                    type: child.type,\n                });\n            }\n            if (insertBefore.has(child)) {\n                const children = insertBefore.get(child);\n                children.forEach(c => {\n                    insertions.push({\n                        position: j,\n                        type: c.type,\n                        ...c.__listItemPlatformInfo,\n                    });\n                    j++;\n                });\n            }\n            if (removeChild.has(child)) {\n                removals.push(i);\n                removeChild.delete(child);\n                j--;\n            }\n        }\n        for (let i = 0; i < appendChild.length; i++) {\n            const child = appendChild[i];\n            insertions.push({\n                position: j + i,\n                type: child.type,\n                ...child.__listItemPlatformInfo,\n            });\n        }\n        insertions.sort((a, b) => a.position - b.position);\n        removals.sort((a, b) => a - b);\n        if (SystemInfo.lynxSdkVersion === '2.14'\n            || SystemInfo.lynxSdkVersion === '2.15'\n            || SystemInfo.lynxSdkVersion === '2.16'\n            || SystemInfo.lynxSdkVersion === '2.17'\n            || SystemInfo.lynxSdkVersion === '2.18') {\n            const elementIndex = this.list.__snapshot_def.slot[0][1];\n            const listElement = this.list.__elements[elementIndex];\n            // `__GetAttributeByName` is avaiable since Lynx 2.14\n            if (__GetAttributeByName(listElement, 'custom-list-name') === 'list-container') {\n                // `updateAction` must be full (not incremental) when Lynx version <= 2.18 and\n                // when `custom-list-name` is `list-container` (avaiable when Lynx version >= 2.14) is true,\n                updates.length = 0;\n                this.list.childNodes.forEach((child, index) => {\n                    updates.push({\n                        ...child.__listItemPlatformInfo,\n                        from: index,\n                        to: index,\n                        // no flush\n                        flush: false,\n                        type: child.type,\n                    });\n                });\n            }\n        }\n        return {\n            insertAction: insertions,\n            removeAction: removals,\n            updateAction: updates,\n        };\n    }\n    toJSON() {\n        // if (this.__pendingAttributes) {\n        //   return [...this.__pendingAttributes, this.__toAttribute()];\n        // } else {\n        //   return [this.__toAttribute()];\n        // }\n        return [this.__toAttribute()];\n    }\n}\nexport const __pendingListUpdates = {\n    values: {},\n    clear() {\n        this.values = {};\n    },\n    flush() {\n        Object.values(this.values).forEach(update => {\n            update.flush();\n        });\n        this.clear();\n    },\n};\nconst gSignMap = {};\nconst gRecycleMap = {};\nexport function componentAtIndexFactory(ctx) {\n    const componentAtIndex = (list, listID, cellIndex, operationID, enableReuseNotification) => {\n        const signMap = gSignMap[listID];\n        const recycleMap = gRecycleMap[listID];\n        if (!signMap || !recycleMap) {\n            throw new Error('componentAtIndex called on removed list');\n        }\n        const childCtx = ctx[cellIndex];\n        if (!childCtx) {\n            throw new Error('childCtx not found');\n        }\n        const platformInfo = childCtx.__listItemPlatformInfo || {};\n        const uniqID = childCtx.type + (platformInfo['reuse-identifier'] ?? '');\n        const recycleSignMap = recycleMap.get(uniqID);\n        if (childCtx.__elements) {\n            /**\n             * If this situation is encountered, there might be two cases:\n             * 1. Reusing with itself\n             *    In this case, enqueueComponent will be triggered first, followed by componentAtIndex.\n             * 2. Moving\n             *    In this case, the trigger order is uncertain; componentAtIndex might be triggered first, or enqueueComponent might be triggered first.\n             *\n             * When enqueueComponent is triggered first, there must be an item in the reuse pool with the same sign as here, which can be returned directly.\n             * When componentAtIndex is triggered first, a clone needs to be made first, then follow the logic for adding or reusing. The cloned item will enter the reuse pool in the subsequent enqueueComponent.\n             */\n            const root = childCtx.__elements[0];\n            const sign = __GetElementUniqueID(root);\n            if (recycleSignMap?.has(sign)) {\n                signMap.set(sign, childCtx);\n                recycleSignMap.delete(sign);\n                __FlushElementTree(root, { triggerLayout: true, operationID, elementID: sign, listID });\n                return sign;\n            }\n            else {\n                const newCtx = childCtx.takeElements();\n                signMap.set(sign, newCtx);\n            }\n        }\n        if (recycleSignMap && recycleSignMap.size > 0) {\n            const [first] = recycleSignMap;\n            const [sign, oldCtx] = first;\n            recycleSignMap.delete(sign);\n            hydrate(oldCtx, childCtx);\n            oldCtx.unRenderElements();\n            const root = childCtx.__element_root;\n            if (enableReuseNotification) {\n                __FlushElementTree(root, {\n                    triggerLayout: true,\n                    operationID,\n                    elementID: sign,\n                    listID,\n                    listReuseNotification: {\n                        listElement: list,\n                        itemKey: platformInfo['item-key'],\n                    },\n                });\n            }\n            else {\n                __FlushElementTree(root, {\n                    triggerLayout: true,\n                    operationID,\n                    elementID: sign,\n                    listID,\n                });\n            }\n            signMap.set(sign, childCtx);\n            commitMainThreadPatchUpdate(undefined);\n            return sign;\n        }\n        childCtx.ensureElements();\n        const root = childCtx.__element_root;\n        __AppendElement(list, root);\n        const sign = __GetElementUniqueID(root);\n        __FlushElementTree(root, {\n            triggerLayout: true,\n            operationID,\n            elementID: sign,\n            listID,\n        });\n        signMap.set(sign, childCtx);\n        commitMainThreadPatchUpdate(undefined);\n        return sign;\n    };\n    return componentAtIndex;\n}\nexport function enqueueComponentFactory() {\n    const enqueueComponent = (_, listID, sign) => {\n        const signMap = gSignMap[listID];\n        const recycleMap = gRecycleMap[listID];\n        if (!signMap || !recycleMap) {\n            throw new Error('enqueueComponent called on removed list');\n        }\n        const childCtx = signMap.get(sign);\n        if (!childCtx) {\n            return;\n        }\n        const platformInfo = childCtx.__listItemPlatformInfo || {};\n        const uniqID = childCtx.type + (platformInfo['reuse-identifier'] ?? '');\n        if (!recycleMap.has(uniqID)) {\n            recycleMap.set(uniqID, new Map());\n        }\n        recycleMap.get(uniqID).set(sign, childCtx);\n    };\n    return enqueueComponent;\n}\nexport function snapshotCreateList(pageId, _ctx, _expIndex) {\n    const signMap = new Map();\n    const recycleMap = new Map();\n    const list = __CreateList(pageId, componentAtIndexFactory([]), enqueueComponentFactory(), {});\n    const listID = __GetElementUniqueID(list);\n    gSignMap[listID] = signMap;\n    gRecycleMap[listID] = recycleMap;\n    return list;\n}\nexport function snapshotDestroyList(si) {\n    const [, elementIndex] = si.__snapshot_def.slot[0];\n    const list = si.__elements[elementIndex];\n    const listID = __GetElementUniqueID(list);\n    delete gSignMap[listID];\n    delete gRecycleMap[listID];\n}\n//# sourceMappingURL=list.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { render } from 'preact';\nimport { createContext, createElement } from 'preact/compat';\nimport { useState } from 'preact/hooks';\nimport { factory, withInitDataInState } from './compat/initData.js';\nimport { useLynxGlobalEventListener } from './hooks/useLynxGlobalEventListener.js';\nimport { LifecycleConstant } from './lifecycleConstant.js';\nimport { flushDelayedLifecycleEvents } from './lynx/tt.js';\nimport { __root } from './root.js';\n/**\n * The default and only root of ReactLynx for you to render JSX\n * @example\n * ```ts\n * import { root } from \"@lynx-js/react\"\n * ```\n *\n * @public\n */\nexport const root = {\n    render: (jsx) => {\n        if (__LEPUS__) {\n            __root.__jsx = jsx;\n        }\n        else {\n            __root.__jsx = jsx;\n            render(jsx, __root);\n            if (__FIRST_SCREEN_SYNC_TIMING__ === 'immediately') { }\n            else {\n                lynx.getNativeApp().callLepusMethod(LifecycleConstant.jsReady, {});\n            }\n            flushDelayedLifecycleEvents();\n        }\n    },\n    registerDataProcessors: (dataProcessorDefinition) => {\n        lynx.registerDataProcessors(dataProcessorDefinition);\n    },\n};\nconst _InitData = /* @__PURE__ */ factory({\n    createContext,\n    useState,\n    createElement,\n    useLynxGlobalEventListener,\n}, '__initData', 'onDataChanged');\n/**\n * The {@link https://react.dev/reference/react/createContext#provider | Provider} Component that provide `initData`,\n * you must wrap your JSX inside it\n * @group Components\n *\n * @example\n *\n * ```ts\n * import { root } from \"@lynx-js/react\"\n *\n * function App() {\n *   return (\n *     <InitDataConsumer children={(initData) => <view>...</view>}/>\n *   )\n * }\n *\n * root.render(\n *   <InitDataProvider>\n *      <App/>\n *   </InitDataProvider>\n * );\n *\n * ```\n *\n * @public\n */\nexport const InitDataProvider = /* @__PURE__ */ _InitData.Provider();\n/**\n * The {@link https://react.dev/reference/react/createContext#consumer | Consumer} Component that provide `initData`.\n * This should be used with {@link InitDataProvider}\n * @group Components\n * @public\n */\nexport const InitDataConsumer = /* @__PURE__ */ _InitData.Consumer();\n/**\n * A React Hooks for you to get `initData`.\n * If `initData` is changed, a re-render will be triggered automatically.\n *\n * @example\n *\n * ```ts\n * function App() {\n *   const initData = useInitData();\n *\n *   initData.someProperty // use it\n * }\n * ```\n *\n * @public\n */\nexport const useInitData = /* @__PURE__ */ _InitData.use();\n/**\n * A React Hooks for you to get notified when `initData` changed.\n *\n * @example\n * ```ts\n * function App() {\n *   useInitDataChanged((data) => {\n *     data.someProperty // can use it\n *   })\n * }\n * ```\n * @public\n */\nexport const useInitDataChanged = /* @__PURE__ */ _InitData.useChanged();\nexport { withInitDataInState };\nexport { runOnMainThread } from './worklet/runOnMainThread.js';\nexport { runOnBackground } from './worklet/runOnBackground.js';\nexport { MainThreadRef, useMainThreadRef } from './worklet/workletRef.js';\nexport { useLynxGlobalEventListener } from './hooks/useLynxGlobalEventListener.js';\n//# sourceMappingURL=lynx-api.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { options } from 'preact';\n// to make sure preact's hooks to register earlier than ours\nimport './hooks/react.js';\nimport { initProfileHook } from './debug/profile.js';\nimport { document, setupBackgroundDocument } from './document.js';\nimport { initDelayUnmount } from './lifecycle/delayUnmount.js';\nimport { replaceCommitHook, replaceRequestAnimationFrame } from './lifecycle/patch/commit.js';\nimport { injectUpdateMainThread } from './lifecycle/patch/updateMainThread.js';\nimport { injectCalledByNative } from './lynx/calledByNative.js';\nimport { setupLynxEnv } from './lynx/env.js';\nimport { injectLepusMethods } from './lynx/injectLepusMethods.js';\nimport { initTimingAPI } from './lynx/performance.js';\nimport { injectTt } from './lynx/tt.js';\n// @ts-expect-error Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature\nif (__LEPUS__ && typeof globalThis.processEvalResult === 'undefined') {\n    // @ts-expect-error Element implicitly has an 'any' type because type 'typeof globalThis' has no index signature\n    globalThis.processEvalResult = (result, schema) => {\n        return result?.(schema);\n    };\n}\nif (__LEPUS__) {\n    injectCalledByNative();\n    injectUpdateMainThread();\n    if (__DEV__) {\n        injectLepusMethods();\n    }\n}\n// TODO: replace this with __PROFILE__\nif (__PROFILE__) {\n    // We are profiling both main-thread and background.\n    initProfileHook();\n}\nif (__JS__) {\n    options.document = document;\n    setupBackgroundDocument();\n    injectTt();\n    if (process.env['NODE_ENV'] === 'test') { }\n    else {\n        replaceCommitHook();\n        replaceRequestAnimationFrame();\n        initTimingAPI();\n        initDelayUnmount();\n    }\n}\nsetupLynxEnv();\n//# sourceMappingURL=lynx.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { Component } from 'preact';\nimport { PerfSpecificKey, PerformanceTimingKeys, markTimingLegacy } from './performance.js';\nimport { globalFlushOptions } from '../lifecycle/patch/commit.js';\nimport { NEXT_STATE } from '../renderToOpcodes/constants.js';\nif (__JS__) {\n    const __Component = Component;\n    __Component.prototype._reactAppInstance = lynxCoreInject.tt;\n    __Component.prototype.getNodeRef = function (a, b) {\n        if (!__DISABLE_CREATE_SELECTOR_QUERY_INCOMPATIBLE_WARNING__) {\n            lynx.reportError(new Error('getNodeRef is deprecated and has different behavior in ReactLynx 3.0, please use ref or lynx.createSelectorQuery instead.'));\n        }\n        return lynxCoreInject.tt._reactLynx.ReactComponent.prototype.getNodeRef\n            .call({\n            _type: '',\n            _nativeApp: lynxCoreInject.tt._nativeApp,\n            _uiModule: lynxCoreInject.tt._nativeApp.nativeModuleProxy.LynxUIMethodModule,\n            _reactAppInstance: lynxCoreInject.tt,\n        }, a, b);\n    };\n    __Component.prototype.getNodeRefFromRoot = function (a) {\n        if (!__DISABLE_CREATE_SELECTOR_QUERY_INCOMPATIBLE_WARNING__) {\n            lynx.reportError(new Error('getNodeRefFromRoot is deprecated and has different behavior in ReactLynx 3.0, please use ref or lynx.createSelectorQuery instead.'));\n        }\n        return lynxCoreInject.tt._reactLynx.ReactComponent.prototype\n            .getNodeRefFromRoot.call({\n            _type: '',\n            _nativeApp: lynxCoreInject.tt._nativeApp,\n            _uiModule: lynxCoreInject.tt._nativeApp.nativeModuleProxy.LynxUIMethodModule,\n            _reactAppInstance: lynxCoreInject.tt,\n        }, a);\n    };\n    __Component.prototype.registerModule = function (name, module) {\n        this._reactAppInstance.registerModule(name, module);\n    };\n    __Component.prototype.getJSModule = function (name) {\n        return this._reactAppInstance.getJSModule(name);\n    };\n    __Component.prototype.addGlobalEventListener = function (eventName, callback, context) {\n        return this._reactAppInstance.getJSModule('GlobalEventEmitter').addListener(eventName, callback, context);\n    };\n    __Component.prototype.getElementById = function (id) {\n        if (!__DISABLE_CREATE_SELECTOR_QUERY_INCOMPATIBLE_WARNING__) {\n            lynx.reportError(new Error('getElementById on component instance is deprecated and has different behavior in ReactLynx 3.0, please use ref or lynx.getElementById instead.'));\n        }\n        return lynx.getElementById(id);\n    };\n    __Component.prototype.GlobalEventEmitter = lynxCoreInject.tt.GlobalEventEmitter;\n    __Component.prototype.createSelectorQuery = function () {\n        if (!__DISABLE_CREATE_SELECTOR_QUERY_INCOMPATIBLE_WARNING__) {\n            lynx.reportError(new Error('createSelectorQuery on component instance is deprecated and has different behavior in ReactLynx 3.0, please use ref or lynx.createSelectorQuery instead.'));\n        }\n        return lynx.createSelectorQuery();\n    };\n    const oldSetState = __Component.prototype.setState;\n    __Component.prototype.setState = function (state, callback) {\n        oldSetState.call(this, state, callback);\n        // @ts-ignore\n        const timingFlag = this[NEXT_STATE][PerfSpecificKey];\n        if (timingFlag) {\n            globalFlushOptions.__lynx_timing_flag = timingFlag;\n            markTimingLegacy(PerformanceTimingKeys.update_set_state_trigger, timingFlag);\n            this[NEXT_STATE][PerfSpecificKey] = '';\n        }\n    };\n}\n//# sourceMappingURL=component.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { loadLazyBundle } from './lazy-bundle.js';\nexport function loadDynamicJS(url) {\n    if (__LEPUS__) {\n        _ReportError(new Error(`A dynamic import (to \"${url}\") is leaked to Lepus bundle.`), { errorCode: 202 });\n        return Promise.reject();\n    }\n    return new Promise((resolve, reject) => {\n        lynx.requireModuleAsync(url, (err, data) => {\n            if (err) {\n                reject(err);\n            }\n            else {\n                resolve(data);\n            }\n        });\n    });\n}\nexport function __dynamicImport(url, options) {\n    const t = options?.with?.type;\n    if (t === 'component' || t === 'tsx' || t === 'jsx') {\n        return loadLazyBundle(url);\n    }\n    else {\n        return loadDynamicJS(url);\n    }\n}\n//# sourceMappingURL=dynamic-js.js.map","export function setupLynxEnv() {\n    if (!__LEPUS__) {\n        const { initData, updateData } = lynxCoreInject.tt._params;\n        // @ts-ignore\n        lynx.__initData = { ...initData, ...updateData };\n        lynx.registerDataProcessors = function () { };\n    }\n    if (__LEPUS__) {\n        // @ts-ignore\n        lynx.__initData = {\n        /* available only in renderPage */\n        };\n        // @ts-ignore\n        globalThis.SystemInfo = lynx.SystemInfo || {};\n        lynx.reportError = function (e) {\n            _ReportError(e, {\n                errorCode: 1101, // ErrCode::LYNX_ERROR_CODE_LEPUS in Lynx/base/debug/error_code.h\n            });\n        };\n        lynx.triggerGlobalEventFromLepus = function (eventName, params) {\n            __OnLifecycleEvent(['globalEventFromLepus', [eventName, params]]);\n        };\n        {\n            function __name(empty) {\n                return `Native${empty}Modules`;\n            }\n            // TODO(hongzhiyuan.hzy): make sure this is run before any other code (especially code access `NativeModules`)\n            // @ts-ignore\n            if (typeof globalThis[__name('')] === 'undefined') {\n                // @ts-ignore\n                globalThis[__name('')] = undefined;\n            }\n        }\n        lynx.registerDataProcessors = function (dataProcessorDefinition) {\n            let hasDefaultDataProcessorExecuted = false;\n            // @ts-ignore\n            globalThis.processData = (data, processorName) => {\n                if (__PROFILE__) {\n                    console.profile('processData');\n                }\n                let r;\n                try {\n                    if (processorName) {\n                        r = dataProcessorDefinition?.dataProcessors?.[processorName]?.(data)\n                            ?? data;\n                    }\n                    else {\n                        r = dataProcessorDefinition?.defaultDataProcessor?.(data) ?? data;\n                    }\n                }\n                catch (e) {\n                    lynx.reportError(e);\n                    // when there is an error\n                    // we should perform like dataProcessor returns nothing\n                    // so use `{}` rather than `data`\n                    r = {};\n                }\n                if (__PROFILE__) {\n                    console.profileEnd();\n                }\n                if (hasDefaultDataProcessorExecuted === false) {\n                    // @ts-ignore\n                    if (globalThis.__I18N_RESOURCE_TRANSLATION__) {\n                        r = {\n                            ...r,\n                            // @ts-ignore\n                            __I18N_RESOURCE_TRANSLATION__: globalThis.__I18N_RESOURCE_TRANSLATION__,\n                        };\n                    }\n                    // @ts-ignore\n                    if (__EXTRACT_STR__) {\n                        r = {\n                            ...r,\n                            // @ts-ignore\n                            _EXTRACT_STR: __EXTRACT_STR_IDENT_FLAG__,\n                        };\n                    }\n                }\n                if (processorName) { }\n                else {\n                    hasDefaultDataProcessorExecuted = true;\n                }\n                return r;\n                // TODO\n            };\n        };\n        // register empty DataProcessors to make sure `globalThis.processData` is set\n        lynx.registerDataProcessors();\n    }\n}\n//# sourceMappingURL=env.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { Fragment, lazy as backgroundLazy, createElement } from 'preact/compat';\n/**\n * To make code below works\n * const App1 = lazy(() => import(\"./x\").then(({App1}) => ({default: App1})))\n * const App2 = lazy(() => import(\"./x\").then(({App2}) => ({default: App2})))\n * @internal\n */\nexport const makeSyncThen = function (result) {\n    return function (onF) {\n        if (onF) {\n            let ret;\n            try {\n                ret = onF(result);\n            }\n            catch (e) {\n                return Promise.reject(e);\n            }\n            // @ts-ignore\n            if (ret && typeof ret.then === 'function' /* `thenable` object */) {\n                // lazy(() =>\n                //   import(\"./x\").then(() => new Promise(...))\n                // )\n                // Calling `then` and passing a callback is standard behavior\n                // but in Lepus runtime the callback will never be called\n                // So can be simplified to code below\n                return new Promise(() => { });\n                // TODO(hongzhiyuan.hzy): Avoid warning that cannot be turned-off, so the warning is commented\n                // lynx.reportError(\n                //   new Error(\n                //     'You returned a Promise in promise-chain of lazy-bundle import (eg. `import(\"./x\").then(() => new Promise(...))`), which will cause related Component unavailable at first-screen, '\n                //   ),\n                //   { level: \"warning\" }\n                // );\n            }\n            const p = Promise.resolve(ret);\n            // @ts-ignore\n            p.then = makeSyncThen(ret);\n            return p;\n        }\n        return this;\n    };\n};\n/**\n * Load dynamic component from source. Designed to be used with `lazy`.\n * @param source - where dynamic component template.js locates\n * @returns\n * @public\n */\nexport function loadLazyBundle(source) {\n    if (__LEPUS__) {\n        const query = __QueryComponent(source);\n        let result;\n        try {\n            result = query.evalResult;\n        }\n        catch (e) {\n            // Here we cannot return a rejected promise\n            // (which will eventually be an unhandled rejection and cause unnecessary redbox)\n            // But we still need a object in shape of Promise\n            // So we return a Promise which will never resolve or reject,\n            // which fit our principle \"lepus run only once at first-screen\" better\n            return new Promise(() => { });\n        }\n        const r = Promise.resolve(result);\n        // Why we should modify the implementation of `then`?\n        // We should make it `sync` so lepus first-screen render can use result above instantly\n        // We also should keep promise shape\n        // @ts-ignore\n        r.then = makeSyncThen(result);\n        return r;\n    }\n    else if (__JS__) {\n        return new Promise((resolve, reject) => {\n            const callback = result => {\n                const { code, detail } = result;\n                if (code === 0) {\n                    const { schema } = detail;\n                    const exports = lynxCoreInject.tt.getDynamicComponentExports(schema);\n                    // `code === 0` means that the lazy bundle has been successfully parsed. However,\n                    // its javascript files may still fail to run, which would prevent the retrieval of the exports object.\n                    if (exports) {\n                        resolve(exports);\n                        return;\n                    }\n                }\n                reject(new Error('Lazy bundle load failed: ' + JSON.stringify(result)));\n            };\n            if (typeof lynx.QueryComponent === 'function') {\n                lynx.QueryComponent(source, callback);\n            }\n            else {\n                lynx.getNativeLynx().QueryComponent(source, callback);\n            }\n        });\n    }\n    throw new Error('unreachable');\n}\nlynx.loadLazyBundle = loadLazyBundle;\n/**\n * @internal\n */\nexport function mainThreadLazy(loader) {\n    const Lazy = backgroundLazy(loader);\n    function _Lazy(props) {\n        try {\n            // @ts-expect-error `Lazy` returned from `backgroundLazy` should be a FC\n            return Lazy(props);\n        }\n        catch (e) {\n            // We should never throw at mainThread\n            return createElement(Fragment, {});\n        }\n    }\n    return _Lazy;\n}\n//# sourceMappingURL=lazy-bundle.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { options } from 'preact';\nimport { DIFF } from '../renderToOpcodes/constants.js';\nimport { __globalSnapshotPatch } from '../lifecycle/patch/snapshotPatch.js';\nvar PerformanceTimingKeys;\n(function (PerformanceTimingKeys) {\n    PerformanceTimingKeys[PerformanceTimingKeys[\"update_set_state_trigger\"] = 0] = \"update_set_state_trigger\";\n    PerformanceTimingKeys[PerformanceTimingKeys[\"update_diff_vdom_start\"] = 1] = \"update_diff_vdom_start\";\n    PerformanceTimingKeys[PerformanceTimingKeys[\"update_diff_vdom_end\"] = 2] = \"update_diff_vdom_end\";\n    // update_set_state_trigger, update_diff_vdom_start and update_diff_vdom_end is deprecated\n    PerformanceTimingKeys[PerformanceTimingKeys[\"diff_vdom_start\"] = 3] = \"diff_vdom_start\";\n    PerformanceTimingKeys[PerformanceTimingKeys[\"diff_vdom_end\"] = 4] = \"diff_vdom_end\";\n    PerformanceTimingKeys[PerformanceTimingKeys[\"pack_changes_start\"] = 5] = \"pack_changes_start\";\n    PerformanceTimingKeys[PerformanceTimingKeys[\"pack_changes_end\"] = 6] = \"pack_changes_end\";\n    PerformanceTimingKeys[PerformanceTimingKeys[\"parse_changes_start\"] = 7] = \"parse_changes_start\";\n    PerformanceTimingKeys[PerformanceTimingKeys[\"parse_changes_end\"] = 8] = \"parse_changes_end\";\n    PerformanceTimingKeys[PerformanceTimingKeys[\"patch_changes_start\"] = 9] = \"patch_changes_start\";\n    PerformanceTimingKeys[PerformanceTimingKeys[\"patch_changes_end\"] = 10] = \"patch_changes_end\";\n    PerformanceTimingKeys[PerformanceTimingKeys[\"hydrate_parse_snapshot_start\"] = 11] = \"hydrate_parse_snapshot_start\";\n    PerformanceTimingKeys[PerformanceTimingKeys[\"hydrate_parse_snapshot_end\"] = 12] = \"hydrate_parse_snapshot_end\";\n})(PerformanceTimingKeys || (PerformanceTimingKeys = {}));\n/**\n * @deprecated used by old timing api(setState timing flag)\n */\nconst PerfSpecificKey = '__lynx_timing_flag';\nlet timingFlag;\nlet shouldMarkDiffVdomStart = false;\nlet shouldMarkDiffVdomEnd = false;\nlet globalPipelineOptions;\n/**\n * @deprecated used by old timing api(setState timing flag)\n */\nfunction markTimingLegacy(key, timingFlag_) {\n    switch (key) {\n        case PerformanceTimingKeys.update_set_state_trigger: {\n            shouldMarkDiffVdomStart = true;\n            shouldMarkDiffVdomEnd = true;\n            timingFlag = timingFlag_;\n            break;\n        }\n        case PerformanceTimingKeys.update_diff_vdom_start: {\n            /* v8 ignore start */\n            if (!shouldMarkDiffVdomStart) {\n                return;\n            }\n            /* v8 ignore stop */\n            shouldMarkDiffVdomStart = false;\n            break;\n        }\n        case PerformanceTimingKeys.update_diff_vdom_end: {\n            if (!shouldMarkDiffVdomEnd) {\n                return;\n            }\n            shouldMarkDiffVdomEnd = false;\n            break;\n        }\n    }\n    lynx.getNativeApp().markTiming?.(timingFlag, PerformanceTimingKeys[key]);\n}\nfunction beginPipeline(needTimestamps, timingFlag) {\n    globalPipelineOptions = lynx.performance?._generatePipelineOptions?.();\n    if (globalPipelineOptions) {\n        globalPipelineOptions.needTimestamps = needTimestamps;\n        lynx.performance?._onPipelineStart?.(globalPipelineOptions.pipelineID);\n        if (timingFlag) {\n            lynx.performance?._bindPipelineIdWithTimingFlag?.(globalPipelineOptions.pipelineID, timingFlag);\n        }\n    }\n}\nfunction setPipeline(pipeline) {\n    globalPipelineOptions = pipeline;\n}\nfunction markTiming(timestampKey, force) {\n    if (globalPipelineOptions && (force || globalPipelineOptions.needTimestamps)) {\n        lynx.performance?._markTiming?.(globalPipelineOptions.pipelineID, PerformanceTimingKeys[timestampKey]);\n    }\n}\nfunction initTimingAPI() {\n    const oldDiff = options[DIFF];\n    options[DIFF] = (vnode) => {\n        // check `__globalSnapshotPatch` to make sure this only runs after hydrate\n        if (__JS__ && __globalSnapshotPatch) {\n            if (!globalPipelineOptions) {\n                beginPipeline(false);\n                markTiming(PerformanceTimingKeys.diff_vdom_start, true);\n            }\n            if (shouldMarkDiffVdomStart) {\n                markTimingLegacy(PerformanceTimingKeys.update_diff_vdom_start);\n            }\n        }\n        oldDiff?.(vnode);\n    };\n}\n/**\n * @internal\n */\nexport { PerformanceTimingKeys, PerfSpecificKey, markTimingLegacy, initTimingAPI, beginPipeline, markTiming, setPipeline, globalPipelineOptions, };\n//# sourceMappingURL=performance.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { options, render } from 'preact';\nimport { LifecycleConstant, NativeUpdateDataType } from '../lifecycleConstant.js';\nimport { PerformanceTimingKeys, beginPipeline, markTiming } from './performance.js';\nimport { BackgroundSnapshotInstance, hydrate } from '../backgroundSnapshot.js';\nimport { destroyBackground } from '../lifecycle/destroy.js';\nimport { commitPatchUpdate, genCommitTaskId, globalCommitTaskMap } from '../lifecycle/patch/commit.js';\nimport { reloadBackground } from '../lifecycle/reload.js';\nimport { CHILDREN, COMPONENT, DIFF, DIFFED, FORCE } from '../renderToOpcodes/constants.js';\nimport { __root } from '../root.js';\nimport { globalRefsToSet, updateBackgroundRefs } from '../snapshot/ref.js';\nimport { backgroundSnapshotInstanceManager } from '../snapshot.js';\nimport { destroyWorklet } from '../worklet/destroy.js';\nexport function runWithForce(cb) {\n    // save vnode and its `_component` in WeakMap\n    const m = new WeakMap();\n    const oldDiff = options[DIFF];\n    options[DIFF] = (vnode) => {\n        if (oldDiff) {\n            oldDiff(vnode);\n        }\n        // when `options[DIFF]` is called, a newVnode is passed in\n        // so its `vnode[COMPONENT]` should be null,\n        // but it will be set later\n        Object.defineProperty(vnode, COMPONENT, {\n            configurable: true,\n            set(c) {\n                m.set(vnode, c);\n                if (c) {\n                    c[FORCE] = true;\n                }\n            },\n            get() {\n                return m.get(vnode);\n            },\n        });\n    };\n    const oldDiffed = options[DIFFED];\n    options[DIFFED] = (vnode) => {\n        if (oldDiffed) {\n            oldDiffed(vnode);\n        }\n        // delete is a reverse operation of previous `Object.defineProperty`\n        delete vnode[COMPONENT];\n        // restore\n        vnode[COMPONENT] = m.get(vnode);\n    };\n    try {\n        cb();\n    }\n    finally {\n        options[DIFF] = oldDiff;\n        options[DIFFED] = oldDiffed;\n    }\n}\nfunction injectTt() {\n    // @ts-ignore\n    const tt = lynxCoreInject.tt;\n    tt.OnLifecycleEvent = OnLifecycleEvent;\n    tt.publishEvent = delayedPublishEvent;\n    tt.publicComponentEvent = delayedPublicComponentEvent;\n    tt.callDestroyLifetimeFun = () => {\n        destroyWorklet();\n        destroyBackground();\n    };\n    tt.updateGlobalProps = updateGlobalProps;\n    tt.updateCardData = updateCardData;\n    tt.onAppReload = reloadBackground;\n    tt.processCardConfig = () => {\n        // used to updateTheme, no longer rely on this function\n    };\n}\nlet delayedLifecycleEvents;\nasync function OnLifecycleEvent([type, data]) {\n    const hasRootRendered = CHILDREN in __root;\n    // never called `render(<App/>, __root)`\n    // happens if user call `root.render()` async\n    if (!hasRootRendered) {\n        delayedLifecycleEvents ??= [];\n        delayedLifecycleEvents.push([type, data]);\n        return;\n    }\n    if (__PROFILE__) {\n        console.profile(`OnLifecycleEvent::${type}`);\n    }\n    switch (type) {\n        case LifecycleConstant.firstScreen: {\n            const { root: lepusSide, refPatch, jsReadyEventIdSwap } = data;\n            if (__PROFILE__) {\n                console.profile('hydrate');\n            }\n            beginPipeline(true, 'react_lynx_hydrate');\n            markTiming(PerformanceTimingKeys.hydrate_parse_snapshot_start);\n            const before = JSON.parse(lepusSide);\n            markTiming(PerformanceTimingKeys.hydrate_parse_snapshot_end);\n            markTiming(PerformanceTimingKeys.diff_vdom_start);\n            const snapshotPatch = hydrate(before, __root);\n            if (__PROFILE__) {\n                console.profileEnd();\n            }\n            markTiming(PerformanceTimingKeys.diff_vdom_end);\n            if (delayedEvents) {\n                delayedEvents.forEach((args) => {\n                    const [handlerName, data] = args;\n                    let [idStr, ...rest] = handlerName.split(':');\n                    while (jsReadyEventIdSwap[idStr])\n                        idStr = jsReadyEventIdSwap[idStr];\n                    try {\n                        publishEvent([idStr, ...rest].join(':'), data);\n                    }\n                    catch (e) {\n                        lynx.reportError(e);\n                    }\n                });\n                delayedEvents.length = 0;\n            }\n            lynxCoreInject.tt.publishEvent = publishEvent;\n            lynxCoreInject.tt.publicComponentEvent = publicComponentEvent;\n            if (__PROFILE__) {\n                console.profile('patchRef');\n            }\n            if (refPatch) {\n                globalRefsToSet.set(0, JSON.parse(refPatch));\n                updateBackgroundRefs(0);\n            }\n            if (__PROFILE__) {\n                console.profileEnd();\n            }\n            markTiming(PerformanceTimingKeys.pack_changes_start);\n            // console.debug(\"********** After hydration:\");\n            // printSnapshotInstance(__root as BackgroundSnapshotInstance);\n            if (__PROFILE__) {\n                console.profile('commitChanges');\n            }\n            const commitTaskId = genCommitTaskId();\n            await commitPatchUpdate({ snapshotPatch }, { commitTaskId, isHydration: true });\n            updateBackgroundRefs(commitTaskId);\n            globalCommitTaskMap.forEach((commitTask, id) => {\n                if (id > commitTaskId) {\n                    return;\n                }\n                commitTask();\n                globalCommitTaskMap.delete(id);\n            });\n            break;\n        }\n        case LifecycleConstant.globalEventFromLepus: {\n            const [eventName, params] = data;\n            lynx.getJSModule('GlobalEventEmitter').trigger(eventName, params);\n            break;\n        }\n        case LifecycleConstant.ref: {\n            const { refPatch, commitTaskId } = data;\n            if (commitTaskId) {\n                globalRefsToSet.set(commitTaskId, JSON.parse(refPatch));\n            }\n            else {\n                globalRefsToSet.set(0, JSON.parse(refPatch));\n                updateBackgroundRefs(0);\n            }\n            break;\n        }\n    }\n    if (__PROFILE__) {\n        console.profileEnd();\n    }\n}\nfunction flushDelayedLifecycleEvents() {\n    if (delayedLifecycleEvents) {\n        delayedLifecycleEvents.forEach((e) => {\n            try {\n                OnLifecycleEvent(e);\n            }\n            catch (e) {\n                lynx.reportError(e);\n            }\n        });\n        delayedLifecycleEvents.length = 0;\n    }\n}\nfunction publishEvent(handlerName, data) {\n    // TODO: delay js events until js ready\n    lynxCoreInject.tt.callBeforePublishEvent?.(data);\n    const eventHandler = backgroundSnapshotInstanceManager.getValueBySign(handlerName);\n    if (eventHandler) {\n        try {\n            eventHandler(data);\n        }\n        catch (e) {\n            lynx.reportError(e);\n        }\n    }\n}\nfunction publicComponentEvent(_componentId, handlerName, data) {\n    publishEvent(handlerName, data);\n}\nlet delayedEvents;\nfunction delayedPublishEvent(handlerName, data) {\n    delayedEvents ??= [];\n    delayedEvents.push([handlerName, data]);\n}\nfunction delayedPublicComponentEvent(_componentId, handlerName, data) {\n    delayedPublishEvent(handlerName, data);\n}\nfunction updateGlobalProps(newData) {\n    Object.assign(lynx.__globalProps, newData);\n    // Our purpose is to make sure SYNC setState inside `emit`'s listeners\n    // can be batched with updateFromRoot\n    // This is already done because updateFromRoot will consume all dirty flags marked by\n    // the setState, and setState's flush will be a noop. No extra diffs will be needed.\n    Promise.resolve().then(() => {\n        runWithForce(() => render(__root.__jsx, __root));\n    });\n    lynxCoreInject.tt.GlobalEventEmitter.emit('onGlobalPropsChanged');\n}\nfunction updateCardData(newData, options) {\n    const { ['__lynx_timing_flag']: performanceTimingFlag, ...restNewData } = newData;\n    if (performanceTimingFlag) {\n        lynx.reportError(new Error(`Received unsupported updateData with \\`__lynx_timing_flag\\` (value \"${performanceTimingFlag}\"), the timing flag is ignored`));\n    }\n    const { type = NativeUpdateDataType.UPDATE } = options || {};\n    if (type == NativeUpdateDataType.RESET) {\n        // @ts-ignore\n        lynx.__initData = {};\n    }\n    // COW when modify `lynx.__initData` to make sure Provider & Consumer works\n    // @ts-ignore\n    lynx.__initData = Object.assign({}, lynx.__initData, restNewData);\n    lynxCoreInject.tt.GlobalEventEmitter.emit('onDataChanged');\n}\nexport { injectTt, flushDelayedLifecycleEvents, delayedLifecycleEvents };\n//# sourceMappingURL=tt.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { CHILDREN } from './renderToOpcodes/constants.js';\nimport { SnapshotInstance } from './snapshot.js';\nvar Opcode;\n(function (Opcode) {\n    Opcode[Opcode[\"Begin\"] = 0] = \"Begin\";\n    Opcode[Opcode[\"End\"] = 1] = \"End\";\n    Opcode[Opcode[\"Attr\"] = 2] = \"Attr\";\n    Opcode[Opcode[\"Text\"] = 3] = \"Text\";\n})(Opcode || (Opcode = {}));\nexport function renderOpcodesInto(opcodes, into) {\n    let top = into;\n    const stack = [into];\n    for (let i = 0; i < opcodes.length;) {\n        const opcode = opcodes[i];\n        switch (opcode) {\n            case Opcode.Begin: {\n                const p = top;\n                top = opcodes[i + 1];\n                // @ts-ignore\n                if (top.__parent) {\n                    // already inserted\n                    top = new SnapshotInstance(top.type);\n                }\n                p.insertBefore(top);\n                stack.push(top);\n                i += 2;\n                break;\n            }\n            case Opcode.End: {\n                // @ts-ignore\n                top[CHILDREN] = undefined;\n                stack.pop();\n                const p = stack[stack.length - 1];\n                top = p;\n                i += 1;\n                break;\n            }\n            case Opcode.Attr: {\n                const key = opcodes[i + 1];\n                const value = opcodes[i + 2];\n                top.setAttribute(key, value);\n                i += 3;\n                break;\n            }\n            case Opcode.Text: {\n                const text = opcodes[i + 1];\n                const s = new SnapshotInstance(null);\n                s.setAttribute(0, text);\n                top.insertBefore(s);\n                i += 2;\n                break;\n            }\n        }\n    }\n}\n//# sourceMappingURL=opcodes.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport const DIFF = '__b';\nexport const RENDER = '__r';\nexport const DIFFED = 'diffed';\nexport const COMMIT = '__c';\nexport const SKIP_EFFECTS = '__s';\nexport const CATCH_ERROR = '__e';\n// VNode properties\nexport const COMPONENT = '__c';\nexport const CHILDREN = '__k';\nexport const PARENT = '__';\nexport const MASK = '__m';\n// Component properties\nexport const VNODE = '__v';\nexport const DIRTY = '__d';\nexport const FORCE = '__e';\nexport const NEXT_STATE = '__s';\nexport const CHILD_DID_SUSPEND = '__c';\nexport const RENDER_CALLBACKS = '__h';\nexport const HOOK = '__h';\n//# sourceMappingURL=constants.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n// modified from preact-render-to-string@6.0.3\n// @ts-nocheck\nimport { Fragment, h, options } from 'preact';\nimport { CHILDREN, COMMIT, COMPONENT, DIFF, DIFFED, DIRTY, NEXT_STATE, PARENT, RENDER, SKIP_EFFECTS, VNODE, } from './constants.js';\n/** @typedef {import('preact').VNode} VNode */\nconst EMPTY_ARR = [];\nconst isArray = /* @__PURE__ */ Array.isArray;\nconst assign = /* @__PURE__ */ Object.assign;\n// Global state for the current render pass\nlet beforeDiff, afterDiff, renderHook, ummountHook;\n/**\n * Render Preact JSX + Components to an HTML string.\n * @param {VNode} vnode\tJSX Element / VNode to render\n * @param {object} [context] Initial root context object\n */\nexport function renderToString(vnode, context) {\n    // Performance optimization: `renderToString` is synchronous and we\n    // therefore don't execute any effects. To do that we pass an empty\n    // array to `options._commit` (`__c`). But we can go one step further\n    // and avoid a lot of dirty checks and allocations by setting\n    // `options._skipEffects` (`__s`) too.\n    const previousSkipEffects = options[SKIP_EFFECTS];\n    options[SKIP_EFFECTS] = true;\n    // store options hooks once before each synchronous render call\n    beforeDiff = options[DIFF];\n    afterDiff = options[DIFFED];\n    renderHook = options[RENDER];\n    ummountHook = options.unmount;\n    const parent = h(Fragment, null);\n    parent[CHILDREN] = [vnode];\n    const opcodes = [];\n    try {\n        _renderToString(vnode, context || EMPTY_OBJ, false, undefined, parent, opcodes);\n    }\n    finally {\n        // options._commit, we don't schedule any effects in this library right now,\n        // so we can pass an empty queue to this hook.\n        if (options[COMMIT])\n            options[COMMIT](vnode, EMPTY_ARR);\n        options[SKIP_EFFECTS] = previousSkipEffects;\n        EMPTY_ARR.length = 0;\n    }\n    return opcodes;\n}\n// Installed as setState/forceUpdate for function components\nfunction markAsDirty() {\n    this.__d = true;\n}\nconst EMPTY_OBJ = {};\nexport const __OpBegin = 0;\nexport const __OpEnd = 1;\nexport const __OpAttr = 2;\nexport const __OpText = 3;\n/**\n * @param {VNode} vnode\n * @param {Record<string, unknown>} context\n */\nfunction renderClassComponent(vnode, context) {\n    let type = /** @type {import(\"preact\").ComponentClass<typeof vnode.props>} */ (vnode.type);\n    let c = new type(vnode.props, context);\n    vnode[COMPONENT] = c;\n    c[VNODE] = vnode;\n    c.props = vnode.props;\n    c.context = context;\n    // turn off stateful re-rendering:\n    c[DIRTY] = true;\n    if (c.state == null)\n        c.state = EMPTY_OBJ;\n    if (c[NEXT_STATE] == null) {\n        c[NEXT_STATE] = c.state;\n    }\n    if (type.getDerivedStateFromProps) {\n        c.state = assign({}, c.state, type.getDerivedStateFromProps(c.props, c.state));\n    }\n    if (renderHook)\n        renderHook(vnode);\n    return c.render(c.props, c.state, context);\n}\n/**\n * Recursively render VNodes to HTML.\n * @param {VNode|any} vnode\n * @param {any} context\n * @param {boolean} isSvgMode\n * @param {any} selectValue\n * @param {VNode} parent\n * @param opcodes\n */\nfunction _renderToString(vnode, context, isSvgMode, selectValue, parent, opcodes) {\n    // Ignore non-rendered VNodes/values\n    if (vnode == null || vnode === true || vnode === false || vnode === '') {\n        return;\n    }\n    // Text VNodes: escape as HTML\n    if (typeof vnode !== 'object') {\n        if (typeof vnode === 'function')\n            return;\n        opcodes.push(__OpText, vnode + '');\n        return;\n    }\n    // Recurse into children / Arrays\n    if (isArray(vnode)) {\n        parent[CHILDREN] = vnode;\n        for (let i = 0; i < vnode.length; i++) {\n            let child = vnode[i];\n            if (child == null || typeof child === 'boolean')\n                continue;\n            _renderToString(child, context, isSvgMode, selectValue, parent, opcodes);\n        }\n        return;\n    }\n    // VNodes have {constructor:undefined} to prevent JSON injection:\n    // if (vnode.constructor !== undefined) return;\n    vnode[PARENT] = parent;\n    if (beforeDiff)\n        beforeDiff(vnode);\n    let type = vnode.type, props = vnode.props, cctx = context, contextType, rendered, component;\n    // Invoke rendering on Components\n    if (typeof type === 'function') {\n        if (type === Fragment) {\n            rendered = props.children;\n        }\n        else {\n            contextType = type.contextType;\n            if (contextType != null) {\n                let provider = context[contextType.__c];\n                cctx = provider ? provider.props.value : contextType.__;\n            }\n            if (type.prototype && typeof type.prototype.render === 'function') {\n                rendered = /**#__NOINLINE__**/ renderClassComponent(vnode, cctx);\n                component = vnode[COMPONENT];\n            }\n            else {\n                component = {\n                    __v: vnode,\n                    props,\n                    context: cctx,\n                    // silently drop state updates\n                    setState: markAsDirty,\n                    forceUpdate: markAsDirty,\n                    __d: true,\n                    // hooks\n                    __h: [],\n                };\n                vnode[COMPONENT] = component;\n                component.constructor = type;\n                component.render = doRender;\n                // If a hook invokes setState() to invalidate the component during rendering,\n                // re-render it up to 25 times to allow \"settling\" of memoized states.\n                // Note:\n                //   This will need to be updated for Preact 11 to use internal.flags rather than component._dirty:\n                //   https://github.com/preactjs/preact/blob/d4ca6fdb19bc715e49fd144e69f7296b2f4daa40/src/diff/component.js#L35-L44\n                let count = 0;\n                while (component[DIRTY] && count++ < 25) {\n                    component[DIRTY] = false;\n                    if (renderHook)\n                        renderHook(vnode);\n                    rendered = component.render(props, component.state, cctx);\n                }\n                component[DIRTY] = true;\n            }\n            if (component.getChildContext != null) {\n                context = assign({}, context, component.getChildContext());\n            }\n        }\n        // When a component returns a Fragment node we flatten it in core, so we\n        // need to mirror that logic here too\n        let isTopLevelFragment = rendered != null && rendered.type === Fragment\n            && rendered.key == null;\n        rendered = isTopLevelFragment ? rendered.props.children : rendered;\n        // Recurse into children before invoking the after-diff hook\n        _renderToString(rendered, context, isSvgMode, selectValue, vnode, opcodes);\n        if (afterDiff)\n            afterDiff(vnode);\n        vnode[PARENT] = undefined;\n        if (ummountHook)\n            ummountHook(vnode);\n        return;\n    }\n    let children;\n    opcodes.push(__OpBegin, vnode);\n    for (let name in props) {\n        let v = props[name];\n        switch (name) {\n            case 'children':\n                children = v;\n                continue;\n            // VDOM-specific props\n            /* c8 ignore next 5 */\n            case 'key':\n            case 'ref':\n            case '__self':\n            case '__source':\n                continue;\n            default: { }\n        }\n        // write this attribute to the buffer\n        if (v != null && v !== false && typeof v !== 'function') {\n            opcodes.push(__OpAttr, name, v);\n        }\n    }\n    if (typeof children === 'string') {\n        // single text child\n        opcodes.push(__OpText, children);\n    }\n    else if (children != null && children !== false && children !== true) {\n        // recurse into this element VNode's children\n        _renderToString(children, context, false, selectValue, vnode, opcodes);\n    }\n    if (afterDiff)\n        afterDiff(vnode);\n    vnode[PARENT] = undefined;\n    if (ummountHook)\n        ummountHook(vnode);\n    opcodes.push(__OpEnd);\n    return;\n}\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n    return this.constructor(props, context);\n}\nexport default renderToString;\nexport const render = renderToString;\nexport const renderToStaticMarkup = renderToString;\n//# sourceMappingURL=index.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { BackgroundSnapshotInstance } from './backgroundSnapshot.js';\nimport { SnapshotInstance } from './snapshot.js';\nlet __root;\nfunction setRoot(root) {\n    __root = root;\n}\nif (__LEPUS__) {\n    setRoot(new SnapshotInstance('root'));\n}\nelse if (__JS__) {\n    setRoot(new BackgroundSnapshotInstance('root'));\n}\nexport { __root, setRoot };\n//# sourceMappingURL=root.js.map","import { ListUpdateInfoRecording, __pendingListUpdates, snapshotDestroyList } from './list.js';\nimport { unref } from './snapshot/ref.js';\nimport { SnapshotOperation, __globalSnapshotPatch } from './lifecycle/patch/snapshotPatch.js';\nimport { isDirectOrDeepEqual } from './utils.js';\nexport var DynamicPartType;\n(function (DynamicPartType) {\n    DynamicPartType[DynamicPartType[\"Attr\"] = 0] = \"Attr\";\n    DynamicPartType[DynamicPartType[\"Spread\"] = 1] = \"Spread\";\n    DynamicPartType[DynamicPartType[\"Slot\"] = 2] = \"Slot\";\n    // Component,\n    DynamicPartType[DynamicPartType[\"Children\"] = 3] = \"Children\";\n    DynamicPartType[DynamicPartType[\"ListChildren\"] = 4] = \"ListChildren\";\n    // Used by compat layer\n    DynamicPartType[DynamicPartType[\"MultiChildren\"] = 5] = \"MultiChildren\";\n})(DynamicPartType || (DynamicPartType = {}));\nexport let __page;\nexport let __pageId = 0;\nexport function setupPage(page) {\n    __page = page;\n    __pageId = __GetElementUniqueID(page);\n}\nexport const snapshotManager = {\n    values: /* @__PURE__ */ new Map([\n        [\n            'root',\n            {\n                create() {\n                    /* v8 ignore start */\n                    if (__JS__ && !__DEV__) {\n                        return [];\n                    }\n                    /* v8 ignore stop */\n                    return [__page];\n                },\n                update: [],\n                slot: [[DynamicPartType.Children, 0]],\n                isListHolder: false,\n                cssId: 0,\n            },\n        ],\n        [\n            'wrapper',\n            {\n                create() {\n                    /* v8 ignore start */\n                    if (__JS__ && !__DEV__) {\n                        return [];\n                    }\n                    /* v8 ignore stop */\n                    return [__CreateWrapperElement(__pageId)];\n                },\n                update: [],\n                slot: [[DynamicPartType.Children, 0]],\n                isListHolder: false,\n            },\n        ],\n        [\n            null,\n            {\n                create() {\n                    /* v8 ignore start */\n                    if (__JS__ && !__DEV__) {\n                        return [];\n                    }\n                    /* v8 ignore stop */\n                    return [__CreateElement('raw-text', __pageId)];\n                },\n                update: [\n                    ctx => {\n                        /* v8 ignore start */\n                        if (__JS__ && !__DEV__) {\n                            return;\n                        }\n                        /* v8 ignore stop */\n                        if (ctx.__elements) {\n                            __SetAttribute(ctx.__elements[0], 'text', ctx.__values[0]);\n                        }\n                    },\n                ],\n                slot: [],\n                isListHolder: false,\n            },\n        ],\n    ]),\n};\nexport const snapshotInstanceManager = {\n    nextId: 0,\n    values: /* @__PURE__ */ new Map(),\n    clear() {\n        // not resetting `nextId` to prevent id collision\n        this.values.clear();\n    },\n};\nexport const backgroundSnapshotInstanceManager = {\n    nextId: 0,\n    values: /* @__PURE__ */ new Map(),\n    clear() {\n        // not resetting `nextId` to prevent id collision\n        this.values.clear();\n    },\n    updateId(id, newId) {\n        const values = this.values;\n        const si = values.get(id);\n        values.delete(id);\n        values.set(newId, si);\n        si.__id = newId;\n    },\n    getValueBySign(str) {\n        const res = str?.split(':');\n        if (!res || (res.length != 2 && res.length != 3)) {\n            throw new Error('Invalid ctx format: ' + str);\n        }\n        let id = Number(res[0]);\n        const expIndex = Number(res[1]);\n        const ctx = this.values.get(id);\n        if (!ctx) {\n            return null;\n        }\n        const spreadKey = res[2];\n        if (spreadKey) {\n            return ctx.__values[expIndex][spreadKey];\n        }\n        else {\n            return ctx.__values[expIndex];\n        }\n    },\n};\nexport function createSnapshot(uniqID, create, update, slot, cssId, entryName) {\n    if (__DEV__ && __JS__\n        // `__globalSnapshotPatch` does not exist before hydration,\n        // so the snapshot of the first screen will not be sent to the main thread.\n        && __globalSnapshotPatch\n        && !snapshotManager.values.has(uniqID)\n        // `create` may be `null` when loading a lazy bundle after hydration.\n        && create !== null) {\n        // We only update the lepus snapshot if the `uniqID` is different.\n        // This means that `uniqID` is considered the \"hash\" of the snapshot.\n        // When HMR (Hot Module Replacement) or fast refresh updates occur, `createSnapshot` will be re-executed with the new snapshot definition.\n        __globalSnapshotPatch.push(SnapshotOperation.DEV_ONLY_AddSnapshot, uniqID, \n        // We use `Function.prototype.toString` to serialize the `create` and `update` functions for Lepus.\n        // This allows the updates to be applied to Lepus.\n        // As a result, both the static part (`create`) and the dynamic parts (`update` and `slot`) can be updated.\n        create.toString(), update?.map(f => f.toString()) ?? [], slot, cssId, entryName);\n    }\n    if (entryName) {\n        uniqID = `${entryName}:${uniqID}`;\n    }\n    const s = { create, update, slot, cssId, entryName };\n    snapshotManager.values.set(uniqID, s);\n    if (slot && slot[0] && slot[0][0] === DynamicPartType.ListChildren) {\n        s.isListHolder = true;\n    }\n    return uniqID;\n}\nexport function traverseSnapshotInstance(si, callback) {\n    const c = si.childNodes;\n    callback(si);\n    for (const vv of c) {\n        traverseSnapshotInstance(vv, callback);\n    }\n}\nconst DEFAULT_ENTRY_NAME = '__Card__';\nconst DEFAULT_CSS_ID = 0;\nexport class SnapshotInstance {\n    type;\n    __id;\n    __snapshot_def;\n    __elements;\n    __element_root;\n    __values;\n    __current_slot_index = 0;\n    __ref_set;\n    __worklet_ref_set;\n    __listItemPlatformInfo;\n    constructor(type, id) {\n        this.type = type;\n        this.__snapshot_def = snapshotManager.values.get(type);\n        id ||= snapshotInstanceManager.nextId -= 1;\n        this.__id = id;\n        snapshotInstanceManager.values.set(id, this);\n    }\n    ensureElements() {\n        const { create, slot, isListHolder, cssId, entryName } = this.__snapshot_def;\n        const elements = create(this);\n        this.__elements = elements;\n        this.__element_root = elements[0];\n        if (cssId === undefined) {\n            // This means either:\n            //   CSS Scope is removed(We only need to call `__SetCSSId` when there is `entryName`)\n            //   Or an old bundle(`__SetCSSId` is called in `create`), we skip calling `__SetCSSId`\n            if (entryName !== DEFAULT_ENTRY_NAME && entryName !== undefined) {\n                __SetCSSId(this.__elements, DEFAULT_CSS_ID, entryName);\n            }\n        }\n        else {\n            // cssId !== undefined\n            if (entryName !== DEFAULT_ENTRY_NAME && entryName !== undefined) {\n                // For lazy bundle, we need add `entryName` to the third params\n                __SetCSSId(this.__elements, cssId, entryName);\n            }\n            else {\n                __SetCSSId(this.__elements, cssId);\n            }\n        }\n        const values = this.__values;\n        if (values) {\n            this.__values = undefined;\n            this.setAttribute('values', values);\n        }\n        if (isListHolder) {\n            // never recurse into list's children\n        }\n        else {\n            let index = 0;\n            let child = this.__firstChild;\n            while (child) {\n                child.ensureElements();\n                const [type, elementIndex] = slot[index];\n                switch (type) {\n                    case DynamicPartType.Slot: {\n                        __ReplaceElement(child.__element_root, elements[elementIndex]);\n                        elements[elementIndex] = child.__element_root;\n                        index++;\n                        break;\n                    }\n                    /* v8 ignore start */\n                    case DynamicPartType.MultiChildren: {\n                        if (__GetTag(elements[elementIndex]) === 'wrapper') {\n                            __ReplaceElement(child.__element_root, elements[elementIndex]);\n                        }\n                        else {\n                            __AppendElement(elements[elementIndex], child.__element_root);\n                        }\n                        index++;\n                        break;\n                    }\n                    /* v8 ignore end */\n                    case DynamicPartType.Children:\n                    case DynamicPartType.ListChildren: {\n                        __AppendElement(elements[elementIndex], child.__element_root);\n                        break;\n                    }\n                }\n                child = child.__nextSibling;\n            }\n        }\n    }\n    unRenderElements() {\n        const { isListHolder } = this.__snapshot_def;\n        this.__elements = undefined;\n        this.__element_root = undefined;\n        if (isListHolder) {\n            // never recurse into list's children\n        }\n        else {\n            let child = this.__firstChild;\n            while (child) {\n                child.unRenderElements();\n                child = child.__nextSibling;\n            }\n        }\n    }\n    takeElements() {\n        const a = Object.create(SnapshotInstance.prototype);\n        a.__id = this.__id;\n        a.__snapshot_def = this.__snapshot_def;\n        a.__values = this.__values;\n        // all clear\n        a.__parent = null;\n        a.__firstChild = null;\n        a.__lastChild = null;\n        a.__nextSibling = null;\n        a.__previousSibling = null;\n        this.childNodes.map(c => c.takeElements()).forEach(node => a.__insertBefore(node));\n        a.__elements = this.__elements;\n        a.__element_root = this.__element_root;\n        this.__elements = undefined;\n        this.__element_root = undefined;\n        return a;\n    }\n    // onCreate?: () => void;\n    // onAttach?: () => void;\n    // onDetach?: () => void;\n    // onRef?: () => void;\n    // onUnref?: () => void;\n    __parent = null;\n    __firstChild = null;\n    __lastChild = null;\n    __previousSibling = null;\n    __nextSibling = null;\n    get parentNode() {\n        return this.__parent;\n    }\n    get nextSibling() {\n        return this.__nextSibling;\n    }\n    // get isConnected() {\n    //   return !!this.__parent;\n    // }\n    contains(child) {\n        return child.parentNode === this;\n    }\n    get childNodes() {\n        const nodes = [];\n        let node = this.__firstChild;\n        while (node) {\n            nodes.push(node);\n            node = node.__nextSibling;\n        }\n        return nodes;\n    }\n    __insertBefore(node, beforeNode) {\n        // If the node already has a parent, remove it from its current parent\n        if (node.__parent) {\n            node.__parent.__removeChild(node);\n        }\n        // If beforeNode is not provided, add the new node as the last child\n        if (beforeNode) {\n            // If beforeNode is provided, insert the new node before beforeNode\n            if (beforeNode.__previousSibling) {\n                beforeNode.__previousSibling.__nextSibling = node;\n                node.__previousSibling = beforeNode.__previousSibling;\n            }\n            else {\n                this.__firstChild = node;\n                node.__previousSibling = null;\n            }\n            beforeNode.__previousSibling = node;\n            node.__nextSibling = beforeNode;\n            node.__parent = this;\n        }\n        else {\n            if (this.__lastChild) {\n                this.__lastChild.__nextSibling = node;\n                node.__previousSibling = this.__lastChild;\n            }\n            else {\n                this.__firstChild = node;\n                node.__previousSibling = null;\n            }\n            this.__lastChild = node;\n            node.__parent = this;\n            node.__nextSibling = null;\n        }\n    }\n    __removeChild(node) {\n        if (node.__parent !== this) {\n            throw new Error('The node to be removed is not a child of this node.');\n        }\n        if (node.__previousSibling) {\n            node.__previousSibling.__nextSibling = node.__nextSibling;\n        }\n        else {\n            this.__firstChild = node.__nextSibling;\n        }\n        if (node.__nextSibling) {\n            node.__nextSibling.__previousSibling = node.__previousSibling;\n        }\n        else {\n            this.__lastChild = node.__previousSibling;\n        }\n        node.__parent = null;\n        node.__previousSibling = null;\n        node.__nextSibling = null;\n    }\n    insertBefore(newNode, existingNode) {\n        const __snapshot_def = this.__snapshot_def;\n        if (__snapshot_def.isListHolder) {\n            (__pendingListUpdates.values[this.__id] ??= new ListUpdateInfoRecording(this)).onInsertBefore(newNode, existingNode);\n            this.__insertBefore(newNode, existingNode);\n            return;\n        }\n        const shouldRemove = newNode.__parent === this;\n        this.__insertBefore(newNode, existingNode);\n        const __elements = this.__elements;\n        if (__elements) {\n            if (!newNode.__elements) {\n                newNode.ensureElements();\n            }\n        }\n        else {\n            return;\n        }\n        const count = __snapshot_def.slot.length;\n        if (count === 1) {\n            const [, elementIndex] = __snapshot_def.slot[0];\n            const parent = __elements[elementIndex];\n            if (shouldRemove) {\n                __RemoveElement(parent, newNode.__element_root);\n            }\n            if (existingNode) {\n                __InsertElementBefore(parent, newNode.__element_root, existingNode.__element_root);\n            }\n            else {\n                __AppendElement(parent, newNode.__element_root);\n            }\n        }\n        else if (count > 1) {\n            const index = this.__current_slot_index++;\n            const [s, elementIndex] = __snapshot_def.slot[index];\n            if (s === DynamicPartType.Slot) {\n                __ReplaceElement(newNode.__element_root, __elements[elementIndex]);\n                __elements[elementIndex] = newNode.__element_root;\n                /* v8 ignore start */\n            }\n            else if (s === DynamicPartType.MultiChildren) {\n                if (__GetTag(__elements[elementIndex]) === 'wrapper') {\n                    __ReplaceElement(newNode.__element_root, __elements[elementIndex]);\n                }\n                else {\n                    __AppendElement(__elements[elementIndex], newNode.__element_root);\n                }\n            }\n            /* v8 ignore end */\n        }\n    }\n    removeChild(child) {\n        const r = () => {\n            this.__removeChild(child);\n            traverseSnapshotInstance(child, v => {\n                v.__parent = null;\n                snapshotInstanceManager.values.delete(v.__id);\n            });\n        };\n        const __snapshot_def = this.__snapshot_def;\n        if (__snapshot_def.isListHolder) {\n            (__pendingListUpdates.values[this.__id] ??= new ListUpdateInfoRecording(this)).onRemoveChild(child);\n            r();\n            return;\n        }\n        // TODO: ref: can this be done on the background thread?\n        unref(child, true);\n        r();\n        if (this.__elements) {\n            const [, elementIndex] = __snapshot_def.slot[0];\n            __RemoveElement(this.__elements[elementIndex], child.__element_root);\n        }\n        if (child.__snapshot_def.isListHolder) {\n            snapshotDestroyList(child);\n        }\n    }\n    setAttribute(key, value) {\n        const helper = (index, oldValue, newValue) => {\n            if (isDirectOrDeepEqual(oldValue, newValue)) { }\n            else {\n                this.__snapshot_def.update[index](this, index, oldValue);\n            }\n        };\n        if (key === 'values') {\n            const oldValues = this.__values;\n            this.__values = value;\n            if (oldValues) {\n                for (let index = 0; index < value.length; index++) {\n                    helper(index, oldValues[index], value[index]);\n                }\n            }\n            else {\n                for (let index = 0; index < value.length; index++) {\n                    helper(index, undefined, value[index]);\n                }\n            }\n            return;\n        }\n        const index = typeof key === 'string' ? Number(key.slice(2)) : key;\n        this.__values ??= [];\n        helper(index, this.__values[index], this.__values[index] = value);\n    }\n    toJSON() {\n        return {\n            id: this.__id,\n            type: this.type,\n            values: this.__values,\n            children: this.__firstChild ? this.childNodes : undefined,\n        };\n    }\n}\n//# sourceMappingURL=snapshot.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { SnapshotInstance } from '../snapshot.js';\nfunction updateEvent(snapshot, expIndex, _oldValue, elementIndex, eventType, eventName, spreadKey) {\n    const value = snapshot.__values[expIndex];\n    let event;\n    if (!value) {\n        event = undefined;\n    }\n    else if (typeof value === 'string') {\n        event = value;\n    }\n    else {\n        event = `${snapshot.__id}:${expIndex}:${spreadKey}`;\n    }\n    // todo: reuseId?\n    snapshot.__values[expIndex] = event;\n    if (snapshot.__elements) {\n        __AddEvent(snapshot.__elements[elementIndex], eventType, eventName, event);\n    }\n}\nexport { updateEvent };\n//# sourceMappingURL=event.js.map","import { SnapshotInstance } from '../snapshot.js';\nimport { processGesture } from '../gesture/processGesture.js';\nexport function updateGesture(snapshot, expIndex, _oldValue, elementIndex, workletType) {\n    if (!snapshot.__elements) {\n        return;\n    }\n    if (__PROFILE__) {\n        console.profile('updateGesture');\n    }\n    const value = snapshot.__values[expIndex];\n    if (workletType === 'main-thread') {\n        processGesture(snapshot.__elements[elementIndex], value);\n    }\n    if (__PROFILE__) {\n        console.profileEnd();\n    }\n}\n//# sourceMappingURL=gesture.js.map","import { __pendingListUpdates, ListUpdateInfoRecording } from '../list.js';\nimport { SnapshotInstance } from '../snapshot.js';\nconst platformInfoVirtualAttributes = /* @__PURE__ */ new Set(['reuse-identifier']);\nconst platformInfoAttributes = /* @__PURE__ */ new Set([\n    'reuse-identifier',\n    'full-span',\n    'item-key',\n    'sticky-top',\n    'sticky-bottom',\n    'estimated-height',\n    'estimated-height-px',\n    'estimated-main-axis-size-px',\n]);\nfunction updateListItemPlatformInfo(ctx, index, oldValue, elementIndex) {\n    const newValue = ctx.__listItemPlatformInfo = ctx.__values[index];\n    // @ts-ignore\n    const list = ctx.__parent;\n    if (list?.__snapshot_def.isListHolder) {\n        (__pendingListUpdates.values[list.__id] ??= new ListUpdateInfoRecording(list)).onSetAttribute(ctx, newValue, oldValue);\n    }\n    // In this updater, unlike `updateSpread`, the shape of the value is guaranteed to be an fixed object.\n    // No adding / removing keys.\n    if (ctx.__elements) {\n        const e = ctx.__elements[elementIndex];\n        const value = ctx.__values[index];\n        for (const k in value) {\n            if (platformInfoVirtualAttributes.has(k)) {\n                continue;\n            }\n            __SetAttribute(e, k, value[k]);\n        }\n    }\n}\nexport { updateListItemPlatformInfo, platformInfoAttributes };\n//# sourceMappingURL=platformInfo.js.map","import { nextCommitTaskId } from '../lifecycle/patch/commit.js';\nimport { SnapshotInstance, backgroundSnapshotInstanceManager } from '../snapshot.js';\nimport { workletUnRef } from './workletRef.js';\nlet globalRefPatch = {};\nconst globalRefsToRemove = /* @__PURE__ */ new Map();\nconst globalRefsToSet = /* @__PURE__ */ new Map();\nlet nextRefId = 1;\nfunction unref(snapshot, recursive) {\n    snapshot.__ref_set?.forEach(v => {\n        globalRefPatch[v] = null;\n    });\n    snapshot.__ref_set?.clear();\n    snapshot.__worklet_ref_set?.forEach(v => {\n        if (v) {\n            workletUnRef(v);\n        }\n    });\n    snapshot.__worklet_ref_set?.clear();\n    if (recursive) {\n        snapshot.childNodes.forEach(it => {\n            unref(it, recursive);\n        });\n    }\n}\nfunction applyRef(ref, value) {\n    // TODO: ref: exceptions thrown in user functions should be able to be caught by an Error Boundary\n    if (typeof ref == 'function') {\n        const hasRefUnmount = typeof ref._unmount == 'function';\n        if (hasRefUnmount) {\n            // @ts-ignore TS doesn't like moving narrowing checks into variables\n            ref._unmount();\n        }\n        if (!hasRefUnmount || value != null) {\n            // Store the cleanup function on the function\n            // instance object itself to avoid shape\n            // transitioning vnode\n            ref._unmount = ref(value);\n        }\n    }\n    else\n        ref.current = value;\n}\nfunction updateBackgroundRefs(commitId) {\n    const oldRefMap = globalRefsToRemove.get(commitId);\n    if (oldRefMap) {\n        globalRefsToRemove.delete(commitId);\n        for (const ref of oldRefMap.values()) {\n            applyRef(ref, null);\n        }\n    }\n    const newRefMap = globalRefsToSet.get(commitId);\n    if (newRefMap) {\n        globalRefsToSet.delete(commitId);\n        for (const sign in newRefMap) {\n            const ref = backgroundSnapshotInstanceManager.getValueBySign(sign);\n            if (ref) {\n                // TODO: ref: support __REF_FIRE_IMMEDIATELY__\n                const v = newRefMap[sign] && lynx.createSelectorQuery().selectUniqueID(newRefMap[sign]);\n                applyRef(ref, v);\n            }\n        }\n    }\n}\nfunction updateRef(snapshot, expIndex, oldValue, elementIndex, spreadKey) {\n    const value = snapshot.__values[expIndex];\n    let ref;\n    if (!value) {\n        ref = undefined;\n    }\n    else if (typeof value === 'string') {\n        ref = value;\n    }\n    else {\n        ref = `${snapshot.__id}:${expIndex}:${spreadKey}`;\n    }\n    snapshot.__values[expIndex] = ref;\n    if (snapshot.__elements && ref) {\n        __SetAttribute(snapshot.__elements[elementIndex], 'has-react-ref', true);\n        const uid = __GetElementUniqueID(snapshot.__elements[elementIndex]);\n        globalRefPatch[ref] = uid;\n        snapshot.__ref_set ??= new Set();\n        snapshot.__ref_set.add(ref);\n    }\n    if (oldValue !== ref) {\n        snapshot.__ref_set?.delete(oldValue);\n    }\n}\nfunction takeGlobalRefPatchMap() {\n    const patch = globalRefPatch;\n    globalRefPatch = {};\n    return patch;\n}\nfunction transformRef(ref) {\n    if (ref === undefined || ref === null) {\n        return ref;\n    }\n    if (typeof ref === 'function' || (typeof ref === 'object' && 'current' in ref)) {\n        if ('__ref' in ref) {\n            return ref;\n        }\n        return Object.defineProperty(ref, '__ref', { value: nextRefId++ });\n    }\n    throw new Error(`Elements' \"ref\" property should be a function, or an object created `\n        + `by createRef(), but got [${typeof ref}] instead`);\n}\nfunction markRefToRemove(sign, ref) {\n    if (!ref) {\n        return;\n    }\n    let oldRefs = globalRefsToRemove.get(nextCommitTaskId);\n    if (!oldRefs) {\n        oldRefs = new Map();\n        globalRefsToRemove.set(nextCommitTaskId, oldRefs);\n    }\n    oldRefs.set(sign, ref);\n}\nexport { updateRef, takeGlobalRefPatchMap, updateBackgroundRefs, unref, transformRef, globalRefsToRemove, globalRefsToSet, markRefToRemove, };\n//# sourceMappingURL=ref.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { SnapshotInstance } from '../snapshot.js';\nimport { updateEvent } from './event.js';\nimport { BackgroundSnapshotInstance } from '../backgroundSnapshot.js';\nimport { transformRef, updateRef } from './ref.js';\nimport { updateWorkletEvent } from './workletEvent.js';\nimport { updateWorkletRef } from './workletRef.js';\nimport { updateGesture } from './gesture.js';\nimport { platformInfoAttributes, updateListItemPlatformInfo } from './platformInfo.js';\nimport { isDirectOrDeepEqual, isEmptyObject, pick } from '../utils.js';\nimport { __pendingListUpdates, ListUpdateInfoRecording } from '../list.js';\nconst eventRegExp = /^(([A-Za-z-]*):)?(bind|catch|capture-bind|capture-catch|global-bind)([A-Za-z]+)$/;\nconst eventTypeMap = {\n    bind: 'bindEvent',\n    catch: 'catchEvent',\n    'capture-bind': 'capture-bind',\n    'capture-catch': 'capture-catch',\n    'global-bind': 'global-bindEvent',\n};\nconst noFlattenAttributes = /* @__PURE__ */ new Set([\n    'name',\n    'clip-radius',\n    'overlap',\n    'exposure-scene',\n    'exposure-id',\n]);\nfunction updateSpread(snapshot, index, oldValue, elementIndex) {\n    oldValue ||= {};\n    let newValue = snapshot.__values[index]; // compiler guarantee this must be an object;\n    // @ts-ignore\n    const list = snapshot.__parent;\n    if (list?.__snapshot_def.isListHolder) {\n        const oldPlatformInfo = pick(oldValue, platformInfoAttributes);\n        const platformInfo = pick(newValue, platformInfoAttributes);\n        if (!isDirectOrDeepEqual(oldPlatformInfo, platformInfo)) {\n            (__pendingListUpdates.values[list.__id] ??= new ListUpdateInfoRecording(list)).onSetAttribute(snapshot, platformInfo, oldPlatformInfo);\n            snapshot.__listItemPlatformInfo = platformInfo;\n            // The fakeSnapshot is missing `__parent`, so no `ListUpdateInfoRecording#onSetAttribute` will be called\n            const fakeSnapshot = {\n                __values: {\n                    get [index]() {\n                        return platformInfo;\n                    },\n                },\n                __id: snapshot.__id,\n                __elements: snapshot.__elements,\n            };\n            updateListItemPlatformInfo(fakeSnapshot, index, oldPlatformInfo, elementIndex);\n        }\n    }\n    if (!snapshot.__elements) {\n        return;\n    }\n    if ('__spread' in newValue) {\n        // first screen\n        newValue = transformSpread(snapshot, index, newValue);\n        snapshot.__values[index] = newValue;\n    }\n    const dataset = {};\n    let match = null;\n    for (const key in newValue) {\n        const v = newValue[key];\n        if (v !== oldValue[key]) {\n            if (key === 'className') {\n                __SetClasses(snapshot.__elements[elementIndex], v);\n            }\n            else if (key === 'style') {\n                __SetInlineStyles(snapshot.__elements[elementIndex], v);\n            }\n            else if (key === 'id') {\n                __SetID(snapshot.__elements[elementIndex], v);\n            }\n            else if (key.startsWith('data-')) {\n                // collected below\n            }\n            else if (key === 'ref') {\n                snapshot.__ref_set ??= new Set();\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return v;\n                        },\n                        set [index](value) {\n                            // Modifications to the ref value should be reflected in the corresponding position of the spread.\n                            newValue[key] = value;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                    __ref_set: snapshot.__ref_set,\n                };\n                updateRef(fakeSnapshot, index, oldValue[key], elementIndex, key);\n            }\n            else if (key.endsWith(':ref')) {\n                snapshot.__worklet_ref_set ??= new Set();\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return v;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                    __worklet_ref_set: snapshot.__worklet_ref_set,\n                };\n                updateWorkletRef(fakeSnapshot, index, oldValue[key], elementIndex, key.slice(0, -4));\n            }\n            else if (key.endsWith(':gesture')) {\n                const workletType = key.slice(0, -8);\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return v;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                };\n                updateGesture(fakeSnapshot, index, oldValue[key], elementIndex, workletType);\n            }\n            else if ((match = key.match(eventRegExp))) {\n                const workletType = match[2];\n                const eventType = eventTypeMap[match[3]];\n                const eventName = match[4];\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return v;\n                        },\n                        set [index](value) {\n                            // Modifications to the event value should be reflected in the corresponding position of the spread.\n                            newValue[key] = value;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                };\n                if (workletType) {\n                    updateWorkletEvent(fakeSnapshot, index, oldValue[key], elementIndex, workletType, eventType, eventName);\n                }\n                else {\n                    updateEvent(fakeSnapshot, index, oldValue[key], elementIndex, eventType, eventName, key);\n                }\n            }\n            else if (platformInfoAttributes.has(key)) {\n                // ignore\n            }\n            else {\n                __SetAttribute(snapshot.__elements[elementIndex], key, v);\n            }\n        }\n        // collect data regardless of whether it has changed\n        if (key.startsWith('data-')) {\n            dataset[key.slice(5)] = v;\n        }\n    }\n    let hasOldDataset = false;\n    for (const key in oldValue) {\n        if (!(key in newValue)) {\n            if (key === 'className') {\n                __SetClasses(snapshot.__elements[elementIndex], '');\n            }\n            else if (key === 'style') {\n                __SetInlineStyles(snapshot.__elements[elementIndex], '');\n            }\n            else if (key === 'id') {\n                __SetID(snapshot.__elements[elementIndex], null);\n            }\n            else if (key.startsWith('data-')) {\n                // collected below\n            }\n            else if (key === 'ref') {\n                snapshot.__ref_set ??= new Set();\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return undefined;\n                        },\n                        set [index](value) {\n                            // Modifications to the ref value should be reflected in the corresponding position of the spread.\n                            newValue[key] = value;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                    __ref_set: snapshot.__ref_set,\n                };\n                updateRef(fakeSnapshot, index, oldValue[key], elementIndex, key);\n            }\n            else if (key.endsWith(':ref')) {\n                snapshot.__worklet_ref_set ??= new Set();\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return undefined;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                    __worklet_ref_set: snapshot.__worklet_ref_set,\n                };\n                updateWorkletRef(fakeSnapshot, index, oldValue[key], elementIndex, key.slice(0, -4));\n            }\n            else if (key.endsWith(':gesture')) {\n                const workletType = key.slice(0, -8);\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return undefined;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                };\n                updateGesture(fakeSnapshot, index, oldValue[key], elementIndex, workletType);\n            }\n            else if ((match = key.match(eventRegExp))) {\n                const workletType = match[2];\n                const eventType = eventTypeMap[match[3]];\n                const eventName = match[4];\n                const fakeSnapshot = {\n                    __values: {\n                        get [index]() {\n                            return undefined;\n                        },\n                        set [index](value) {\n                            newValue[key] = value;\n                        },\n                    },\n                    __id: snapshot.__id,\n                    __elements: snapshot.__elements,\n                };\n                if (workletType) {\n                    updateWorkletEvent(fakeSnapshot, index, oldValue[key], elementIndex, workletType, eventType, eventName);\n                }\n                else {\n                    updateEvent(fakeSnapshot, index, oldValue[key], elementIndex, eventType, eventName, key);\n                }\n            }\n            else if (platformInfoAttributes.has(key)) {\n                // ignore\n            }\n            else {\n                __SetAttribute(snapshot.__elements[elementIndex], key, null);\n            }\n        }\n        // collect data regardless of whether it has changed\n        if (key.startsWith('data-')) {\n            hasOldDataset = true;\n        }\n    }\n    // TODO: compare dataset before commit it to native?\n    if (hasOldDataset || !isEmptyObject(dataset)) {\n        __SetDataset(snapshot.__elements[elementIndex], dataset);\n    }\n}\nfunction transformSpread(snapshot, index, spread) {\n    const result = {};\n    let hasNoFlattenAttributes = false;\n    for (const key in spread) {\n        let value = spread[key];\n        if (key === '__spread') { }\n        else if (key === 'class' || key === 'className') {\n            value ??= '';\n            result['className'] = value;\n        }\n        else if (key === 'ref') {\n            // @ts-ignore\n            result[key] = transformRef(value)?.__ref;\n        }\n        else if (typeof value === 'function') {\n            result[key] = `${snapshot.__id}:${index}:${key}`;\n        }\n        else {\n            if (!hasNoFlattenAttributes && noFlattenAttributes.has(key)) {\n                hasNoFlattenAttributes = true;\n            }\n            result[key] = value;\n        }\n    }\n    if (hasNoFlattenAttributes) {\n        result['flatten'] = false;\n    }\n    return result;\n}\nexport { updateSpread, transformSpread };\n//# sourceMappingURL=spread.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { onWorkletCtxUpdate } from '@lynx-js/react/worklet-runtime/bindings';\nimport { SnapshotInstance } from '../snapshot.js';\nfunction updateWorkletEvent(snapshot, expIndex, _oldValue, elementIndex, workletType, eventType, eventName) {\n    if (!snapshot.__elements) {\n        return;\n    }\n    const value = snapshot.__values[expIndex] || {};\n    value._workletType = workletType;\n    if (workletType === 'main-thread') {\n        onWorkletCtxUpdate(value, snapshot.__elements[elementIndex]);\n        const event = {\n            type: 'worklet',\n            value,\n        };\n        __AddEvent(snapshot.__elements[elementIndex], eventType, eventName, event);\n    }\n}\nexport { updateWorkletEvent };\n//# sourceMappingURL=workletEvent.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { runWorkletCtx, updateWorkletRef as update, } from '@lynx-js/react/worklet-runtime/bindings';\nimport { SnapshotInstance } from '../snapshot.js';\nfunction workletUnRef(value) {\n    if ('_wvid' in value) {\n        update(value, null);\n    }\n    else if ('_wkltId' in value) {\n        if (typeof value._unmount == 'function') {\n            value._unmount();\n        }\n        else {\n            runWorkletCtx(value, [null]);\n        }\n    }\n}\nfunction updateWorkletRef(snapshot, expIndex, oldValue, elementIndex, _workletType) {\n    if (!snapshot.__elements) {\n        return;\n    }\n    if (oldValue && snapshot.__worklet_ref_set?.has(oldValue)) {\n        workletUnRef(oldValue);\n        snapshot.__worklet_ref_set?.delete(oldValue);\n    }\n    const value = snapshot.__values[expIndex];\n    if (value === null || value === undefined) {\n        // do nothing\n    }\n    else if (value._wvid) {\n        update(value, snapshot.__elements[elementIndex]);\n    }\n    else if (value._wkltId) {\n        // @ts-ignore\n        value._unmount = runWorkletCtx(value, [{ elementRefptr: snapshot.__elements[elementIndex] }]);\n    }\n    else if (value._type === '__LEPUS__' || value._lepusWorkletHash) {\n        // During the initial render, we will not update the WorkletRef because the background thread is not ready yet.\n    }\n    else {\n        throw new Error('MainThreadRef: main-thread:ref must be of type MainThreadRef or main-thread function.');\n    }\n    if (value) {\n        snapshot.__worklet_ref_set ??= new Set();\n        snapshot.__worklet_ref_set.add(value);\n    }\n    // Add an arbitrary attribute to avoid this element being layout-only\n    __SetAttribute(snapshot.__elements[elementIndex], 'has-react-ref', true);\n}\nexport { updateWorkletRef, workletUnRef };\n//# sourceMappingURL=workletRef.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport function isDirectOrDeepEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (typeof a == 'object' && a !== null && typeof b == 'object' && b !== null && JSON.stringify(a) === JSON.stringify(b)) {\n        return true;\n    }\n    return false;\n}\nexport function isEmptyObject(obj) {\n    for (var _ in obj)\n        return false;\n    return true;\n}\nexport function isSdkVersionGt(major, minor) {\n    const lynxSdkVersion = SystemInfo.lynxSdkVersion || '1.0';\n    const version = lynxSdkVersion.split('.');\n    return Number(version[0]) > major || (Number(version[0]) == major && Number(version[1]) > minor);\n}\nexport function pick(obj, keys) {\n    const result = {};\n    for (const key of keys) {\n        if (key in obj) {\n            result[key] = obj[key];\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=utils.js.map","import { isMtsEnabled, isRunOnBackgroundEnabled } from './functionality.js';\nimport { registerWorkletCtx } from './runOnBackground.js';\n/**\n * @internal\n */\nexport function onPostWorkletCtx(afterValue) {\n    if (!isMtsEnabled() && afterValue) {\n        lynx.reportError(new Error('Main thread script requires Lynx sdk version 2.14'));\n        return null;\n    }\n    if (!afterValue || !isRunOnBackgroundEnabled()) {\n        return afterValue;\n    }\n    registerWorkletCtx(afterValue);\n    return afterValue;\n}\n//# sourceMappingURL=ctx.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { takeWorkletRefInitValuePatch } from './workletRefPool.js';\nexport const destroyTasks = [];\nexport function destroyWorklet() {\n    takeWorkletRefInitValuePatch();\n    for (const task of destroyTasks) {\n        task();\n    }\n    destroyTasks.length = 0;\n}\n//# sourceMappingURL=destroy.js.map","import { IndexMap } from './indexMap.js';\n/**\n * `WorkletExecIdMap` ensures the worklet object is not released in js context when the main thread is still holding the\n * worklet object (or any of its jsFnHandles). The worklet object holds the js functions which might be called by `runOnBackground()`.\n * If the worklet object is incorrectly released earlier, the `runOnBackground()` would result in failure.\n *\n * Every time a worklet object is sent to the main thread, an `execId` is distributed and will be sent to element\n * context with the worklet object. This relationship is recorded in this class. When all the references to the\n * worklet object are released in the main thread, a message will be sent back to remove the record here.\n *\n * @internal\n */\nexport class WorkletExecIdMap extends IndexMap {\n    add(worklet) {\n        const execId = super.add(worklet);\n        worklet._execId = execId;\n        return execId;\n    }\n    findJsFnHandle(execId, fnId) {\n        const worklet = this.get(execId);\n        if (!worklet) {\n            return undefined;\n        }\n        const f = (obj) => {\n            if (obj === null || typeof obj !== 'object') {\n                return undefined;\n            }\n            if ('_jsFnId' in obj && obj._jsFnId === fnId) {\n                return obj;\n            }\n            for (const i in obj) {\n                const result = f(obj[i]);\n                if (result) {\n                    return result;\n                }\n            }\n            return undefined;\n        };\n        return f(worklet);\n    }\n}\n//# sourceMappingURL=execMap.js.map","// Copyright 2025 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { WorkletEvents } from '@lynx-js/react/worklet-runtime/bindings';\nimport { destroyTasks } from './destroy.js';\nimport { IndexMap } from './indexMap.js';\nlet resolveMap;\nfunction initReturnValueListener() {\n    const context = __JS__ ? lynx.getCoreContext() : lynx.getJSContext();\n    resolveMap = new IndexMap();\n    context.addEventListener(WorkletEvents.FunctionCallRet, onFunctionCallRet);\n    destroyTasks.push(() => {\n        context.removeEventListener(WorkletEvents.FunctionCallRet, onFunctionCallRet);\n        resolveMap = undefined;\n    });\n}\n/**\n * @internal\n */\nfunction onFunctionCall(resolve) {\n    if (!resolveMap) {\n        initReturnValueListener();\n    }\n    return resolveMap.add(resolve);\n}\nfunction onFunctionCallRet(event) {\n    const data = JSON.parse(event.data);\n    const resolve = resolveMap.get(data.resolveId);\n    resolveMap.remove(data.resolveId);\n    resolve(data.returnValue);\n}\nexport { onFunctionCall };\n//# sourceMappingURL=functionCall.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { isSdkVersionGt } from '../utils.js';\nlet mtsEnabled;\nlet runOnBackgroundEnabled;\n/**\n * @internal\n */\nfunction isMtsEnabled() {\n    if (mtsEnabled === undefined) {\n        mtsEnabled = isSdkVersionGt(2, 13);\n    }\n    return mtsEnabled;\n}\n/**\n * @internal\n */\nfunction isRunOnBackgroundEnabled() {\n    if (runOnBackgroundEnabled === undefined) {\n        runOnBackgroundEnabled = isSdkVersionGt(2, 15);\n    }\n    return runOnBackgroundEnabled;\n}\nfunction clearConfigCacheForTesting() {\n    mtsEnabled = undefined;\n    runOnBackgroundEnabled = undefined;\n}\nexport { isMtsEnabled, isRunOnBackgroundEnabled, clearConfigCacheForTesting };\n//# sourceMappingURL=functionality.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { SnapshotOperation, __globalSnapshotPatch } from '../lifecycle/patch/snapshotPatch.js';\nconst workletHashSet = /* @__PURE__ */ new Set();\n/**\n * @internal\n */\nfunction registerWorkletOnBackground(_type, hash, fn) {\n    if (workletHashSet.has(hash)) {\n        return;\n    }\n    workletHashSet.add(hash);\n    if (__globalSnapshotPatch) {\n        __globalSnapshotPatch.push(SnapshotOperation.DEV_ONLY_RegisterWorklet, hash, \n        // We use `Function.prototype.toString` to serialize the function for Lepus.\n        fn.toString());\n    }\n}\nexport { registerWorkletOnBackground };\n//# sourceMappingURL=hmr.js.map","class IndexMap {\n    lastIndex = 0;\n    indexMap = new Map();\n    add(value) {\n        const index = ++this.lastIndex;\n        this.indexMap.set(index, value);\n        return index;\n    }\n    get(index) {\n        return this.indexMap.get(index);\n    }\n    remove(index) {\n        this.indexMap.delete(index);\n    }\n}\nexport { IndexMap };\n//# sourceMappingURL=indexMap.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { WorkletEvents } from '@lynx-js/react/worklet-runtime/bindings';\nimport { destroyTasks } from './destroy.js';\nimport { WorkletExecIdMap } from './execMap.js';\nimport { isRunOnBackgroundEnabled } from './functionality.js';\nimport { onFunctionCall } from './functionCall.js';\nlet execIdMap;\nfunction init() {\n    'background only';\n    if (execIdMap) {\n        return;\n    }\n    execIdMap = new WorkletExecIdMap();\n    lynx.getCoreContext().addEventListener(WorkletEvents.runOnBackground, runJSFunction);\n    lynx.getCoreContext().addEventListener(WorkletEvents.releaseBackgroundWorkletCtx, releaseBackgroundWorkletCtx);\n    destroyTasks.push(() => {\n        lynx.getCoreContext().removeEventListener(WorkletEvents.runOnBackground, runJSFunction);\n        lynx.getCoreContext().removeEventListener(WorkletEvents.releaseBackgroundWorkletCtx, releaseBackgroundWorkletCtx);\n        execIdMap = undefined;\n    });\n}\n/**\n * @internal\n */\nfunction runJSFunction(event) {\n    'background only';\n    const data = JSON.parse(event.data);\n    const obj = execIdMap.findJsFnHandle(data.obj._execId, data.obj._jsFnId);\n    const f = obj?._fn;\n    if (!f) {\n        throw new Error('runOnBackground: JS function not found: ' + JSON.stringify(data.obj));\n    }\n    const returnValue = f(...data.params);\n    lynx.getCoreContext().dispatchEvent({\n        type: WorkletEvents.FunctionCallRet,\n        data: JSON.stringify({\n            resolveId: data.resolveId,\n            returnValue,\n        }),\n    });\n}\nfunction releaseBackgroundWorkletCtx(event) {\n    'background only';\n    for (const id of event.data) {\n        execIdMap.remove(id);\n    }\n}\n/**\n * @internal\n */\nfunction registerWorkletCtx(ctx) {\n    'background only';\n    init();\n    execIdMap.add(ctx);\n}\n/**\n * `runOnBackground` allows triggering js functions on the background thread asynchronously.\n * @param f - The js function to be called.\n * @returns A function. Calling which with the arguments to be passed to the js function to trigger it on the background thread. This function returns a promise that resolves to the return value of the js function.\n * @example\n * ```ts\n * import { runOnBackground } from '@lynx-js/react';\n *\n * async function someMainthreadFunction() {\n *   'main thread';\n *   const fn = runOnBackground(() => {\n *     return 'hello';\n *   });\n *   const result = await fn();\n}\n * ```\n * @public\n */\nfunction runOnBackground(f) {\n    if (!isRunOnBackgroundEnabled()) {\n        throw new Error('runOnBackground requires Lynx sdk version 2.16.');\n    }\n    if (__JS__) {\n        throw new Error('runOnBackground can only be used on the main thread.');\n    }\n    const obj = f;\n    if (obj._error) {\n        throw new Error(obj._error);\n    }\n    return async (...params) => {\n        return new Promise((resolve) => {\n            const resolveId = onFunctionCall(resolve);\n            lynx.getJSContext().dispatchEvent({\n                type: WorkletEvents.runOnBackground,\n                data: JSON.stringify({\n                    obj: {\n                        _jsFnId: obj._jsFnId,\n                        _execId: obj._execId,\n                    },\n                    params,\n                    resolveId,\n                }),\n            });\n        });\n    };\n}\nexport { registerWorkletCtx, runJSFunction, runOnBackground };\n//# sourceMappingURL=runOnBackground.js.map","import { WorkletEvents } from '@lynx-js/react/worklet-runtime/bindings';\nimport { onPostWorkletCtx } from './ctx.js';\nimport { isMtsEnabled } from './functionality.js';\nimport { onFunctionCall } from './functionCall.js';\n/**\n * `runOnMainThread` allows triggering main thread functions on the main thread asynchronously.\n * @param fn - The main thread functions to be called.\n * @returns A function. Calling which with the arguments to be passed to the main thread function to trigger it on the main thread. This function returns a promise that resolves to the return value of the main thread function.\n * @example\n * ```ts\n * import { runOnMainThread } from '@lynx-js/react';\n *\n * async function someFunction() {\n *   const fn = runOnMainThread(() => {\n *     'main thread';\n *     return 'hello';\n *   });\n *   const result = await fn();\n * }\n * ```\n * @public\n */\nexport function runOnMainThread(fn) {\n    if (__LEPUS__) {\n        throw new Error('runOnMainThread can only be used on the background thread.');\n    }\n    if (!isMtsEnabled()) {\n        throw new Error('runOnMainThread requires Lynx sdk version 2.14.');\n    }\n    return async (...params) => {\n        return new Promise((resolve) => {\n            onPostWorkletCtx(fn);\n            const resolveId = onFunctionCall(resolve);\n            lynx.getCoreContext().dispatchEvent({\n                type: WorkletEvents.runWorkletCtx,\n                data: JSON.stringify({\n                    worklet: fn,\n                    params,\n                    resolveId,\n                }),\n            });\n        });\n    };\n}\n//# sourceMappingURL=runOnMainThread.js.map","let lastId = 0;\n/**\n * transform args of `runOnBackground()`.\n *\n * @internal\n */\nexport function transformToWorklet(obj) {\n    const id = ++lastId;\n    if (typeof obj !== 'function') {\n        // We save the error message in the object, so that we can throw it later when the function is called on the main thread.\n        return {\n            _jsFnId: id,\n            _error: `Argument of runOnBackground should be a function, but got [${typeof obj}] instead`,\n        };\n    }\n    return {\n        _jsFnId: id,\n        _fn: obj,\n    };\n}\n//# sourceMappingURL=transformToWorklet.js.map","import { WorkletEvents } from '@lynx-js/react/worklet-runtime/bindings';\nimport { addWorkletRefInitValue } from './workletRefPool.js';\nimport { useMemo } from '../hooks/react.js';\nlet lastId = 0;\nclass WorkletRef {\n    /**\n     * @internal\n     */\n    _id;\n    /**\n     * @internal\n     */\n    _initValue;\n    /**\n     * @internal\n     */\n    _type;\n    /**\n     * @internal\n     */\n    _lifecycleObserver;\n    /**\n     * @internal\n     */\n    constructor(initValue, type) {\n        if (__JS__) {\n            this._id = ++lastId;\n            this._initValue = initValue;\n            this._type = type;\n            addWorkletRefInitValue(this._id, initValue);\n        }\n        else {\n            // Out of the js thread, the `WorkletRef` class here is just a placeholder and should not be accessed directly.\n            // The real WorkletRef will be generated by the worklet runtime.\n            this._id = -1;\n            this._type = '__LEPUS__';\n        }\n    }\n    get current() {\n        if (__JS__ && __DEV__) {\n            throw new Error('MainThreadRef: value of a MainThreadRef cannot be accessed in the background thread.');\n        }\n        if (__LEPUS__ && __DEV__) {\n            /* v8 ignore next */\n            throw new Error('MainThreadRef: value of a MainThreadRef cannot be accessed outside of main thread script.');\n        }\n        /* v8 ignore next */\n        return undefined;\n    }\n    set current(_) {\n        if (__JS__ && __DEV__) {\n            throw new Error('MainThreadRef: value of a MainThreadRef cannot be accessed in the background thread.');\n        }\n        if (__LEPUS__ && __DEV__) {\n            throw new Error('MainThreadRef: value of a MainThreadRef cannot be accessed outside of main thread script.');\n        }\n    }\n    /**\n     * @internal\n     */\n    toJSON() {\n        return {\n            _wvid: this._id,\n        };\n    }\n}\n/**\n * A `MainThreadRef` is a ref that can only be accessed on the main thread. It is used to preserve\n * states between main thread function calls.\n * The data saved in `current` property of the `MainThreadRef` can be read and written in\n * multiple main thread functions.\n * @public\n */\nexport class MainThreadRef extends WorkletRef {\n    constructor(initValue) {\n        super(initValue, 'main-thread');\n        if (__JS__) {\n            const id = this._id;\n            this._lifecycleObserver = lynx.getNativeApp().createJSObjectDestructionObserver?.(() => {\n                lynx.getCoreContext?.().dispatchEvent({\n                    type: WorkletEvents.releaseWorkletRef,\n                    data: {\n                        id,\n                    },\n                });\n            });\n        }\n    }\n}\nexport function useMainThreadRef(initValue) {\n    return useMemo(() => {\n        return new MainThreadRef(initValue);\n    }, []);\n}\n//# sourceMappingURL=workletRef.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { isMtsEnabled } from './functionality.js';\nlet initValuePatch = [];\nconst initValueIdSet = /*#__PURE__*/ new Set();\n/**\n * @internal\n */\nexport function addWorkletRefInitValue(id, value) {\n    if (!isMtsEnabled()) {\n        return;\n    }\n    initValueIdSet.add(id);\n    initValuePatch.push([id, value]);\n}\n/**\n * @internal\n */\nexport function takeWorkletRefInitValuePatch() {\n    const res = initValuePatch;\n    initValuePatch = [];\n    return res;\n}\n//# sourceMappingURL=workletRefPool.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/**\n * Register a worklet function to the `jsFunctionLifecycleManager`.\n * This function mast be called when a worklet context is updated.\n *\n * @param worklet - The worklet to be updated\n * @param element - The element associated with the worklet\n * @internal\n */\nfunction onWorkletCtxUpdate(worklet, element) {\n    globalThis.lynxWorkletImpl?._jsFunctionLifecycleManager?.addRef(worklet._execId, worklet);\n    globalThis.lynxWorkletImpl?._eventDelayImpl.runDelayedWorklet(worklet, element);\n}\n/**\n * Executes the worklet ctx.\n * @param worklet - The Worklet ctx to run.\n * @param params - An array as parameters of the worklet run.\n */\nfunction runWorkletCtx(worklet, params) {\n    return globalThis.runWorklet?.(worklet, params);\n}\n/**\n * Save an element to a `WorkletRef`.\n *\n * @param workletRef - The `WorkletRef` to be updated.\n * @param element - The element.\n * @internal\n */\nfunction updateWorkletRef(workletRef, element) {\n    globalThis.lynxWorkletImpl?._refImpl.updateWorkletRef(workletRef, element);\n}\n/**\n * Update the initial value of the `WorkletRef`.\n *\n * @param patch - An array containing the index and new value of the worklet value.\n */\nfunction updateWorkletRefInitValueChanges(patch) {\n    if (patch) {\n        globalThis.lynxWorkletImpl?._refImpl.updateWorkletRefInitValueChanges(patch);\n    }\n}\n/**\n * Clear all delayed worklets to run.\n *\n * @internal\n */\nfunction clearDelayedWorklets() {\n    globalThis.lynxWorkletImpl?._eventDelayImpl.clearDelayedWorklets();\n}\n/**\n * Register a worklet.\n *\n * @internal\n */\nfunction registerWorklet(type, id, worklet) {\n    globalThis.registerWorklet(type, id, worklet);\n}\nexport { onWorkletCtxUpdate, runWorkletCtx, updateWorkletRef, updateWorkletRefInitValueChanges, clearDelayedWorklets, registerWorklet, };\n//# sourceMappingURL=bindings.js.map","var WorkletEvents;\n(function (WorkletEvents) {\n    WorkletEvents[\"runWorkletCtx\"] = \"Lynx.Worklet.runWorkletCtx\";\n    WorkletEvents[\"runOnBackground\"] = \"Lynx.Worklet.runOnBackground\";\n    WorkletEvents[\"FunctionCallRet\"] = \"Lynx.Worklet.FunctionCallRet\";\n    WorkletEvents[\"releaseBackgroundWorkletCtx\"] = \"Lynx.Worklet.releaseBackgroundWorkletCtx\";\n    WorkletEvents[\"releaseWorkletRef\"] = \"Lynx.Worklet.releaseWorkletRef\";\n})(WorkletEvents || (WorkletEvents = {}));\nexport { WorkletEvents };\n//# sourceMappingURL=events.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport { loadWorkletRuntime } from './loadRuntime.js';\nexport { onWorkletCtxUpdate, runWorkletCtx, updateWorkletRef, updateWorkletRefInitValueChanges, clearDelayedWorklets, } from './bindings.js';\nexport { WorkletEvents } from './events.js';\n//# sourceMappingURL=index.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n/// <reference path=\"../types/elementApi.d.ts\" />\nimport '../global.js';\n/**\n * Loads and initializes the Lepus chunk in the main thread.\n * @param __schema - The dynamic component entry for loading the Lepus chunk.\n * @returns A boolean indicating whether the Lepus chunk was loaded and initialized successfully.\n */\nfunction loadWorkletRuntime(__schema) {\n    if (typeof __LoadLepusChunk === 'undefined') {\n        return false;\n    }\n    if (globalThis.lynxWorkletImpl) {\n        return true;\n    }\n    return __LoadLepusChunk('worklet-runtime', {\n        // @ts-ignore\n        dynamicComponentEntry: __schema,\n        chunkType: 0,\n    });\n}\nexport { loadWorkletRuntime };\n//# sourceMappingURL=loadRuntime.js.map","export {};\n//# sourceMappingURL=global.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\n\n/**\n * @license MIT\nCopyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nexport default class WebSocketClient {\n  /**\n   * @param {string} url - The WebSocket URL.\n   */\n  constructor(url) {\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\n    this.client = new WebSocket(url)\n    this.client.onerror = (error) => {\n      // TODO: use the real webpack logger\n      console.error('[webpack-dev-server]', error)\n    }\n  }\n\n  /**\n   * @param {(...args: any[]) => void} f - The callback for onOpen.\n   */\n  onOpen(f) {\n    this.client.onopen = f\n  }\n\n  /**\n   * @param {(...args: any[]) => void} f - The callback for onClose.\n   */\n  onClose(f) {\n    this.client.onclose = f\n  }\n\n  // call f with the message string as the first argument\n  /**\n   * @param {(...args: any[]) => void} f - The callback for onMessage.\n   */\n  onMessage(f) {\n    this.client.onmessage = (e) => {\n      f(e.data)\n    }\n  }\n}\n","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nfunction format(objURL) {\n    let protocol = objURL.protocol ?? '';\n    if (protocol && !protocol.endsWith(':')) {\n        protocol += ':';\n    }\n    let auth = objURL.auth ?? '';\n    if (auth) {\n        auth = encodeURIComponent(auth);\n        auth = auth.replace(/%3a/i, ':');\n        auth += '@';\n    }\n    let host = '';\n    if (objURL.hostname) {\n        host = auth\n            + (objURL.hostname.includes(':')\n                ? `[${objURL.hostname}]`\n                : objURL.hostname);\n        if (objURL.port) {\n            host += `:${objURL.port}`;\n        }\n    }\n    let pathname = objURL.pathname ?? '';\n    if (objURL.slashes) {\n        host = `//${host || ''}`;\n        if (pathname && !pathname.startsWith('/')) {\n            pathname = `/${pathname}`;\n        }\n    }\n    else if (!host) {\n        host = '';\n    }\n    let search = objURL.search ?? '';\n    if (search && !search.startsWith('?')) {\n        search = `?${search}`;\n    }\n    let hash = objURL.hash ?? '';\n    if (hash && !hash.startsWith('#')) {\n        hash = `#${hash}`;\n    }\n    pathname = pathname.replace(/[#?]/g, \n    /**\n     * @param {string} match\n     * @returns {string}\n     */\n    (match) => encodeURIComponent(match));\n    search = search.replace('#', '%23');\n    return `${protocol}${host}${pathname}${search}${hash}`;\n}\nexport function createSocketURL(parsedURL, compilationId) {\n    const { hostname } = parsedURL;\n    let socketURLProtocol = parsedURL.protocol;\n    socketURLProtocol = socketURLProtocol.replace(/^(?:http|.+-extension|file)/i, 'ws');\n    let socketURLAuth = '';\n    // `new URL(urlString, [baseURLstring])` doesn't have `auth` property\n    // Parse authentication credentials in case we need them\n    if (parsedURL.username) {\n        socketURLAuth = parsedURL.username;\n        // Since HTTP basic authentication does not allow empty username,\n        // we only include password if the username is not empty.\n        if (parsedURL.password) {\n            // Result: <username>:<password>\n            socketURLAuth = socketURLAuth.concat(':', parsedURL.password);\n        }\n    }\n    // In case the host is a raw IPv6 address, it can be enclosed in\n    // the brackets as the brackets are needed in the final URL string.\n    // Need to remove those as url.format blindly adds its own set of brackets\n    // if the host string contains colons. That would lead to non-working\n    // double brackets (e.g. [[::]]) host\n    //\n    // All of these web socket url params are optionally passed in through resourceQuery,\n    // so we need to fall back to the default if they are not provided\n    const socketURLHostname = hostname.replace(/^\\[(.*)\\]$/, '$1');\n    const socketURLPort = parsedURL.port;\n    // If path is provided it'll be passed in via the resourceQuery as a\n    // query param so it has to be parsed out of the querystring in order for the\n    // client to open the socket to the correct location.\n    let socketURLPathname = '/ws';\n    if (parsedURL.pathname) {\n        socketURLPathname = parsedURL.pathname;\n    }\n    return format({\n        protocol: socketURLProtocol,\n        auth: socketURLAuth,\n        hostname: socketURLHostname,\n        port: socketURLPort,\n        pathname: socketURLPathname,\n        slashes: true,\n        search: compilationId ? `?compilationId=${compilationId}` : '',\n    });\n}\n//# sourceMappingURL=createSocketURL.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { createSocketURL } from './createSocketURL.js';\nimport { log, logEnabledFeatures } from './log.js';\nimport { parseURL } from './parseURL.js';\nimport reloadApp from './reloadApp.js';\nimport socket from './socket.js';\nimport { LynxTransportClient } from './transport.js';\nconst status = {\n    isReconnecting: false,\n    currentHash: __webpack_hash__,\n};\nconst enabledFeatures = {\n    'Hot Module Replacement': false,\n    'Live Reloading': false,\n    Progress: false,\n    Overlay: false,\n};\nconst options = {\n    hot: false,\n    liveReload: false,\n    progress: false,\n};\nconst parsedResourceQuery = parseURL(__resourceQuery);\nconst compilationId = RSPEEDY_COMPILATION_ID;\nif (parsedResourceQuery['hot'] === 'true') {\n    options.hot = true;\n    enabledFeatures['Hot Module Replacement'] = true;\n}\nif (parsedResourceQuery['live-reload'] === 'true') {\n    options.liveReload = true;\n    enabledFeatures['Live Reloading'] = true;\n}\nif (parsedResourceQuery['progress'] === 'true') {\n    options.progress = true;\n    enabledFeatures.Progress = true;\n}\nlogEnabledFeatures(enabledFeatures);\nconst onSocketMessage = {\n    hot() {\n        if (parsedResourceQuery['hot'] === 'false') {\n            return;\n        }\n        options.hot = true;\n    },\n    liveReload() {\n        if (parsedResourceQuery['live-reload'] === 'false') {\n            return;\n        }\n        options.liveReload = true;\n    },\n    invalid() {\n        log.info('App updated. Recompiling...');\n    },\n    hash(hash) {\n        if (status.isReconnecting) {\n            // We only need this once when reconnecting\n            status.isReconnecting = false;\n            // Here, we not only override the currentHash, but also override the\n            // previousHash and the hash in webpack runtime.\n            // In this way, we reset all the hash-related runtime status to match\n            // the cold start.\n            status.currentHash = status.previousHash = hash;\n            // @ts-expect-error webpack runtime hack\n            /* webpack/runtime/getFullHash */ __webpack_require__.h = function () {\n                return hash;\n            };\n            return;\n        }\n        status.previousHash = status.currentHash;\n        status.currentHash = hash;\n    },\n    reconnect(value) {\n        if (parsedResourceQuery['reconnect'] === 'false') {\n            return;\n        }\n        options.reconnect = value;\n    },\n    progress(value) {\n        options.progress = value;\n    },\n    'still-ok': function stillOk() {\n        log.info('Nothing changed.');\n    },\n    ok() {\n        reloadApp(options, status);\n    },\n    warnings(_warnings, params) {\n        // TODO: format warnings\n        if (params?.preventReloading) {\n            return;\n        }\n        reloadApp(options, status);\n    },\n    'static-changed': function staticChanged(file) {\n        log.info(`${file ? `\"${file}\"` : 'Content'} from static directory was changed. Reloading...`);\n        reloadApp({ liveReload: true, hot: false, progress: false }, status);\n    },\n    errors(_errors) {\n        log.error('Errors while compiling. Reload prevented.');\n        // TODO: format errors\n    },\n    error(error) {\n        log.error(error.toString());\n    },\n    close() {\n        // When the dev-server disconnected, we set `isReconnecting` to allow\n        // override the webpack hash when dev-server restart and connect to client.\n        status.isReconnecting = true;\n        log.info('Disconnected!');\n    },\n};\nconst socketURL = createSocketURL(parsedResourceQuery, compilationId);\n// @ts-expect-error I don't know TypeScript. I can't make it work :(\nsocket(socketURL, onSocketMessage, options.reconnect);\n// Export the transport client so that it can be used in the `devServer.client.webSocketTransport`\nexport default LynxTransportClient;\n//# sourceMappingURL=index.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nconst PREFIX = '[rspeedy-dev-server]';\nconst log = {\n    error: console.error.bind(console, PREFIX),\n    warn: console.warn.bind(console, PREFIX),\n    info: console.info.bind(console, PREFIX),\n    log: console.log.bind(console, PREFIX),\n    debug: console.debug.bind(console, PREFIX),\n};\nconst logEnabledFeatures = (features) => {\n    if (!features || Object.keys(features).length === 0) {\n        return;\n    }\n    let logString = 'Server started:';\n    // Server started: Hot Module Replacement enabled, Live Reloading enabled, Overlay disabled.\n    for (const [key, enable] of Object.entries(features)) {\n        logString += ` ${key} ${enable ? 'enabled' : 'disabled'},`;\n    }\n    // replace last comma with a period\n    logString = logString.slice(0, -1).concat('.');\n    log.info(logString);\n};\nexport { logEnabledFeatures, log };\n//# sourceMappingURL=log.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nexport function parseURL(resourceQuery) {\n    const options = {};\n    if (!resourceQuery?.startsWith('?')) {\n        return options;\n    }\n    const searchParams = resourceQuery.slice(1).split('&');\n    for (const keyValuePair of searchParams) {\n        const [key, value] = keyValuePair.split('=');\n        options[key] = value === undefined\n            ? true\n            : decodeURIComponent(value);\n    }\n    return options;\n}\n//# sourceMappingURL=parseURL.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport hotEmitter from 'webpack/hot/emitter.js';\nfunction reloadApp({ hot, liveReload }, status) {\n    const { currentHash, previousHash } = status;\n    const isInitial = currentHash.includes(previousHash);\n    if (isInitial) {\n        return;\n    }\n    if (hot) {\n        hotEmitter.emit('webpackHotUpdate', status.currentHash);\n    } // allow refreshing the page only if liveReload isn't disabled\n    else if (liveReload) {\n        const intervalId = +setInterval(() => {\n            // reload immediately\n            applyReload(intervalId);\n        }, 10);\n    }\n}\nfunction applyReload(intervalId) {\n    clearInterval(intervalId);\n    NativeModules.LynxDevtoolSetModule.invokeCdp('Page.reload', JSON.stringify({\n        method: 'Page.reload',\n        params: {\n            ignoreCache: true,\n        },\n    }), (data) => {\n        if (!data) {\n            return;\n        }\n        try {\n            const { error } = JSON.parse(data);\n            if (error) {\n                console.error('[HMR] live-reload failed:', error.message);\n            }\n        }\n        catch {\n            // explicitly ignore error\n        }\n    });\n}\nexport default reloadApp;\n//# sourceMappingURL=reloadApp.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { log } from './log.js';\nimport { LynxTransportClient } from './transport.js';\n// this LynxTransportClient is here as a default fallback, in case the client is not injected\nconst C = typeof __webpack_dev_server_client__ === 'undefined'\n    ? LynxTransportClient\n    : ('default' in __webpack_dev_server_client__\n        ? __webpack_dev_server_client__.default\n        : __webpack_dev_server_client__);\nlet retries = 0;\nlet maxRetries = 10;\n// Initialized client is exported so external consumers can utilize the same instance\n// It is mutable to enforce singleton\nexport let client = null;\nconst socket = function initSocket(url, handlers, reconnect) {\n    client = new C(url);\n    client.onOpen(() => {\n        retries = 0;\n        if (reconnect !== undefined) {\n            maxRetries = reconnect;\n        }\n    });\n    client.onClose(() => {\n        if (retries === 0) {\n            handlers['close']?.(void 0, void 0);\n        }\n        // Try to reconnect.\n        client = null;\n        // After 10 retries stop trying, to prevent log spam.\n        if (retries < maxRetries) {\n            // Exponentially increase timeout to reconnect.\n            // Respectfully copied from the package `got`.\n            const retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;\n            retries += 1;\n            log.info('Trying to reconnect...');\n            setTimeout(() => {\n                socket(url, handlers, reconnect);\n            }, retryInMs);\n        }\n        else {\n            log.error('Unable to establish a connection after exceeding the maximum retry attempts.');\n        }\n    });\n    client.onMessage((data) => {\n        const message = JSON.parse(data);\n        handlers[message.type]?.(message.data, message.params);\n    });\n};\nexport default socket;\n//# sourceMappingURL=socket.js.map","/**\n * LynxTransportClient is the client transport implementation for webpack-dev-server.\n * It can be used in the\n * {@link https://webpack.js.org/configuration/dev-server/#websockettransport | `devServer.client.webSocketTransport`}\n * configuration of webpack.\n * It should be used with `LynxTransportServer`.\n *\n * @example\n * ```js\n * // webpack.config.js\n * import { createRequire } from 'node:module'\n * import { LynxTransportServer } from '@lynx-js/webpack-dev-transport'\n *\n * const require = createRequire(import.meta.url)\n * export default {\n *   devServer: {\n *     client: {\n *       webSocketTransport: require.resolve('@lynx-js/webpack-dev-transport/client')\n *     },\n *     allowedHosts: 'all',\n *     webSocketServer: LynxTransportServer\n *   }\n * }\n * ```\n *\n * @public\n */\nexport class LynxTransportClient {\n    /** @internal */\n    static EventType = 'message';\n    /** {@inheritdoc Client.onOpen} */\n    onOpen(callback) {\n        callback();\n    }\n    /** {@inheritdoc Client.onClose} */\n    onClose(_callback) {\n        // webpack-dev-server will retry in the `callback`\n        // but `onOpen` in Lynx will never fail.\n    }\n    /** {@inheritdoc Client.onMessage} */\n    onMessage(callback) {\n        lynx.getDevtool().addEventListener(LynxTransportClient.EventType, (event) => {\n            const CDP = JSON.parse(event.data.message);\n            if (CDP.method === LynxTransportClient.EventType) {\n                callback(CDP.params.data);\n            }\n        });\n    }\n}\n//# sourceMappingURL=transport.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { ReadyState, WebSocketImpl } from './WebSocketImpl.js';\n/**\n * The implementation of {@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket | WebSocket}\n * for Lynx.\n *\n * @remarks\n *\n * This only works in environment that has `NativeModules.LynxWebSocketModule`.\n *\n * @public\n */\nexport class WebSocket {\n    /**\n     * {@inheritdoc @lynx-js/websocket#ReadyState.CONNECTING}\n     */\n    static CONNECTING = ReadyState.CONNECTING;\n    /**\n     * {@inheritdoc @lynx-js/websocket#ReadyState.OPEN}\n     */\n    static OPEN = ReadyState.OPEN;\n    /**\n     * {@inheritdoc @lynx-js/websocket#ReadyState.CLOSING}\n     */\n    static CLOSING = ReadyState.CLOSING;\n    /**\n     * {@inheritdoc @lynx-js/websocket#ReadyState.CLOSED}\n     */\n    static CLOSED = ReadyState.CLOSED;\n    #impl;\n    /**\n     * @param url - The URL to which to connect; this should be the URL to which the WebSocket server will respond.\n     * @param protocols - Either a single protocol string or an array of protocol strings. If it is omitted, an empty array is used by default, i.e. `[]`.\n     * @param options - Extra options for Lynx only.\n     */\n    constructor(url, protocols, options = {}) {\n        this.#impl = new WebSocketImpl(NativeModules.LynxWebSocketModule, url, protocols, options);\n    }\n    /**\n     * The `addEventListener()` method of the `EventTarget` interface sets up a function that will be called whenever the specified event is delivered to the target.\n     * @param type - A case-sensitive string representing the event type to listen for.\n     * @param callback - The function that receives a notification. See {@link @lynx-js/websocket#EventMap} for details of events.\n     */\n    addEventListener(type, callback) {\n        return this.#impl.addEventListener(type, callback);\n    }\n    /**\n     * The `removeEventListener()` method of the `EventTarget` interface removes an event listener from the WebSocket.\n     * @param type - The type of event to stop listening for.\n     * @param callback - The function to remove as an event listener.\n     */\n    removeEventListener(type, callback) {\n        this.#impl.removeEventListener(type, callback);\n    }\n    /**\n     * onmessage is the Web-style callback of {@link WebSocket}.\n     *\n     * @example\n     *\n     * ```js\n     * const socket = new WebSocket(url)\n     * socket.onmessage = ({ data }) => {\n     *   // handle data\n     * }\n     * ```\n     * @public\n     */\n    get onmessage() {\n        return this.#impl.onmessage;\n    }\n    set onmessage(callback) {\n        this.#impl.onmessage = callback;\n    }\n    /**\n     * onopen is the Web-style callback of {@link WebSocket}.\n     *\n     * @example\n     *\n     * ```js\n     * const socket = new WebSocket(url)\n     * socket.onopen = ({ data }) => {\n     *   // handle data\n     * }\n     * ```\n     * @public\n     */\n    get onopen() {\n        return this.#impl.onopen;\n    }\n    set onopen(callback) {\n        this.#impl.onopen = callback;\n    }\n    /**\n     * onclose is the Web-style callback of {@link WebSocket}.\n     *\n     * @example\n     *\n     * ```js\n     * const socket = new WebSocket(url)\n     * socket.onclose = ({ data }) => {\n     *   // handle data\n     * }\n     * ```\n     * @public\n     */\n    get onclose() {\n        return this.#impl.onclose;\n    }\n    set onclose(callback) {\n        this.#impl.onclose = callback;\n    }\n    /**\n     * onerror is the Web-style callback of {@link WebSocket}.\n     *\n     * @example\n     *\n     * ```js\n     * const socket = new WebSocket(url)\n     * socket.onerror = ({ data }) => {\n     *   // handle data\n     * }\n     * ```\n     * @public\n     */\n    get onerror() {\n        return this.#impl.onerror;\n    }\n    set onerror(callback) {\n        this.#impl.onerror = callback;\n    }\n    /**\n     * The `url` read-only property returns the URL of the {@link WebSocket} passed by the constructor.\n     */\n    get url() {\n        return this.#impl.url;\n    }\n    /**\n     * The `readyState` read-only property returns the current state of the {@link WebSocket} connection.\n     */\n    get readyState() {\n        return this.#impl.readyState;\n    }\n    /**\n     * The WebSocket.protocol read-only property returns the name of the sub-protocol the server selected.\n     *\n     * @remarks\n     * This will be one of the strings specified in the protocols parameter when creating the WebSocket object,\n     * or the empty string if no connection is established.\n     */\n    get protocol() {\n        return this.#impl.protocol;\n    }\n    /**\n     * The `send` method send the specified data to be transmitted to the server over the {@link WebSocket} connection.\n     *\n     * @remarks\n     * It will throw an exception if you call `send()` when the connection is in the {@link WebSocket.CONNECTING | CONNECTING } state. If you call `send()` when the connection is in the {@link WebSocket.CLOSING | CLOSING } or {@link WebSocket.CLOSED | CLOSED } states, it will silently discard the data.\n     * @param data - The specified data to be transmitted.\n     */\n    send(data) {\n        this.#impl.send(data);\n    }\n    /**\n     * The `ping` method send an empty message to the server over the {@link WebSocket} connection.\n     * @remarks\n     * It will throw an exception if you call `ping()` when the connection is in the {@link WebSocket.CONNECTING | CONNECTING } state. If you call `ping()` when the connection is in the {@link WebSocket.CLOSING | CLOSING } or {@link WebSocket.CLOSED | CLOSED } states, it will silently discard the data.\n     */\n    ping() {\n        this.#impl.ping();\n    }\n    /**\n     * The `close()` method closes the {@link WebSocket} connection or connection attempt, if any.\n     *\n     * @remarks\n     * If the connection is already {@link WebSocket.CLOSED | CLOSED }, this method does nothing.\n     */\n    close(code, reason) {\n        this.#impl.close(code, reason);\n    }\n}\n//# sourceMappingURL=WebSocket.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nvar _a;\nimport { EventEmitter } from 'eventemitter3';\n/**\n * The `ReadyState` describe the state of a `WebSocket` connection.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState\n * @public\n */\nexport var ReadyState;\n(function (ReadyState) {\n    /** Socket has been created. The connection is not yet open. */\n    ReadyState[ReadyState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    /** The connection is open and ready to communicate. */\n    ReadyState[ReadyState[\"OPEN\"] = 1] = \"OPEN\";\n    /** The connection is in the process of closing. */\n    ReadyState[ReadyState[\"CLOSING\"] = 2] = \"CLOSING\";\n    /** The connection is closed or couldn't be opened. */\n    ReadyState[ReadyState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(ReadyState || (ReadyState = {}));\nexport const GlobalEventEmitter = lynx\n    .getJSModule('GlobalEventEmitter');\n/**\n * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/code\n */\nexport var CloseCode;\n(function (CloseCode) {\n    CloseCode[CloseCode[\"NORMAL\"] = 1000] = \"NORMAL\";\n    CloseCode[CloseCode[\"ABNORMAL\"] = 1006] = \"ABNORMAL\";\n})(CloseCode || (CloseCode = {}));\n/**\n * @internal\n */\nexport class WebSocketImpl extends EventEmitter {\n    websocketModule;\n    url;\n    readyState = ReadyState.CONNECTING;\n    protocol;\n    static #nextWebSocketId = 1;\n    #socketID = _a.#nextWebSocketId++;\n    constructor(websocketModule, url, protocols, options = {}) {\n        super();\n        this.websocketModule = websocketModule;\n        this.url = url;\n        if (!websocketModule) {\n            lynx.reportError(new Error(`WebSocket is not found. Please use Lynx >= 2.16 or consider using a polyfill.`), { level: 'warning' });\n            return;\n        }\n        if (typeof protocols === 'string') {\n            protocols = [protocols];\n        }\n        if (!Array.isArray(protocols)) {\n            protocols = [];\n        }\n        this.#registerEvents();\n        this.websocketModule?.connect(url, protocols, options, this.#socketID);\n    }\n    addEventListener(type, callback) {\n        if (!callback) {\n            return;\n        }\n        this.addListener(type, callback);\n        return;\n    }\n    removeEventListener(type, callback) {\n        return this.removeListener(type, callback);\n    }\n    dispatchEvent(event) {\n        return this.emit(event.type, event);\n    }\n    send(data) {\n        if (this.readyState === ReadyState.CONNECTING) {\n            throw new Error('INVALID_STATE_ERR');\n        }\n        if (this.readyState === ReadyState.CLOSING\n            || this.readyState === ReadyState.CLOSED) {\n            return;\n        }\n        if (typeof data === 'string') {\n            this.websocketModule?.send(data, this.#socketID);\n            return;\n        }\n        // TODO: support binary data\n        throw new Error('Unsupported data type');\n    }\n    ping() {\n        if (this.readyState === ReadyState.CONNECTING) {\n            throw new Error('INVALID_STATE_ERR');\n        }\n        if (this.readyState === ReadyState.CLOSING\n            || this.readyState === ReadyState.CLOSED) {\n            return;\n        }\n        this.websocketModule?.ping(this.#socketID);\n    }\n    close(code, reason) {\n        if (this.readyState === ReadyState.CLOSING\n            || this.readyState === ReadyState.CLOSED) {\n            return;\n        }\n        this.readyState = ReadyState.CLOSING;\n        this.#close(code, reason);\n    }\n    #close(code, reason) {\n        // See https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n        const statusCode = typeof code === 'number' ? code : CloseCode.NORMAL;\n        const closeReason = typeof reason === 'string' ? reason : '';\n        this.websocketModule?.close(statusCode, closeReason, this.#socketID);\n    }\n    #registerEvents() {\n        /* eslint-disable @typescript-eslint/unbound-method */\n        GlobalEventEmitter.addListener('websocketMessage', this.#onMessage, this);\n        GlobalEventEmitter.addListener('websocketOpen', this.#onOpen, this);\n        GlobalEventEmitter.addListener('websocketClosed', this.#onClosed, this);\n        GlobalEventEmitter.addListener('websocketFailed', this.#onFailed, this);\n        /* eslint-enable @typescript-eslint/unbound-method */\n    }\n    #unregisterEvents() {\n        /* eslint-disable @typescript-eslint/unbound-method */\n        GlobalEventEmitter.removeListener('websocketMessage', this.#onMessage);\n        GlobalEventEmitter.removeListener('websocketOpen', this.#onOpen);\n        GlobalEventEmitter.removeListener('websocketClosed', this.#onClosed);\n        GlobalEventEmitter.removeListener('websocketFailed', this.#onFailed);\n        /* eslint-enable @typescript-eslint/unbound-method */\n    }\n    #previousOnMessage = null;\n    get onmessage() {\n        return this.#previousOnMessage;\n    }\n    set onmessage(callback) {\n        if (this.#previousOnMessage) {\n            this.removeEventListener('message', this.#previousOnMessage);\n        }\n        this.addEventListener('message', callback);\n        this.#previousOnMessage = callback;\n    }\n    #onMessage(event) {\n        if (event.id !== this.#socketID) {\n            return;\n        }\n        const data = event.data;\n        switch (event.type) {\n            case 'text':\n                break;\n            // TODO: support binary data\n        }\n        this.dispatchEvent(this.#createWebSocketEvent('message', { data }));\n    }\n    #previousOnOpen = null;\n    get onopen() {\n        return this.#previousOnOpen;\n    }\n    set onopen(callback) {\n        if (this.#previousOnOpen) {\n            this.removeEventListener('open', this.#previousOnOpen);\n        }\n        this.addEventListener('open', callback);\n        this.#previousOnOpen = callback;\n    }\n    #onOpen(event) {\n        if (event.id !== this.#socketID) {\n            return;\n        }\n        this.readyState = ReadyState.OPEN;\n        this.protocol = event.protocol;\n        this.dispatchEvent(this.#createWebSocketEvent('open'));\n    }\n    #previousOnClose = null;\n    get onclose() {\n        return this.#previousOnClose;\n    }\n    set onclose(callback) {\n        if (this.#previousOnClose) {\n            this.removeEventListener('close', this.#previousOnClose);\n        }\n        this.addEventListener('close', callback);\n        this.#previousOnClose = callback;\n    }\n    #onClosed(event) {\n        if (event.id !== this.#socketID) {\n            return;\n        }\n        this.readyState = ReadyState.CLOSED;\n        this.dispatchEvent(this.#createWebSocketEvent('close', {\n            code: event.code,\n            reason: event.reason,\n        }));\n        this.#unregisterEvents();\n    }\n    #previousOnError = null;\n    get onerror() {\n        return this.#previousOnError;\n    }\n    set onerror(callback) {\n        if (this.#previousOnError) {\n            this.removeEventListener('error', this.#previousOnError);\n        }\n        this.addEventListener('error', callback);\n        this.#previousOnError = callback;\n    }\n    #onFailed(event) {\n        if (event.id !== this.#socketID) {\n            return;\n        }\n        this.readyState = ReadyState.CLOSED;\n        this.dispatchEvent(this.#createWebSocketEvent('error', {\n            message: event.message,\n        }));\n        this.dispatchEvent(this.#createWebSocketEvent('close', {\n            code: CloseCode.ABNORMAL,\n            reason: event.message,\n        }));\n        this.#unregisterEvents();\n    }\n    #createWebSocketEvent(type, data) {\n        return Object.assign({ type, target: this }, data);\n    }\n}\n_a = WebSocketImpl;\n//# sourceMappingURL=WebSocketImpl.js.map","// Copyright 2024 The Lynx Authors. All rights reserved.\n// Licensed under the Apache License Version 2.0 that can be found in the\n// LICENSE file in the root directory of this source tree.\nimport { WebSocket } from './WebSocket.js';\nexport { WebSocket };\nexport default WebSocket;\nexport { ReadyState } from './WebSocketImpl.js';\n//# sourceMappingURL=index.js.map","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n/* globals __webpack_hash__ */\nif (module.hot) {\n\t/** @type {undefined|string} */\n\tvar lastHash;\n\tvar upToDate = function upToDate() {\n\t\treturn /** @type {string} */ (lastHash).indexOf(__webpack_hash__) >= 0;\n\t};\n\tvar log = require(\"./log\");\n\tvar check = function check() {\n\t\tmodule.hot\n\t\t\t.check(true)\n\t\t\t.then(function (updatedModules) {\n\t\t\t\tif (!updatedModules) {\n\t\t\t\t\tlog(\n\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\"[HMR] Cannot find update. \" +\n\t\t\t\t\t\t\t(typeof window !== \"undefined\"\n\t\t\t\t\t\t\t\t? \"Need to do a full reload!\"\n\t\t\t\t\t\t\t\t: \"Please reload manually!\")\n\t\t\t\t\t);\n\t\t\t\t\tlog(\n\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\"[HMR] (Probably because of restarting the webpack-dev-server)\"\n\t\t\t\t\t);\n\t\t\t\t\tif (typeof window !== \"undefined\") {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!upToDate()) {\n\t\t\t\t\tcheck();\n\t\t\t\t}\n\n\t\t\t\trequire(\"./log-apply-result\")(updatedModules, updatedModules);\n\n\t\t\t\tif (upToDate()) {\n\t\t\t\t\tlog(\"info\", \"[HMR] App is up to date.\");\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(function (err) {\n\t\t\t\tvar status = module.hot.status();\n\t\t\t\tif ([\"abort\", \"fail\"].indexOf(status) >= 0) {\n\t\t\t\t\tlog(\n\t\t\t\t\t\t\"warning\",\n\t\t\t\t\t\t\"[HMR] Cannot apply update. \" +\n\t\t\t\t\t\t\t(typeof window !== \"undefined\"\n\t\t\t\t\t\t\t\t? \"Need to do a full reload!\"\n\t\t\t\t\t\t\t\t: \"Please reload manually!\")\n\t\t\t\t\t);\n\t\t\t\t\tlog(\"warning\", \"[HMR] \" + log.formatError(err));\n\t\t\t\t\tif (typeof window !== \"undefined\") {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlog(\"warning\", \"[HMR] Update failed: \" + log.formatError(err));\n\t\t\t\t}\n\t\t\t});\n\t};\n\tvar hotEmitter = require(\"./emitter\");\n\thotEmitter.on(\"webpackHotUpdate\", function (currentHash) {\n\t\tlastHash = currentHash;\n\t\tif (!upToDate() && module.hot.status() === \"idle\") {\n\t\t\tlog(\"info\", \"[HMR] Checking for updates on the server...\");\n\t\t\tcheck();\n\t\t}\n\t});\n\tlog(\"info\", \"[HMR] Waiting for update signal from WDS...\");\n} else {\n\tthrow new Error(\"[HMR] Hot Module Replacement is disabled.\");\n}\n","function EventEmitter() {\n\tthis.events = {};\n}\n\nEventEmitter.prototype.on = function (eventName, callback) {\n\tif (!this.events[eventName]) {\n\t\tthis.events[eventName] = [];\n\t}\n\tthis.events[eventName].push(callback);\n};\n\nEventEmitter.prototype.emit = function (eventName) {\n\tvar args = Array.prototype.slice.call(arguments, 1);\n\tif (this.events[eventName]) {\n\t\tthis.events[eventName].forEach(function (callback) {\n\t\t\tcallback.apply(null, args);\n\t\t});\n\t}\n};\n\nmodule.exports = new EventEmitter();\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n/**\n * @param {(string | number)[]} updatedModules updated modules\n * @param {(string | number)[] | null} renewedModules renewed modules\n */\nmodule.exports = function (updatedModules, renewedModules) {\n\tvar unacceptedModules = updatedModules.filter(function (moduleId) {\n\t\treturn renewedModules && renewedModules.indexOf(moduleId) < 0;\n\t});\n\tvar log = require(\"./log\");\n\n\tif (unacceptedModules.length > 0) {\n\t\tlog(\n\t\t\t\"warning\",\n\t\t\t\"[HMR] The following modules couldn't be hot updated: (They would need a full reload!)\"\n\t\t);\n\t\tunacceptedModules.forEach(function (moduleId) {\n\t\t\tlog(\"warning\", \"[HMR]  - \" + moduleId);\n\t\t});\n\t}\n\n\tif (!renewedModules || renewedModules.length === 0) {\n\t\tlog(\"info\", \"[HMR] Nothing hot updated.\");\n\t} else {\n\t\tlog(\"info\", \"[HMR] Updated modules:\");\n\t\trenewedModules.forEach(function (moduleId) {\n\t\t\tif (typeof moduleId === \"string\" && moduleId.indexOf(\"!\") !== -1) {\n\t\t\t\tvar parts = moduleId.split(\"!\");\n\t\t\t\tlog.groupCollapsed(\"info\", \"[HMR]  - \" + parts.pop());\n\t\t\t\tlog(\"info\", \"[HMR]  - \" + moduleId);\n\t\t\t\tlog.groupEnd(\"info\");\n\t\t\t} else {\n\t\t\t\tlog(\"info\", \"[HMR]  - \" + moduleId);\n\t\t\t}\n\t\t});\n\t\tvar numberIds = renewedModules.every(function (moduleId) {\n\t\t\treturn typeof moduleId === \"number\";\n\t\t});\n\t\tif (numberIds)\n\t\t\tlog(\n\t\t\t\t\"info\",\n\t\t\t\t'[HMR] Consider using the optimization.moduleIds: \"named\" for module names.'\n\t\t\t);\n\t}\n};\n","/** @typedef {\"info\" | \"warning\" | \"error\"} LogLevel */\n\n/** @type {LogLevel} */\nvar logLevel = \"info\";\n\nfunction dummy() {}\n\n/**\n * @param {LogLevel} level log level\n * @returns {boolean} true, if should log\n */\nfunction shouldLog(level) {\n\tvar shouldLog =\n\t\t(logLevel === \"info\" && level === \"info\") ||\n\t\t([\"info\", \"warning\"].indexOf(logLevel) >= 0 && level === \"warning\") ||\n\t\t([\"info\", \"warning\", \"error\"].indexOf(logLevel) >= 0 && level === \"error\");\n\treturn shouldLog;\n}\n\n/**\n * @param {(msg?: string) => void} logFn log function\n * @returns {(level: LogLevel, msg?: string) => void} function that logs when log level is sufficient\n */\nfunction logGroup(logFn) {\n\treturn function (level, msg) {\n\t\tif (shouldLog(level)) {\n\t\t\tlogFn(msg);\n\t\t}\n\t};\n}\n\n/**\n * @param {LogLevel} level log level\n * @param {string|Error} msg message\n */\nmodule.exports = function (level, msg) {\n\tif (shouldLog(level)) {\n\t\tif (level === \"info\") {\n\t\t\tconsole.log(msg);\n\t\t} else if (level === \"warning\") {\n\t\t\tconsole.warn(msg);\n\t\t} else if (level === \"error\") {\n\t\t\tconsole.error(msg);\n\t\t}\n\t}\n};\n\nvar group = console.group || dummy;\nvar groupCollapsed = console.groupCollapsed || dummy;\nvar groupEnd = console.groupEnd || dummy;\n\nmodule.exports.group = logGroup(group);\n\nmodule.exports.groupCollapsed = logGroup(groupCollapsed);\n\nmodule.exports.groupEnd = logGroup(groupEnd);\n\n/**\n * @param {LogLevel} level log level\n */\nmodule.exports.setLogLevel = function (level) {\n\tlogLevel = level;\n};\n\n/**\n * @param {Error} err error\n * @returns {string} formatted error\n */\nmodule.exports.formatError = function (err) {\n\tvar message = err.message;\n\tvar stack = err.stack;\n\tif (!stack) {\n\t\treturn message;\n\t} else if (stack.indexOf(message) < 0) {\n\t\treturn message + \"\\n\" + stack;\n\t} else {\n\t\treturn stack;\n\t}\n};\n","function _check_private_redeclaration(obj, privateCollection) {\n    if (privateCollection.has(obj)) {\n        throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n    }\n}\nexport { _check_private_redeclaration as _ };\n","function _class_apply_descriptor_get(receiver, descriptor) {\n    if (descriptor.get) return descriptor.get.call(receiver);\n\n    return descriptor.value;\n}\nexport { _class_apply_descriptor_get as _ };\n","function _class_apply_descriptor_set(receiver, descriptor, value) {\n    if (descriptor.set) descriptor.set.call(receiver, value);\n    else {\n        if (!descriptor.writable) {\n            // This should only throw in strict mode, but class bodies are\n            // always strict and private fields can only be used inside\n            // class bodies.\n            throw new TypeError(\"attempted to set read only private field\");\n        }\n        descriptor.value = value;\n    }\n}\nexport { _class_apply_descriptor_set as _ };\n","function _class_apply_descriptor_update(receiver, descriptor) {\n    if (descriptor.set) {\n        if (!descriptor.get) throw new TypeError(\"attempted to read set only private field\");\n\n        if (!(\"__destrWrapper\" in descriptor)) {\n            descriptor.__destrWrapper = {\n                set value(v) {\n                    descriptor.set.call(receiver, v);\n                },\n                get value() {\n                    return descriptor.get.call(receiver);\n                }\n            };\n        }\n\n        return descriptor.__destrWrapper;\n    } else {\n        if (!descriptor.writable) {\n            // This should only throw in strict mode, but class bodies are\n            // always strict and private fields can only be used inside\n            // class bodies.\n            throw new TypeError(\"attempted to set read only private field\");\n        }\n\n        return descriptor;\n    }\n}\nexport { _class_apply_descriptor_update as _ };\n","function _class_check_private_static_access(receiver, classConstructor) {\n    if (receiver !== classConstructor) throw new TypeError(\"Private static access of wrong provenance\");\n}\nexport { _class_check_private_static_access as _ };\n","function _class_check_private_static_field_descriptor(descriptor, action) {\n    if (descriptor === undefined) {\n        throw new TypeError(\"attempted to \" + action + \" private static field before its declaration\");\n    }\n}\nexport { _class_check_private_static_field_descriptor as _ };\n","function _class_extract_field_descriptor(receiver, privateMap, action) {\n    if (!privateMap.has(receiver)) throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n\n    return privateMap.get(receiver);\n}\nexport { _class_extract_field_descriptor as _ };\n","import { _ as _class_apply_descriptor_get } from \"./_class_apply_descriptor_get.js\";\nimport { _ as _class_extract_field_descriptor } from \"./_class_extract_field_descriptor.js\";\n\nfunction _class_private_field_get(receiver, privateMap) {\n    var descriptor = _class_extract_field_descriptor(receiver, privateMap, \"get\");\n    return _class_apply_descriptor_get(receiver, descriptor);\n}\nexport { _class_private_field_get as _ };\n","import { _ as _check_private_redeclaration } from \"./_check_private_redeclaration.js\";\n\nfunction _class_private_field_init(obj, privateMap, value) {\n    _check_private_redeclaration(obj, privateMap);\n    privateMap.set(obj, value);\n}\nexport { _class_private_field_init as _ };\n","import { _ as _class_apply_descriptor_set } from \"./_class_apply_descriptor_set.js\";\nimport { _ as _class_extract_field_descriptor } from \"./_class_extract_field_descriptor.js\";\n\nfunction _class_private_field_set(receiver, privateMap, value) {\n    var descriptor = _class_extract_field_descriptor(receiver, privateMap, \"set\");\n    _class_apply_descriptor_set(receiver, descriptor, value);\n    return value;\n}\nexport { _class_private_field_set as _ };\n","function _class_private_method_get(receiver, privateSet, fn) {\n    if (!privateSet.has(receiver)) throw new TypeError(\"attempted to get private field on non-instance\");\n\n    return fn;\n}\nexport { _class_private_method_get as _ };\n","import { _ as _check_private_redeclaration } from \"./_check_private_redeclaration.js\";\n\nfunction _class_private_method_init(obj, privateSet) {\n    _check_private_redeclaration(obj, privateSet);\n    privateSet.add(obj);\n}\nexport { _class_private_method_init as _ };\n","import { _ as _class_apply_descriptor_update } from \"./_class_apply_descriptor_update.js\";\nimport { _ as _class_check_private_static_access } from \"./_class_check_private_static_access.js\";\nimport { _ as _class_check_private_static_field_descriptor } from \"./_class_check_private_static_field_descriptor.js\";\n\nfunction _class_static_private_field_update(receiver, classConstructor, descriptor) {\n    _class_check_private_static_access(receiver, classConstructor);\n    _class_check_private_static_field_descriptor(descriptor, \"update\");\n\n    return _class_apply_descriptor_update(receiver, descriptor);\n}\nexport { _class_static_private_field_update as _ };\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n","import { Component, createElement, options, toChildArray, Fragment, render as render$1, hydrate as hydrate$1, createContext, createRef, cloneElement as cloneElement$1 } from 'preact';\nexport { Component, Fragment, createContext, createElement, createRef } from 'preact';\nimport { useCallback, useContext, useDebugValue, useEffect, useId, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState } from 'preact/hooks';\nexport * from 'preact/hooks';\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nfunction assign(obj, props) {\n  for (var i in props) obj[i] = props[i];\n  return /** @type {O & P} */obj;\n}\n\n/**\n * Check if two objects have a different shape\n * @param {object} a\n * @param {object} b\n * @returns {boolean}\n */\nfunction shallowDiffers(a, b) {\n  for (var i in a) if (i !== '__source' && !(i in b)) return true;\n  for (var _i in b) if (_i !== '__source' && a[_i] !== b[_i]) return true;\n  return false;\n}\n\n/**\n * Check if two values are the same value\n * @param {*} x\n * @param {*} y\n * @returns {boolean}\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;\n}\n\n/**\n * Component class with a predefined `shouldComponentUpdate` implementation\n */\nfunction PureComponent(p, c) {\n  this.props = p;\n  this.context = c;\n}\nPureComponent.prototype = new Component();\n// Some third-party libraries check if this property is present\nPureComponent.prototype.isPureReactComponent = true;\nPureComponent.prototype.shouldComponentUpdate = function (props, state) {\n  return shallowDiffers(this.props, props) || shallowDiffers(this.state, state);\n};\n\n/**\n * Memoize a component, so that it only updates when the props actually have\n * changed. This was previously known as `React.pure`.\n * @param {import('./internal').FunctionComponent} c functional component\n * @param {(prev: object, next: object) => boolean} [comparer] Custom equality function\n * @returns {import('./internal').FunctionComponent}\n */\nfunction memo(c, comparer) {\n  function shouldUpdate(nextProps) {\n    var ref = this.props.ref;\n    var updateRef = ref == nextProps.ref;\n    if (!updateRef && ref) {\n      ref.call ? ref(null) : ref.current = null;\n    }\n    if (!comparer) {\n      return shallowDiffers(this.props, nextProps);\n    }\n    return !comparer(this.props, nextProps) || !updateRef;\n  }\n  function Memoed(props) {\n    this.shouldComponentUpdate = shouldUpdate;\n    return createElement(c, props);\n  }\n  Memoed.displayName = 'Memo(' + (c.displayName || c.name) + ')';\n  Memoed.prototype.isReactComponent = true;\n  Memoed.__f = true;\n  return Memoed;\n}\n\nvar oldDiffHook = options.__b;\noptions.__b = function (vnode) {\n  if (vnode.type && vnode.type.__f && vnode.ref) {\n    vnode.props.ref = vnode.ref;\n    vnode.ref = null;\n  }\n  if (oldDiffHook) oldDiffHook(vnode);\n};\nvar REACT_FORWARD_SYMBOL = typeof Symbol != 'undefined' && Symbol.for && Symbol.for('react.forward_ref') || 0xf47;\n\n/**\n * Pass ref down to a child. This is mainly used in libraries with HOCs that\n * wrap components. Using `forwardRef` there is an easy way to get a reference\n * of the wrapped component instead of one of the wrapper itself.\n * @param {import('./index').ForwardFn} fn\n * @returns {import('./internal').FunctionComponent}\n */\nfunction forwardRef(fn) {\n  function Forwarded(props) {\n    var clone = assign({}, props);\n    delete clone.ref;\n    return fn(clone, props.ref || null);\n  }\n\n  // mobx-react checks for this being present\n  Forwarded.$$typeof = REACT_FORWARD_SYMBOL;\n  // mobx-react heavily relies on implementation details.\n  // It expects an object here with a `render` property,\n  // and prototype.render will fail. Without this\n  // mobx-react throws.\n  Forwarded.render = Forwarded;\n  Forwarded.prototype.isReactComponent = Forwarded.__f = true;\n  Forwarded.displayName = 'ForwardRef(' + (fn.displayName || fn.name) + ')';\n  return Forwarded;\n}\n\nvar mapFn = function mapFn(children, fn) {\n  if (children == null) return null;\n  return toChildArray(toChildArray(children).map(fn));\n};\n\n// This API is completely unnecessary for Preact, so it's basically passthrough.\nvar Children = {\n  map: mapFn,\n  forEach: mapFn,\n  count: function count(children) {\n    return children ? toChildArray(children).length : 0;\n  },\n  only: function only(children) {\n    var normalized = toChildArray(children);\n    if (normalized.length !== 1) throw 'Children.only';\n    return normalized[0];\n  },\n  toArray: toChildArray\n};\n\n/** Normal hydration that attaches to a DOM tree but does not diff it. */\nvar MODE_HYDRATE = 1 << 5;\n\nvar oldCatchError = options.__e;\noptions.__e = function (error, newVNode, oldVNode, errorInfo) {\n  if (error.then) {\n    /** @type {import('./internal').Component} */\n    var component;\n    var vnode = newVNode;\n    for (; vnode = vnode.__;) {\n      if ((component = vnode.__c) && component.__c) {\n        if (newVNode.__e == null) {\n          newVNode.__e = oldVNode.__e;\n          newVNode.__k = oldVNode.__k;\n        }\n        // Don't call oldCatchError if we found a Suspense\n        return component.__c(error, newVNode);\n      }\n    }\n  }\n  oldCatchError(error, newVNode, oldVNode, errorInfo);\n};\nvar oldUnmount = options.unmount;\noptions.unmount = function (vnode) {\n  /** @type {import('./internal').Component} */\n  var component = vnode.__c;\n  if (component && component.__R) {\n    component.__R();\n  }\n\n  // if the component is still hydrating\n  // most likely it is because the component is suspended\n  // we set the vnode.type as `null` so that it is not a typeof function\n  // so the unmount will remove the vnode._dom\n  if (component && vnode.__u & MODE_HYDRATE) {\n    vnode.type = null;\n  }\n  if (oldUnmount) oldUnmount(vnode);\n};\nfunction detachedClone(vnode, detachedParent, parentDom) {\n  if (vnode) {\n    if (vnode.__c && vnode.__c.__H) {\n      vnode.__c.__H.__.forEach(function (effect) {\n        if (typeof effect.__c == 'function') effect.__c();\n      });\n      vnode.__c.__H = null;\n    }\n    vnode = assign({}, vnode);\n    if (vnode.__c != null) {\n      if (vnode.__c.__P === parentDom) {\n        vnode.__c.__P = detachedParent;\n      }\n      vnode.__c = null;\n    }\n    vnode.__k = vnode.__k && vnode.__k.map(function (child) {\n      return detachedClone(child, detachedParent, parentDom);\n    });\n  }\n  return vnode;\n}\nfunction removeOriginal(vnode, detachedParent, originalParent) {\n  if (vnode && originalParent) {\n    vnode.__v = null;\n    vnode.__k = vnode.__k && vnode.__k.map(function (child) {\n      return removeOriginal(child, detachedParent, originalParent);\n    });\n    if (vnode.__c) {\n      if (vnode.__c.__P === detachedParent) {\n        if (vnode.__e) {\n          originalParent.appendChild(vnode.__e);\n        }\n        vnode.__c.__e = true;\n        vnode.__c.__P = originalParent;\n      }\n    }\n  }\n  return vnode;\n}\n\n// having custom inheritance instead of a class here saves a lot of bytes\nfunction Suspense() {\n  // we do not call super here to golf some bytes...\n  this.__u = 0;\n  this._suspenders = null;\n  this.__b = null;\n}\n\n// Things we do here to save some bytes but are not proper JS inheritance:\n// - call `new Component()` as the prototype\n// - do not set `Suspense.prototype.constructor` to `Suspense`\nSuspense.prototype = new Component();\n\n/**\n * @this {import('./internal').SuspenseComponent}\n * @param {Promise} promise The thrown promise\n * @param {import('./internal').VNode<any, any>} suspendingVNode The suspending component\n */\nSuspense.prototype.__c = function (promise, suspendingVNode) {\n  var suspendingComponent = suspendingVNode.__c;\n\n  /** @type {import('./internal').SuspenseComponent} */\n  var c = this;\n  if (c._suspenders == null) {\n    c._suspenders = [];\n  }\n  c._suspenders.push(suspendingComponent);\n  var resolve = suspended(c.__v);\n  var resolved = false;\n  var onResolved = function onResolved() {\n    if (resolved) return;\n    resolved = true;\n    suspendingComponent.__R = null;\n    if (resolve) {\n      resolve(onSuspensionComplete);\n    } else {\n      onSuspensionComplete();\n    }\n  };\n  suspendingComponent.__R = onResolved;\n  var onSuspensionComplete = function onSuspensionComplete() {\n    if (! --c.__u) {\n      // If the suspension was during hydration we don't need to restore the\n      // suspended children into the _children array\n      if (c.state.__a) {\n        var suspendedVNode = c.state.__a;\n        c.__v.__k[0] = removeOriginal(suspendedVNode, suspendedVNode.__c.__P, suspendedVNode.__c.__O);\n      }\n      c.setState({\n        __a: c.__b = null\n      });\n      var _suspended;\n      while (_suspended = c._suspenders.pop()) {\n        _suspended.forceUpdate();\n      }\n    }\n  };\n\n  /**\n   * We do not set `suspended: true` during hydration because we want the actual markup\n   * to remain on screen and hydrate it when the suspense actually gets resolved.\n   * While in non-hydration cases the usual fallback -> component flow would occour.\n   */\n  if (!c.__u++ && !(suspendingVNode.__u & MODE_HYDRATE)) {\n    c.setState({\n      __a: c.__b = c.__v.__k[0]\n    });\n  }\n  promise.then(onResolved, onResolved);\n};\nSuspense.prototype.componentWillUnmount = function () {\n  this._suspenders = [];\n};\n\n/**\n * @this {import('./internal').SuspenseComponent}\n * @param {import('./internal').SuspenseComponent[\"props\"]} props\n * @param {import('./internal').SuspenseState} state\n */\nSuspense.prototype.render = function (props, state) {\n  if (this.__b) {\n    // When the Suspense's _vnode was created by a call to createVNode\n    // (i.e. due to a setState further up in the tree)\n    // it's _children prop is null, in this case we \"forget\" about the parked vnodes to detach\n    if (this.__v.__k) {\n      var detachedParent = options.document.createElement('div');\n      var detachedComponent = this.__v.__k[0].__c;\n      this.__v.__k[0] = detachedClone(this.__b, detachedParent, detachedComponent.__O = detachedComponent.__P);\n    }\n    this.__b = null;\n  }\n\n  // Wrap fallback tree in a VNode that prevents itself from being marked as aborting mid-hydration:\n  /** @type {import('./internal').VNode} */\n  var fallback = state.__a && createElement(Fragment, null, props.fallback);\n  if (fallback) fallback.__u &= ~MODE_HYDRATE;\n  return [createElement(Fragment, null, state.__a ? null : props.children), fallback];\n};\n\n/**\n * Checks and calls the parent component's _suspended method, passing in the\n * suspended vnode. This is a way for a parent (e.g. SuspenseList) to get notified\n * that one of its children/descendants suspended.\n *\n * The parent MAY return a callback. The callback will get called when the\n * suspension resolves, notifying the parent of the fact.\n * Moreover, the callback gets function `unsuspend` as a parameter. The resolved\n * child descendant will not actually get unsuspended until `unsuspend` gets called.\n * This is a way for the parent to delay unsuspending.\n *\n * If the parent does not return a callback then the resolved vnode\n * gets unsuspended immediately when it resolves.\n *\n * @param {import('./internal').VNode} vnode\n * @returns {((unsuspend: () => void) => void)?}\n */\nfunction suspended(vnode) {\n  /** @type {import('./internal').Component} */\n  var component = vnode.__.__c;\n  return component && component.__a && component.__a(vnode);\n}\nfunction lazy(loader) {\n  var prom;\n  var component;\n  var error;\n  function Lazy(props) {\n    if (!prom) {\n      prom = loader();\n      prom.then(function (exports) {\n        component = exports.default || exports;\n      }, function (e) {\n        error = e;\n      });\n    }\n    if (error) {\n      throw error;\n    }\n    if (!component) {\n      throw prom;\n    }\n    return createElement(component, props);\n  }\n  Lazy.displayName = 'Lazy';\n  Lazy.__f = true;\n  return Lazy;\n}\n\n// Indexes to linked list nodes (nodes are stored as arrays to save bytes).\nvar SUSPENDED_COUNT = 0;\nvar RESOLVED_COUNT = 1;\nvar NEXT_NODE = 2;\n\n// Having custom inheritance instead of a class here saves a lot of bytes.\nfunction SuspenseList() {\n  this._next = null;\n  this._map = null;\n}\n\n// Mark one of child's earlier suspensions as resolved.\n// Some pending callbacks may become callable due to this\n// (e.g. the last suspended descendant gets resolved when\n// revealOrder === 'together'). Process those callbacks as well.\nvar resolve = function resolve(list, child, node) {\n  if (++node[RESOLVED_COUNT] === node[SUSPENDED_COUNT]) {\n    // The number a child (or any of its descendants) has been suspended\n    // matches the number of times it's been resolved. Therefore we\n    // mark the child as completely resolved by deleting it from ._map.\n    // This is used to figure out when *all* children have been completely\n    // resolved when revealOrder is 'together'.\n    list._map.delete(child);\n  }\n\n  // If revealOrder is falsy then we can do an early exit, as the\n  // callbacks won't get queued in the node anyway.\n  // If revealOrder is 'together' then also do an early exit\n  // if all suspended descendants have not yet been resolved.\n  if (!list.props.revealOrder || list.props.revealOrder[0] === 't' && list._map.size) {\n    return;\n  }\n\n  // Walk the currently suspended children in order, calling their\n  // stored callbacks on the way. Stop if we encounter a child that\n  // has not been completely resolved yet.\n  node = list._next;\n  while (node) {\n    while (node.length > 3) {\n      node.pop()();\n    }\n    if (node[RESOLVED_COUNT] < node[SUSPENDED_COUNT]) {\n      break;\n    }\n    list._next = node = node[NEXT_NODE];\n  }\n};\n\n// Things we do here to save some bytes but are not proper JS inheritance:\n// - call `new Component()` as the prototype\n// - do not set `Suspense.prototype.constructor` to `Suspense`\nSuspenseList.prototype = new Component();\nSuspenseList.prototype.__a = function (child) {\n  var list = this;\n  var delegated = suspended(list.__v);\n  var node = list._map.get(child);\n  node[SUSPENDED_COUNT]++;\n  return function (unsuspend) {\n    var wrappedUnsuspend = function wrappedUnsuspend() {\n      if (!list.props.revealOrder) {\n        // Special case the undefined (falsy) revealOrder, as there\n        // is no need to coordinate a specific order or unsuspends.\n        unsuspend();\n      } else {\n        node.push(unsuspend);\n        resolve(list, child, node);\n      }\n    };\n    if (delegated) {\n      delegated(wrappedUnsuspend);\n    } else {\n      wrappedUnsuspend();\n    }\n  };\n};\nSuspenseList.prototype.render = function (props) {\n  this._next = null;\n  this._map = new Map();\n  var children = toChildArray(props.children);\n  if (props.revealOrder && props.revealOrder[0] === 'b') {\n    // If order === 'backwards' (or, well, anything starting with a 'b')\n    // then flip the child list around so that the last child will be\n    // the first in the linked list.\n    children.reverse();\n  }\n  // Build the linked list. Iterate through the children in reverse order\n  // so that `_next` points to the first linked list node to be resolved.\n  for (var i = children.length; i--;) {\n    // Create a new linked list node as an array of form:\n    // \t[suspended_count, resolved_count, next_node]\n    // where suspended_count and resolved_count are numeric counters for\n    // keeping track how many times a node has been suspended and resolved.\n    //\n    // Note that suspended_count starts from 1 instead of 0, so we can block\n    // processing callbacks until componentDidMount has been called. In a sense\n    // node is suspended at least until componentDidMount gets called!\n    //\n    // Pending callbacks are added to the end of the node:\n    // \t[suspended_count, resolved_count, next_node, callback_0, callback_1, ...]\n    this._map.set(children[i], this._next = [1, 0, this._next]);\n  }\n  return props.children;\n};\nSuspenseList.prototype.componentDidUpdate = SuspenseList.prototype.componentDidMount = function () {\n  var _this = this;\n  // Iterate through all children after mounting for two reasons:\n  // 1. As each node[SUSPENDED_COUNT] starts from 1, this iteration increases\n  //    each node[RELEASED_COUNT] by 1, therefore balancing the counters.\n  //    The nodes can now be completely consumed from the linked list.\n  // 2. Handle nodes that might have gotten resolved between render and\n  //    componentDidMount.\n  this._map.forEach(function (node, child) {\n    resolve(_this, child, node);\n  });\n};\n\n/**\n * @param {import('../../src/index').RenderableProps<{ context: any }>} props\n */\nfunction ContextProvider(props) {\n  this.getChildContext = function () {\n    return props.context;\n  };\n  return props.children;\n}\n\n/**\n * Portal component\n * @this {import('./internal').Component}\n * @param {object | null | undefined} props\n *\n * TODO: use createRoot() instead of fake root\n */\nfunction Portal(props) {\n  var _this = this;\n  var container = props._container;\n  _this.componentWillUnmount = function () {\n    render$1(null, _this._temp);\n    _this._temp = null;\n    _this._container = null;\n  };\n\n  // When we change container we should clear our old container and\n  // indicate a new mount.\n  if (_this._container && _this._container !== container) {\n    _this.componentWillUnmount();\n  }\n  if (!_this._temp) {\n    _this._container = container;\n\n    // Create a fake DOM parent node that manages a subset of `container`'s children:\n    _this._temp = {\n      nodeType: 1,\n      parentNode: container,\n      childNodes: [],\n      contains: function contains() {\n        return true;\n      },\n      appendChild: function appendChild(child) {\n        this.childNodes.push(child);\n        _this._container.appendChild(child);\n      },\n      insertBefore: function insertBefore(child, before) {\n        this.childNodes.push(child);\n        _this._container.appendChild(child);\n      },\n      removeChild: function removeChild(child) {\n        this.childNodes.splice(this.childNodes.indexOf(child) >>> 1, 1);\n        _this._container.removeChild(child);\n      }\n    };\n  }\n\n  // Render our wrapping element into temp.\n  render$1(createElement(ContextProvider, {\n    context: _this.context\n  }, props.__v), _this._temp);\n}\n\n/**\n * Create a `Portal` to continue rendering the vnode tree at a different DOM node\n * @param {import('./internal').VNode} vnode The vnode to render\n * @param {import('./internal').PreactElement} container The DOM node to continue rendering in to.\n */\nfunction createPortal(vnode, container) {\n  var el = createElement(Portal, {\n    __v: vnode,\n    _container: container\n  });\n  el.containerInfo = container;\n  return el;\n}\n\nvar REACT_ELEMENT_TYPE = typeof Symbol != 'undefined' && Symbol.for && Symbol.for('react.element') || 0xeac7;\n\n// Some libraries like `react-virtualized` explicitly check for this.\nComponent.prototype.isReactComponent = {};\nvar oldVNodeHook = options.vnode;\noptions.vnode = function (vnode) {\n  vnode.$$typeof = REACT_ELEMENT_TYPE;\n  if (oldVNodeHook) oldVNodeHook(vnode);\n};\n\n// `UNSAFE_*` lifecycle hooks\n// Preact only ever invokes the unprefixed methods.\n// Here we provide a base \"fallback\" implementation that calls any defined UNSAFE_ prefixed method.\n// - If a component defines its own `componentDidMount()` (including via defineProperty), use that.\n// - If a component defines `UNSAFE_componentDidMount()`, `componentDidMount` is the alias getter/setter.\n// - If anything assigns to an `UNSAFE_*` property, the assignment is forwarded to the unprefixed property.\n// See https://github.com/preactjs/preact/issues/1941\n['componentWillMount', 'componentWillReceiveProps', 'componentWillUpdate'].forEach(function (key) {\n  Object.defineProperty(Component.prototype, key, {\n    configurable: true,\n    get: function get() {\n      return this['UNSAFE_' + key];\n    },\n    set: function set(v) {\n      Object.defineProperty(this, key, {\n        configurable: true,\n        writable: true,\n        value: v\n      });\n    }\n  });\n});\n\n/**\n * Proxy render() since React returns a Component reference.\n * @param {import('./internal').VNode} vnode VNode tree to render\n * @param {import('./internal').PreactElement} parent DOM node to render vnode tree into\n * @param {() => void} [callback] Optional callback that will be called after rendering\n * @returns {import('./internal').Component | null} The root component reference or null\n */\nfunction render(vnode, parent, callback) {\n  // React destroys any existing DOM nodes, see #1727\n  // ...but only on the first render, see #1828\n  if (parent.__k == null) {\n    parent.textContent = '';\n  }\n  render$1(vnode, parent);\n  if (typeof callback == 'function') callback();\n  return vnode ? vnode.__c : null;\n}\nfunction hydrate(vnode, parent, callback) {\n  hydrate$1(vnode, parent);\n  if (typeof callback == 'function') callback();\n  return vnode ? vnode.__c : null;\n}\nvar oldEventHook = options.event;\noptions.event = function (e) {\n  if (oldEventHook) e = oldEventHook(e);\n  e.persist = empty;\n  e.isPropagationStopped = isPropagationStopped;\n  e.isDefaultPrevented = isDefaultPrevented;\n  return e.nativeEvent = e;\n};\nfunction empty() {}\nfunction isPropagationStopped() {\n  return this.cancelBubble;\n}\nfunction isDefaultPrevented() {\n  return this.defaultPrevented;\n}\n\n// This is a very very private internal function for React it\n// is used to sort-of do runtime dependency injection.\nvar __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {\n  ReactCurrentDispatcher: {\n    current: {\n      useCallback: useCallback,\n      useContext: useContext,\n      useDebugValue: useDebugValue,\n      useDeferredValue: useDeferredValue,\n      useEffect: useEffect,\n      useId: useId,\n      useImperativeHandle: useImperativeHandle,\n      useInsertionEffect: useInsertionEffect,\n      useLayoutEffect: useLayoutEffect,\n      useMemo: useMemo,\n      // useMutableSource, // experimental-only and replaced by uSES, likely not worth supporting\n      useReducer: useReducer,\n      useRef: useRef,\n      useState: useState,\n      useSyncExternalStore: useSyncExternalStore,\n      useTransition: useTransition\n    }\n  }\n};\n\nvar version = '18.3.1'; // trick libraries to think we are react\n\n/**\n * Legacy version of createElement.\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component constructor\n */\nfunction createFactory(type) {\n  return createElement.bind(null, type);\n}\n\n/**\n * Check if the passed element is a valid (p)react node.\n * @param {*} element The element to check\n * @returns {boolean}\n */\nfunction isValidElement(element) {\n  return !!element && element.$$typeof === REACT_ELEMENT_TYPE;\n}\n\n/**\n * Check if the passed element is a Fragment node.\n * @param {*} element The element to check\n * @returns {boolean}\n */\nfunction isFragment(element) {\n  return isValidElement(element) && element.type === Fragment;\n}\n\n/**\n * Check if the passed element is a Memo node.\n * @param {*} element The element to check\n * @returns {boolean}\n */\nfunction isMemo(element) {\n  return !!element && !!element.displayName && (typeof element.displayName === 'string' || element.displayName instanceof String) && element.displayName.startsWith('Memo(');\n}\n\n/**\n * Wrap `cloneElement` to abort if the passed element is not a valid element and apply\n * all vnode normalizations.\n * @param {import('./internal').VNode} element The vnode to clone\n * @param {object} props Props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Optional component children\n */\nfunction cloneElement(element) {\n  if (!isValidElement(element)) return element;\n  return cloneElement$1.apply(null, arguments);\n}\n\n/**\n * Remove a component tree from the DOM, including state and event handlers.\n * @param {import('./internal').PreactElement} container\n * @returns {boolean}\n */\nfunction unmountComponentAtNode(container) {\n  if (container.__k) {\n    render$1(null, container);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Get the matching DOM node for a component\n * @param {import('./internal').Component} component\n * @returns {import('./internal').PreactElement | null}\n */\nfunction findDOMNode(component) {\n  return component && (component.base || component.nodeType === 1 && component) || null;\n}\n\n/**\n * Deprecated way to control batched rendering inside the reconciler, but we\n * already schedule in batches inside our rendering code\n * @template Arg\n * @param {(arg: Arg) => void} callback function that triggers the updated\n * @param {Arg} [arg] Optional argument that can be passed to the callback\n */\n// eslint-disable-next-line camelcase\nvar unstable_batchedUpdates = function unstable_batchedUpdates(callback, arg) {\n  return callback(arg);\n};\n\n/**\n * In React, `flushSync` flushes the entire tree and forces a rerender. It's\n * implmented here as a no-op.\n * @template Arg\n * @template Result\n * @param {(arg: Arg) => Result} callback function that runs before the flush\n * @param {Arg} [arg] Optional argument that can be passed to the callback\n * @returns\n */\nvar flushSync = function flushSync(callback, arg) {\n  return callback(arg);\n};\n\n/**\n * Strict Mode is not implemented in Preact, so we provide a stand-in for it\n * that just renders its children without imposing any restrictions.\n */\nvar StrictMode = Fragment;\nfunction startTransition(cb) {\n  cb();\n}\nfunction useDeferredValue(val) {\n  return val;\n}\nfunction useTransition() {\n  return [false, startTransition];\n}\n\n// TODO: in theory this should be done after a VNode is diffed as we want to insert\n// styles/... before it attaches\nvar useInsertionEffect = useLayoutEffect;\n\n// compat to react-is\nvar isElement = isValidElement;\n\n/**\n * This is taken from https://github.com/facebook/react/blob/main/packages/use-sync-external-store/src/useSyncExternalStoreShimClient.js#L84\n * on a high level this cuts out the warnings, ... and attempts a smaller implementation\n * @typedef {{ _value: any; _getSnapshot: () => any }} Store\n */\nfunction useSyncExternalStore(subscribe, getSnapshot) {\n  var value = getSnapshot();\n\n  /**\n   * @typedef {{ _instance: Store }} StoreRef\n   * @type {[StoreRef, (store: StoreRef) => void]}\n   */\n  var _useState = useState({\n      _instance: {\n        __: value,\n        _getSnapshot: getSnapshot\n      }\n    }),\n    _instance = _useState[0]._instance,\n    forceUpdate = _useState[1];\n  useLayoutEffect(function () {\n    _instance.__ = value;\n    _instance._getSnapshot = getSnapshot;\n    if (didSnapshotChange(_instance)) {\n      forceUpdate({\n        _instance: _instance\n      });\n    }\n  }, [subscribe, value, getSnapshot]);\n  useEffect(function () {\n    if (didSnapshotChange(_instance)) {\n      forceUpdate({\n        _instance: _instance\n      });\n    }\n    return subscribe(function () {\n      if (didSnapshotChange(_instance)) {\n        forceUpdate({\n          _instance: _instance\n        });\n      }\n    });\n  }, [subscribe]);\n  return value;\n}\n\n/** @type {(inst: Store) => boolean} */\nfunction didSnapshotChange(inst) {\n  var latestGetSnapshot = inst._getSnapshot;\n  var prevValue = inst.__;\n  try {\n    var nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\n// React copies the named exports to the default one.\nvar index = {\n  useState: useState,\n  useId: useId,\n  useReducer: useReducer,\n  useEffect: useEffect,\n  useLayoutEffect: useLayoutEffect,\n  useInsertionEffect: useInsertionEffect,\n  useTransition: useTransition,\n  useDeferredValue: useDeferredValue,\n  useSyncExternalStore: useSyncExternalStore,\n  startTransition: startTransition,\n  useRef: useRef,\n  useImperativeHandle: useImperativeHandle,\n  useMemo: useMemo,\n  useCallback: useCallback,\n  useContext: useContext,\n  useDebugValue: useDebugValue,\n  version: version,\n  Children: Children,\n  render: render,\n  hydrate: hydrate,\n  unmountComponentAtNode: unmountComponentAtNode,\n  createPortal: createPortal,\n  createElement: createElement,\n  createContext: createContext,\n  createFactory: createFactory,\n  cloneElement: cloneElement,\n  createRef: createRef,\n  Fragment: Fragment,\n  isValidElement: isValidElement,\n  isElement: isElement,\n  isFragment: isFragment,\n  isMemo: isMemo,\n  findDOMNode: findDOMNode,\n  Component: Component,\n  PureComponent: PureComponent,\n  memo: memo,\n  forwardRef: forwardRef,\n  flushSync: flushSync,\n  unstable_batchedUpdates: unstable_batchedUpdates,\n  StrictMode: StrictMode,\n  Suspense: Suspense,\n  SuspenseList: SuspenseList,\n  lazy: lazy,\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n};\n\nexport { Children, PureComponent, StrictMode, Suspense, SuspenseList, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, cloneElement, createFactory, createPortal, index as default, findDOMNode, flushSync, forwardRef, hydrate, isElement, isFragment, isMemo, isValidElement, lazy, memo, render, startTransition, unmountComponentAtNode, unstable_batchedUpdates, useDeferredValue, useInsertionEffect, useSyncExternalStore, useTransition, version };\n//# sourceMappingURL=compat.module.js.map\n","/** Normal hydration that attaches to a DOM tree but does not diff it. */\nvar MODE_HYDRATE = 1 << 5;\n/** Signifies this VNode suspended on the previous render */\nvar MODE_SUSPENDED = 1 << 7;\n/** Indicates that this node needs to be inserted while patching children */\nvar INSERT_VNODE = 1 << 16;\n/** Indicates a VNode has been matched with another VNode in the diff */\nvar MATCHED = 1 << 17;\n\n/** Reset all mode flags */\nvar RESET_MODE = ~(MODE_HYDRATE | MODE_SUSPENDED);\nvar EMPTY_OBJ = /** @type {any} */{};\nvar EMPTY_ARR = [];\nvar IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n\nvar isArray = Array.isArray;\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nfunction assign(obj, props) {\n  // @ts-expect-error We change the type of `obj` to be `O & P`\n  for (var i in props) obj[i] = props[i];\n  return /** @type {O & P} */obj;\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {preact.ContainerNode} node The node to remove\n */\nfunction removeNode(node) {\n  if (node && node.parentNode) node.parentNode.removeChild(node);\n}\nvar slice = EMPTY_ARR.slice;\n\n/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {VNode} vnode The vnode that threw the error that was caught (except\n * for unmounting when this parameter is the highest parent that was being\n * unmounted)\n * @param {VNode} [oldVNode]\n * @param {ErrorInfo} [errorInfo]\n */\nfunction _catchError(error, vnode, oldVNode, errorInfo) {\n  /** @type {Component} */\n  var component, /** @type {ComponentType} */\n    ctor, /** @type {boolean} */\n    handled;\n  for (; vnode = vnode.__;) {\n    if ((component = vnode.__c) && !component.__) {\n      try {\n        ctor = component.constructor;\n        if (ctor && ctor.getDerivedStateFromError != null) {\n          component.setState(ctor.getDerivedStateFromError(error));\n          handled = component.__d;\n        }\n        if (component.componentDidCatch != null) {\n          component.componentDidCatch(error, errorInfo || {});\n          handled = component.__d;\n        }\n\n        // This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n        if (handled) {\n          return component.__E = component;\n        }\n      } catch (e) {\n        error = e;\n      }\n    }\n  }\n  throw error;\n}\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {Options}\n */\nvar options = {\n  __e: _catchError\n};\n\nvar vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {VNode[\"type\"]} type The node name or Component constructor for this\n * virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the\n * virtual node\n * @returns {VNode}\n */\nfunction createElement(type, props, children) {\n  var normalizedProps = {},\n    key,\n    ref,\n    i;\n  for (i in props) {\n    if (i == 'key') key = props[i];else if (i == 'ref') ref = props[i];else normalizedProps[i] = props[i];\n  }\n  if (arguments.length > 2) {\n    normalizedProps.children = arguments.length > 3 ? slice.call(arguments, 2) : children;\n  }\n\n  // If a Component VNode, check for and apply defaultProps\n  // Note: type may be undefined in development, must never error here.\n  if (typeof type == 'function' && type.defaultProps != null) {\n    for (i in type.defaultProps) {\n      if (normalizedProps[i] === undefined) {\n        normalizedProps[i] = type.defaultProps[i];\n      }\n    }\n  }\n  return createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {VNode}\n */\nfunction createVNode(type, props, key, ref, original) {\n  // V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n  // Do not inline into createElement and coerceToVNode!\n  /** @type {VNode} */\n  var vnode = {\n    type: type,\n    props: props,\n    key: key,\n    ref: ref,\n    __k: null,\n    __: null,\n    __b: 0,\n    __e: null,\n    // _nextDom must be initialized to undefined b/c it will eventually\n    // be set to dom.nextSibling which can return `null` and it is important\n    // to be able to distinguish between an uninitialized _nextDom and\n    // a _nextDom that has been set to `null`\n    __d: undefined,\n    __c: null,\n    constructor: undefined,\n    __v: original == null ? ++vnodeId : original,\n    __i: -1,\n    __u: 0\n  };\n\n  // Only invoke the vnode hook if this was *not* a direct copy:\n  if (original == null && options.vnode != null) options.vnode(vnode);\n  return vnode;\n}\nfunction createRef() {\n  return {\n    current: null\n  };\n}\nfunction Fragment(props) {\n  return props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is VNode}\n */\nvar isValidElement = function isValidElement(vnode) {\n  return vnode != null && vnode.constructor == undefined;\n};\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nfunction BaseComponent(props, context) {\n  this.props = props;\n  this.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nBaseComponent.prototype.setState = function (update, callback) {\n  // only clone state when copying to nextState the first time.\n  var s;\n  if (this.__s != null && this.__s !== this.state) {\n    s = this.__s;\n  } else {\n    s = this.__s = assign({}, this.state);\n  }\n  if (typeof update == 'function') {\n    // Some libraries like `immer` mark the current state as readonly,\n    // preventing us from mutating it, so we need to clone it. See #2716\n    update = update(assign({}, s), this.props);\n  }\n  if (update) {\n    assign(s, update);\n  }\n\n  // Skip update if updater function returned null\n  if (update == null) return;\n  if (this.__v) {\n    if (callback) {\n      this._sb.push(callback);\n    }\n    enqueueRender(this);\n  }\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nBaseComponent.prototype.forceUpdate = function (callback) {\n  if (this.__v) {\n    // Set render mode so that we can differentiate where the render request\n    // is coming from. We need this because forceUpdate should never call\n    // shouldComponentUpdate\n    this.__e = true;\n    if (callback) this.__h.push(callback);\n    enqueueRender(this);\n  }\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {ComponentChildren | void}\n */\nBaseComponent.prototype.render = Fragment;\n\n/**\n * @param {VNode} vnode\n * @param {number | null} [childIndex]\n */\nfunction getDomSibling(vnode, childIndex) {\n  if (childIndex == null) {\n    // Use childIndex==null as a signal to resume the search from the vnode's sibling\n    return vnode.__ ? getDomSibling(vnode.__, vnode.__i + 1) : null;\n  }\n  var sibling;\n  for (; childIndex < vnode.__k.length; childIndex++) {\n    sibling = vnode.__k[childIndex];\n    if (sibling != null && sibling.__e != null) {\n      // Since updateParentDomPointers keeps _dom pointer correct,\n      // we can rely on _dom to tell us if this subtree contains a\n      // rendered DOM node, and what the first rendered DOM node is\n      return sibling.__e;\n    }\n  }\n\n  // If we get here, we have not found a DOM node in this vnode's children.\n  // We must resume from this vnode's sibling (in it's parent _children array)\n  // Only climb up and search the parent if we aren't searching through a DOM\n  // VNode (meaning we reached the DOM parent of the original vnode that began\n  // the search)\n  return typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {Component} component The component to rerender\n */\nfunction renderComponent(component) {\n  var oldVNode = component.__v,\n    oldDom = oldVNode.__e,\n    commitQueue = [],\n    refQueue = [];\n  if (component.__P) {\n    var newVNode = assign({}, oldVNode);\n    newVNode.__v = oldVNode.__v + 1;\n    if (options.vnode) options.vnode(newVNode);\n    diff(component.__P, newVNode, oldVNode, component.__n, component.__P.namespaceURI, oldVNode.__u & MODE_HYDRATE ? [oldDom] : null, commitQueue, oldDom == null ? getDomSibling(oldVNode) : oldDom, !!(oldVNode.__u & MODE_HYDRATE), refQueue);\n    newVNode.__v = oldVNode.__v;\n    newVNode.__.__k[newVNode.__i] = newVNode;\n    commitRoot(commitQueue, newVNode, refQueue);\n    if (newVNode.__e != oldDom) {\n      updateParentDomPointers(newVNode);\n    }\n  }\n}\n\n/**\n * @param {VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n  if ((vnode = vnode.__) != null && vnode.__c != null) {\n    vnode.__e = vnode.__c.base = null;\n    for (var i = 0; i < vnode.__k.length; i++) {\n      var child = vnode.__k[i];\n      if (child != null && child.__e != null) {\n        vnode.__e = vnode.__c.base = child.__e;\n        break;\n      }\n    }\n    return updateParentDomPointers(vnode);\n  }\n}\n\n/**\n * The render queue\n * @type {Array<Component>}\n */\nvar rerenderQueue = [];\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nvar prevDebounce;\nvar defer = typeof Promise == 'function' ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout;\n\n/**\n * Enqueue a rerender of a component\n * @param {Component} c The component to rerender\n */\nfunction enqueueRender(c) {\n  if (!c.__d && (c.__d = true) && rerenderQueue.push(c) && !process.__r++ || prevDebounce !== options.debounceRendering) {\n    prevDebounce = options.debounceRendering;\n    (prevDebounce || defer)(process);\n  }\n}\n\n/**\n * @param {Component} a\n * @param {Component} b\n */\nvar depthSort = function depthSort(a, b) {\n  return a.__v.__b - b.__v.__b;\n};\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n  var c;\n  rerenderQueue.sort(depthSort);\n  // Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n  // process() calls from getting scheduled while `queue` is still being consumed.\n  while (c = rerenderQueue.shift()) {\n    if (c.__d) {\n      var renderQueueLength = rerenderQueue.length;\n      renderComponent(c);\n      if (rerenderQueue.length > renderQueueLength) {\n        // When i.e. rerendering a provider additional new items can be injected, we want to\n        // keep the order from top to bottom with those new items so we can handle them in a\n        // single pass\n        rerenderQueue.sort(depthSort);\n      }\n    }\n  }\n  process.__r = 0;\n}\nprocess.__r = 0;\n\n/**\n * Diff the children of a virtual node\n * @param {PreactElement} parentDom The DOM element whose children are being\n * diffed\n * @param {ComponentChildren[]} renderResult\n * @param {VNode} newParentVNode The new virtual node whose children should be\n * diff'ed against oldParentVNode\n * @param {VNode} oldParentVNode The old virtual node whose children should be\n * diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by\n * getChildContext\n * @param {string} namespace Current namespace of the DOM node (HTML, SVG, or MathML)\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {PreactElement} oldDom The current attached DOM element any new dom\n * elements should be placed around. Likely `null` on first render (except when\n * hydrating). Can be a sibling DOM element when diffing Fragments that have\n * siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n */\nfunction diffChildren(parentDom, renderResult, newParentVNode, oldParentVNode, globalContext, namespace, excessDomChildren, commitQueue, oldDom, isHydrating, refQueue) {\n  var i, /** @type {VNode} */\n    oldVNode, /** @type {VNode} */\n    childVNode, /** @type {PreactElement} */\n    newDom, /** @type {PreactElement} */\n    firstChildDom;\n\n  // This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n  // as EMPTY_OBJ._children should be `undefined`.\n  /** @type {VNode[]} */\n  var oldChildren = oldParentVNode && oldParentVNode.__k || EMPTY_ARR;\n  var newChildrenLength = renderResult.length;\n  newParentVNode.__d = oldDom;\n  constructNewChildrenArray(newParentVNode, renderResult, oldChildren);\n  oldDom = newParentVNode.__d;\n  for (i = 0; i < newChildrenLength; i++) {\n    childVNode = newParentVNode.__k[i];\n    if (childVNode == null) continue;\n\n    // At this point, constructNewChildrenArray has assigned _index to be the\n    // matchingIndex for this VNode's oldVNode (or -1 if there is no oldVNode).\n    if (childVNode.__i === -1) {\n      oldVNode = EMPTY_OBJ;\n    } else {\n      oldVNode = oldChildren[childVNode.__i] || EMPTY_OBJ;\n    }\n\n    // Update childVNode._index to its final index\n    childVNode.__i = i;\n\n    // Morph the old element into the new one, but don't append it to the dom yet\n    diff(parentDom, childVNode, oldVNode, globalContext, namespace, excessDomChildren, commitQueue, oldDom, isHydrating, refQueue);\n\n    // Adjust DOM nodes\n    newDom = childVNode.__e;\n    if (childVNode.ref && oldVNode.ref != childVNode.ref) {\n      if (oldVNode.ref) {\n        applyRef(oldVNode.ref, null, childVNode);\n      }\n      refQueue.push(childVNode.ref, childVNode.__c || newDom, childVNode);\n    }\n    if (firstChildDom == null && newDom != null) {\n      firstChildDom = newDom;\n    }\n    if (childVNode.__u & INSERT_VNODE || oldVNode.__k === childVNode.__k) {\n      oldDom = insert(childVNode, oldDom, parentDom);\n    } else if (typeof childVNode.type == 'function' && childVNode.__d !== undefined) {\n      // Since Fragments or components that return Fragment like VNodes can\n      // contain multiple DOM nodes as the same level, continue the diff from\n      // the sibling of last DOM child of this child VNode\n      oldDom = childVNode.__d;\n    } else if (newDom) {\n      oldDom = newDom.nextSibling;\n    }\n\n    // Eagerly cleanup _nextDom. We don't need to persist the value because it\n    // is only used by `diffChildren` to determine where to resume the diff\n    // after diffing Components and Fragments. Once we store it the nextDOM\n    // local var, we can clean up the property. Also prevents us hanging on to\n    // DOM nodes that may have been unmounted.\n    childVNode.__d = undefined;\n\n    // Unset diffing flags\n    childVNode.__u &= ~(INSERT_VNODE | MATCHED);\n  }\n\n  // TODO: With new child diffing algo, consider alt ways to diff Fragments.\n  // Such as dropping oldDom and moving fragments in place\n  //\n  // Because the newParentVNode is Fragment-like, we need to set it's\n  // _nextDom property to the nextSibling of its last child DOM node.\n  //\n  // `oldDom` contains the correct value here because if the last child\n  // is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n  // If the last child is a DOM VNode, then oldDom will be set to that DOM\n  // node's nextSibling.\n  newParentVNode.__d = oldDom;\n  newParentVNode.__e = firstChildDom;\n}\n\n/**\n * @param {VNode} newParentVNode\n * @param {ComponentChildren[]} renderResult\n * @param {VNode[]} oldChildren\n */\nfunction constructNewChildrenArray(newParentVNode, renderResult, oldChildren) {\n  /** @type {number} */\n  var i;\n  /** @type {VNode} */\n  var childVNode;\n  /** @type {VNode} */\n  var oldVNode;\n  var newChildrenLength = renderResult.length;\n  var oldChildrenLength = oldChildren.length,\n    remainingOldChildren = oldChildrenLength;\n  var skew = 0;\n  newParentVNode.__k = [];\n  for (i = 0; i < newChildrenLength; i++) {\n    // @ts-expect-error We are reusing the childVNode variable to hold both the\n    // pre and post normalized childVNode\n    childVNode = renderResult[i];\n    if (childVNode == null || typeof childVNode == 'boolean' || typeof childVNode == 'function') {\n      childVNode = newParentVNode.__k[i] = null;\n      continue;\n    }\n    // If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n    // or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n    // it's own DOM & etc. pointers\n    else if (typeof childVNode == 'string' || typeof childVNode == 'number' ||\n    // eslint-disable-next-line valid-typeof\n    typeof childVNode == 'bigint' || childVNode.constructor == String) {\n      childVNode = newParentVNode.__k[i] = createVNode(null, childVNode, null, null, null);\n    } else if (isArray(childVNode)) {\n      childVNode = newParentVNode.__k[i] = createVNode(Fragment, {\n        children: childVNode\n      }, null, null, null);\n    } else if (childVNode.constructor === undefined && childVNode.__b > 0) {\n      // VNode is already in use, clone it. This can happen in the following\n      // scenario:\n      //   const reuse = <div />\n      //   <div>{reuse}<span />{reuse}</div>\n      childVNode = newParentVNode.__k[i] = createVNode(childVNode.type, childVNode.props, childVNode.key, childVNode.ref ? childVNode.ref : null, childVNode.__v);\n    } else {\n      childVNode = newParentVNode.__k[i] = childVNode;\n    }\n    var skewedIndex = i + skew;\n    childVNode.__ = newParentVNode;\n    childVNode.__b = newParentVNode.__b + 1;\n\n    // Temporarily store the matchingIndex on the _index property so we can pull\n    // out the oldVNode in diffChildren. We'll override this to the VNode's\n    // final index after using this property to get the oldVNode\n    var matchingIndex = childVNode.__i = findMatchingIndex(childVNode, oldChildren, skewedIndex, remainingOldChildren);\n    oldVNode = null;\n    if (matchingIndex !== -1) {\n      oldVNode = oldChildren[matchingIndex];\n      remainingOldChildren--;\n      if (oldVNode) {\n        oldVNode.__u |= MATCHED;\n      }\n    }\n\n    // Here, we define isMounting for the purposes of the skew diffing\n    // algorithm. Nodes that are unsuspending are considered mounting and we detect\n    // this by checking if oldVNode._original === null\n    var isMounting = oldVNode == null || oldVNode.__v === null;\n    if (isMounting) {\n      if (matchingIndex == -1) {\n        skew--;\n      }\n\n      // If we are mounting a DOM VNode, mark it for insertion\n      if (typeof childVNode.type != 'function') {\n        childVNode.__u |= INSERT_VNODE;\n      }\n    } else if (matchingIndex !== skewedIndex) {\n      // When we move elements around i.e. [0, 1, 2] --> [1, 0, 2]\n      // --> we diff 1, we find it at position 1 while our skewed index is 0 and our skew is 0\n      //     we set the skew to 1 as we found an offset.\n      // --> we diff 0, we find it at position 0 while our skewed index is at 2 and our skew is 1\n      //     this makes us increase the skew again.\n      // --> we diff 2, we find it at position 2 while our skewed index is at 4 and our skew is 2\n      //\n      // this becomes an optimization question where currently we see a 1 element offset as an insertion\n      // or deletion i.e. we optimize for [0, 1, 2] --> [9, 0, 1, 2]\n      // while a more than 1 offset we see as a swap.\n      // We could probably build heuristics for having an optimized course of action here as well, but\n      // might go at the cost of some bytes.\n      //\n      // If we wanted to optimize for i.e. only swaps we'd just do the last two code-branches and have\n      // only the first item be a re-scouting and all the others fall in their skewed counter-part.\n      // We could also further optimize for swaps\n      if (matchingIndex == skewedIndex - 1) {\n        skew--;\n      } else if (matchingIndex == skewedIndex + 1) {\n        skew++;\n      } else {\n        if (matchingIndex > skewedIndex) {\n          skew--;\n        } else {\n          skew++;\n        }\n\n        // Move this VNode's DOM if the original index (matchingIndex) doesn't\n        // match the new skew index (i + new skew)\n        // In the former two branches we know that it matches after skewing\n        childVNode.__u |= INSERT_VNODE;\n      }\n    }\n  }\n\n  // Remove remaining oldChildren if there are any. Loop forwards so that as we\n  // unmount DOM from the beginning of the oldChildren, we can adjust oldDom to\n  // point to the next child, which needs to be the first DOM node that won't be\n  // unmounted.\n  if (remainingOldChildren) {\n    for (i = 0; i < oldChildrenLength; i++) {\n      oldVNode = oldChildren[i];\n      if (oldVNode != null && (oldVNode.__u & MATCHED) === 0) {\n        if (oldVNode.__e == newParentVNode.__d) {\n          newParentVNode.__d = getDomSibling(oldVNode);\n        }\n        unmount(oldVNode, oldVNode);\n      }\n    }\n  }\n}\n\n/**\n * @param {VNode} parentVNode\n * @param {PreactElement} oldDom\n * @param {PreactElement} parentDom\n * @returns {PreactElement}\n */\nfunction insert(parentVNode, oldDom, parentDom) {\n  // Note: VNodes in nested suspended trees may be missing _children.\n\n  if (typeof parentVNode.type == 'function') {\n    var children = parentVNode.__k;\n    for (var i = 0; children && i < children.length; i++) {\n      if (children[i]) {\n        // If we enter this code path on sCU bailout, where we copy\n        // oldVNode._children to newVNode._children, we need to update the old\n        // children's _parent pointer to point to the newVNode (parentVNode\n        // here).\n        children[i].__ = parentVNode;\n        oldDom = insert(children[i], oldDom, parentDom);\n      }\n    }\n    return oldDom;\n  } else if (parentVNode.__e != oldDom) {\n    if (oldDom && parentVNode.type && !parentDom.contains(oldDom)) {\n      oldDom = getDomSibling(parentVNode);\n    }\n    parentDom.insertBefore(parentVNode.__e, oldDom || null);\n    oldDom = parentVNode.__e;\n  }\n  do {\n    oldDom = oldDom && oldDom.nextSibling;\n  } while (oldDom != null && oldDom.nodeType === 8);\n  return oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {ComponentChildren} children The unflattened children of a virtual\n * node\n * @returns {VNode[]}\n */\nfunction toChildArray(children, out) {\n  out = out || [];\n  if (children == null || typeof children == 'boolean') ; else if (isArray(children)) {\n    children.some(function (child) {\n      toChildArray(child, out);\n    });\n  } else {\n    out.push(children);\n  }\n  return out;\n}\n\n/**\n * @param {VNode} childVNode\n * @param {VNode[]} oldChildren\n * @param {number} skewedIndex\n * @param {number} remainingOldChildren\n * @returns {number}\n */\nfunction findMatchingIndex(childVNode, oldChildren, skewedIndex, remainingOldChildren) {\n  var key = childVNode.key;\n  var type = childVNode.type;\n  var x = skewedIndex - 1;\n  var y = skewedIndex + 1;\n  var oldVNode = oldChildren[skewedIndex];\n\n  // We only need to perform a search if there are more children\n  // (remainingOldChildren) to search. However, if the oldVNode we just looked\n  // at skewedIndex was not already used in this diff, then there must be at\n  // least 1 other (so greater than 1) remainingOldChildren to attempt to match\n  // against. So the following condition checks that ensuring\n  // remainingOldChildren > 1 if the oldVNode is not already used/matched. Else\n  // if the oldVNode was null or matched, then there could needs to be at least\n  // 1 (aka `remainingOldChildren > 0`) children to find and compare against.\n  var shouldSearch = remainingOldChildren > (oldVNode != null && (oldVNode.__u & MATCHED) === 0 ? 1 : 0);\n  if (oldVNode === null || oldVNode && key == oldVNode.key && type === oldVNode.type && (oldVNode.__u & MATCHED) === 0) {\n    return skewedIndex;\n  } else if (shouldSearch) {\n    while (x >= 0 || y < oldChildren.length) {\n      if (x >= 0) {\n        oldVNode = oldChildren[x];\n        if (oldVNode && (oldVNode.__u & MATCHED) === 0 && key == oldVNode.key && type === oldVNode.type) {\n          return x;\n        }\n        x--;\n      }\n      if (y < oldChildren.length) {\n        oldVNode = oldChildren[y];\n        if (oldVNode && (oldVNode.__u & MATCHED) === 0 && key == oldVNode.key && type === oldVNode.type) {\n          return y;\n        }\n        y++;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction setStyle(style, key, value) {\n  if (key[0] === '-') {\n    style.setProperty(key, value == null ? '' : value);\n  } else if (value == null) {\n    style[key] = '';\n  } else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n    style[key] = value;\n  } else {\n    style[key] = value + 'px';\n  }\n}\n\n// A logical clock to solve issues like https://github.com/preactjs/preact/issues/3927.\n// When the DOM performs an event it leaves micro-ticks in between bubbling up which means that\n// an event can trigger on a newly reated DOM-node while the event bubbles up.\n//\n// Originally inspired by Vue\n// (https://github.com/vuejs/core/blob/caeb8a68811a1b0f79/packages/runtime-dom/src/modules/events.ts#L90-L101),\n// but modified to use a logical clock instead of Date.now() in case event handlers get attached\n// and events get dispatched during the same millisecond.\n//\n// The clock is incremented after each new event dispatch. This allows 1 000 000 new events\n// per second for over 280 years before the value reaches Number.MAX_SAFE_INTEGER (2**53 - 1).\nvar eventClock = 0;\n\n/**\n * Set a property value on a DOM node\n * @param {PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {string} namespace Whether or not this DOM node is an SVG node or not\n */\nfunction setProperty(dom, name, value, oldValue, namespace) {\n  var useCapture;\n  o: if (name === 'style') {\n    if (typeof value == 'string') {\n      dom.style.cssText = value;\n    } else {\n      if (typeof oldValue == 'string') {\n        dom.style.cssText = oldValue = '';\n      }\n      if (oldValue) {\n        for (name in oldValue) {\n          if (!(value && name in value)) {\n            setStyle(dom.style, name, '');\n          }\n        }\n      }\n      if (value) {\n        for (name in value) {\n          if (!oldValue || value[name] !== oldValue[name]) {\n            setStyle(dom.style, name, value[name]);\n          }\n        }\n      }\n    }\n  }\n  // Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n  else if (name[0] === 'o' && name[1] === 'n') {\n    useCapture = name !== (name = name.replace(/(PointerCapture)$|Capture$/i, '$1'));\n\n    // Infer correct casing for DOM built-in events:\n    if (name.toLowerCase() in dom || name === 'onFocusOut' || name === 'onFocusIn') name = name.toLowerCase().slice(2);else name = name.slice(2);\n    if (!dom.l) dom.l = {};\n    dom.l[name + useCapture] = value;\n    if (value) {\n      if (!oldValue) {\n        value._attached = eventClock;\n        dom.addEventListener(name, useCapture ? eventProxyCapture : eventProxy, useCapture);\n      } else {\n        value._attached = oldValue._attached;\n      }\n    } else {\n      dom.removeEventListener(name, useCapture ? eventProxyCapture : eventProxy, useCapture);\n    }\n  } else {\n    if (namespace == 'http://www.w3.org/2000/svg') {\n      // Normalize incorrect prop usage for SVG:\n      // - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n      // - className --> class\n      name = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n    } else if (name != 'width' && name != 'height' && name != 'href' && name != 'list' && name != 'form' &&\n    // Default value in browsers is `-1` and an empty string is\n    // cast to `0` instead\n    name != 'tabIndex' && name != 'download' && name != 'rowSpan' && name != 'colSpan' && name != 'role' && name != 'popover' && name in dom) {\n      try {\n        dom[name] = value == null ? '' : value;\n        // labelled break is 1b smaller here than a return statement (sorry)\n        break o;\n      } catch (e) {}\n    }\n\n    // aria- and data- attributes have no boolean representation.\n    // A `false` value is different from the attribute not being\n    // present, so we can't remove it. For non-boolean aria\n    // attributes we could treat false as a removal, but the\n    // amount of exceptions would cost too many bytes. On top of\n    // that other frameworks generally stringify `false`.\n\n    if (typeof value == 'function') ; else if (value != null && (value !== false || name[4] === '-')) {\n      dom.setAttribute(name, name == 'popover' && value == true ? '' : value);\n    } else {\n      dom.removeAttribute(name);\n    }\n  }\n}\n\n/**\n * Create an event proxy function.\n * @param {boolean} useCapture Is the event handler for the capture phase.\n * @private\n */\nfunction createEventProxy(useCapture) {\n  /**\n   * Proxy an event to hooked event handlers\n   * @param {PreactEvent} e The event object from the browser\n   * @private\n   */\n  return function (e) {\n    if (this.l) {\n      var eventHandler = this.l[e.type + useCapture];\n      if (e._dispatched == null) {\n        e._dispatched = eventClock++;\n\n        // When `e._dispatched` is smaller than the time when the targeted event\n        // handler was attached we know we have bubbled up to an element that was added\n        // during patching the DOM.\n      } else if (e._dispatched < eventHandler._attached) {\n        return;\n      }\n      return eventHandler(options.event ? options.event(e) : e);\n    }\n  };\n}\nvar eventProxy = createEventProxy(false);\nvar eventProxyCapture = createEventProxy(true);\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {PreactElement} parentDom The parent of the DOM element\n * @param {VNode} newVNode The new virtual node\n * @param {VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by\n * getChildContext\n * @param {string} namespace Current namespace of the DOM node (HTML, SVG, or MathML)\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {PreactElement} oldDom The current attached DOM element any new dom\n * elements should be placed around. Likely `null` on first render (except when\n * hydrating). Can be a sibling DOM element when diffing Fragments that have\n * siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n */\nfunction diff(parentDom, newVNode, oldVNode, globalContext, namespace, excessDomChildren, commitQueue, oldDom, isHydrating, refQueue) {\n  /** @type {any} */\n  var tmp,\n    newType = newVNode.type;\n\n  // When passing through createElement it assigns the object\n  // constructor as undefined. This to prevent JSON-injection.\n  if (newVNode.constructor !== undefined) return null;\n\n  // If the previous diff bailed out, resume creating/hydrating.\n  if (oldVNode.__u & MODE_SUSPENDED) {\n    isHydrating = !!(oldVNode.__u & MODE_HYDRATE);\n    oldDom = newVNode.__e = oldVNode.__e;\n    excessDomChildren = [oldDom];\n  }\n  if (tmp = options.__b) tmp(newVNode);\n  outer: if (typeof newType == 'function') {\n    try {\n      var c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n      var newProps = newVNode.props;\n      var isClassComponent = 'prototype' in newType && newType.prototype.render;\n\n      // Necessary for createContext api. Setting this property will pass\n      // the context value as `this.context` just for this component.\n      tmp = newType.contextType;\n      var provider = tmp && globalContext[tmp.__c];\n      var componentContext = tmp ? provider ? provider.props.value : tmp.__ : globalContext;\n\n      // Get component and set it to `c`\n      if (oldVNode.__c) {\n        c = newVNode.__c = oldVNode.__c;\n        clearProcessingException = c.__ = c.__E;\n      } else {\n        // Instantiate the new component\n        if (isClassComponent) {\n          // @ts-expect-error The check above verifies that newType is suppose to be constructed\n          newVNode.__c = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n        } else {\n          // @ts-expect-error Trust me, Component implements the interface we want\n          newVNode.__c = c = new BaseComponent(newProps, componentContext);\n          c.constructor = newType;\n          c.render = doRender;\n        }\n        if (provider) provider.sub(c);\n        c.props = newProps;\n        if (!c.state) c.state = {};\n        c.context = componentContext;\n        c.__n = globalContext;\n        isNew = c.__d = true;\n        c.__h = [];\n        c._sb = [];\n      }\n\n      // Invoke getDerivedStateFromProps\n      if (isClassComponent && c.__s == null) {\n        c.__s = c.state;\n      }\n      if (isClassComponent && newType.getDerivedStateFromProps != null) {\n        if (c.__s == c.state) {\n          c.__s = assign({}, c.__s);\n        }\n        assign(c.__s, newType.getDerivedStateFromProps(newProps, c.__s));\n      }\n      oldProps = c.props;\n      oldState = c.state;\n      c.__v = newVNode;\n\n      // Invoke pre-render lifecycle methods\n      if (isNew) {\n        if (isClassComponent && newType.getDerivedStateFromProps == null && c.componentWillMount != null) {\n          c.componentWillMount();\n        }\n        if (isClassComponent && c.componentDidMount != null) {\n          c.__h.push(c.componentDidMount);\n        }\n      } else {\n        if (isClassComponent && newType.getDerivedStateFromProps == null && newProps !== oldProps && c.componentWillReceiveProps != null) {\n          c.componentWillReceiveProps(newProps, componentContext);\n        }\n        if (!c.__e && (c.shouldComponentUpdate != null && c.shouldComponentUpdate(newProps, c.__s, componentContext) === false || newVNode.__v === oldVNode.__v)) {\n          // More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n          if (newVNode.__v !== oldVNode.__v) {\n            // When we are dealing with a bail because of sCU we have to update\n            // the props, state and dirty-state.\n            // when we are dealing with strict-equality we don't as the child could still\n            // be dirtied see #3883\n            c.props = newProps;\n            c.state = c.__s;\n            c.__d = false;\n          }\n          newVNode.__e = oldVNode.__e;\n          newVNode.__k = oldVNode.__k;\n          newVNode.__k.some(function (vnode) {\n            if (vnode) vnode.__ = newVNode;\n          });\n          for (var i = 0; i < c._sb.length; i++) {\n            c.__h.push(c._sb[i]);\n          }\n          c._sb = [];\n          if (c.__h.length) {\n            commitQueue.push(c);\n          }\n          break outer;\n        }\n        if (c.componentWillUpdate != null) {\n          c.componentWillUpdate(newProps, c.__s, componentContext);\n        }\n        if (isClassComponent && c.componentDidUpdate != null) {\n          c.__h.push(function () {\n            c.componentDidUpdate(oldProps, oldState, snapshot);\n          });\n        }\n      }\n      c.context = componentContext;\n      c.props = newProps;\n      c.__P = parentDom;\n      c.__e = false;\n      var renderHook = options.__r,\n        count = 0;\n      if (isClassComponent) {\n        c.state = c.__s;\n        c.__d = false;\n        if (renderHook) renderHook(newVNode);\n        tmp = c.render(c.props, c.state, c.context);\n        for (var _i = 0; _i < c._sb.length; _i++) {\n          c.__h.push(c._sb[_i]);\n        }\n        c._sb = [];\n      } else {\n        do {\n          c.__d = false;\n          if (renderHook) renderHook(newVNode);\n          tmp = c.render(c.props, c.state, c.context);\n\n          // Handle setState called in render, see #2553\n          c.state = c.__s;\n        } while (c.__d && ++count < 25);\n      }\n\n      // Handle setState called in render, see #2553\n      c.state = c.__s;\n      if (c.getChildContext != null) {\n        globalContext = assign(assign({}, globalContext), c.getChildContext());\n      }\n      if (isClassComponent && !isNew && c.getSnapshotBeforeUpdate != null) {\n        snapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n      }\n      var isTopLevelFragment = tmp != null && tmp.type === Fragment && tmp.key == null;\n      var renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n      diffChildren(parentDom, isArray(renderResult) ? renderResult : [renderResult], newVNode, oldVNode, globalContext, namespace, excessDomChildren, commitQueue, oldDom, isHydrating, refQueue);\n      c.base = newVNode.__e;\n\n      // We successfully rendered this VNode, unset any stored hydration/bailout state:\n      newVNode.__u &= RESET_MODE;\n      if (c.__h.length) {\n        commitQueue.push(c);\n      }\n      if (clearProcessingException) {\n        c.__E = c.__ = null;\n      }\n    } catch (e) {\n      newVNode.__v = null;\n      // if hydrating or creating initial tree, bailout preserves DOM:\n      if (isHydrating || excessDomChildren != null) {\n        newVNode.__u |= isHydrating ? MODE_HYDRATE | MODE_SUSPENDED : MODE_HYDRATE;\n        while (oldDom && oldDom.nodeType === 8 && oldDom.nextSibling) {\n          oldDom = oldDom.nextSibling;\n        }\n        excessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n        newVNode.__e = oldDom;\n      } else {\n        newVNode.__e = oldVNode.__e;\n        newVNode.__k = oldVNode.__k;\n      }\n      options.__e(e, newVNode, oldVNode);\n    }\n  } else if (excessDomChildren == null && newVNode.__v === oldVNode.__v) {\n    newVNode.__k = oldVNode.__k;\n    newVNode.__e = oldVNode.__e;\n  } else {\n    newVNode.__e = diffElementNodes(oldVNode.__e, newVNode, oldVNode, globalContext, namespace, excessDomChildren, commitQueue, isHydrating, refQueue);\n  }\n  if (tmp = options.diffed) tmp(newVNode);\n}\n\n/**\n * @param {Array<Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {VNode} root\n */\nfunction commitRoot(commitQueue, root, refQueue) {\n  root.__d = undefined;\n  for (var i = 0; i < refQueue.length; i++) {\n    applyRef(refQueue[i], refQueue[++i], refQueue[++i]);\n  }\n  if (options.__c) options.__c(root, commitQueue);\n  commitQueue.some(function (c) {\n    try {\n      // @ts-expect-error Reuse the commitQueue variable here so the type changes\n      commitQueue = c.__h;\n      c.__h = [];\n      commitQueue.some(function (cb) {\n        // @ts-expect-error See above comment on commitQueue\n        cb.call(c);\n      });\n    } catch (e) {\n      options.__e(e, c.__v);\n    }\n  });\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {PreactElement} dom The DOM element representing the virtual nodes\n * being diffed\n * @param {VNode} newVNode The new virtual node\n * @param {VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {string} namespace Current namespace of the DOM node (HTML, SVG, or MathML)\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n * @returns {PreactElement}\n */\nfunction diffElementNodes(dom, newVNode, oldVNode, globalContext, namespace, excessDomChildren, commitQueue, isHydrating, refQueue) {\n  var oldProps = oldVNode.props;\n  var newProps = newVNode.props;\n  var nodeType = /** @type {string} */newVNode.type;\n  /** @type {any} */\n  var i;\n  /** @type {{ __html?: string }} */\n  var newHtml;\n  /** @type {{ __html?: string }} */\n  var oldHtml;\n  /** @type {ComponentChildren} */\n  var newChildren;\n  var value;\n  var inputValue;\n  var checked;\n\n  // Tracks entering and exiting namespaces when descending through the tree.\n  if (nodeType === 'svg') namespace = 'http://www.w3.org/2000/svg';else if (nodeType === 'math') namespace = 'http://www.w3.org/1998/Math/MathML';else if (!namespace) namespace = 'http://www.w3.org/1999/xhtml';\n  if (excessDomChildren != null) {\n    for (i = 0; i < excessDomChildren.length; i++) {\n      value = excessDomChildren[i];\n\n      // if newVNode matches an element in excessDomChildren or the `dom`\n      // argument matches an element in excessDomChildren, remove it from\n      // excessDomChildren so it isn't later removed in diffChildren\n      if (value && 'setAttribute' in value === !!nodeType && (nodeType ? value.localName === nodeType : value.nodeType === 3)) {\n        dom = value;\n        excessDomChildren[i] = null;\n        break;\n      }\n    }\n  }\n  if (dom == null) {\n    if (nodeType === null) {\n      return options.document.createTextNode(newProps);\n    }\n    dom = options.document.createElementNS(namespace, nodeType, newProps.is && newProps);\n\n    // we are creating a new node, so we can assume this is a new subtree (in\n    // case we are hydrating), this deopts the hydrate\n    if (isHydrating) {\n      if (options.__m) options.__m(newVNode, excessDomChildren);\n      isHydrating = false;\n    }\n    // we created a new parent, so none of the previously attached children can be reused:\n    excessDomChildren = null;\n  }\n  if (nodeType === null) {\n    // During hydration, we still have to split merged text from SSR'd HTML.\n    if (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n      dom.data = newProps;\n    }\n  } else {\n    // If excessDomChildren was not null, repopulate it with the current element's children:\n    excessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n    oldProps = oldVNode.props || EMPTY_OBJ;\n\n    // If we are in a situation where we are not hydrating but are using\n    // existing DOM (e.g. replaceNode) we should read the existing DOM\n    // attributes to diff them\n    if (!isHydrating && excessDomChildren != null) {\n      oldProps = {};\n      for (i = 0; i < dom.attributes.length; i++) {\n        value = dom.attributes[i];\n        oldProps[value.name] = value.value;\n      }\n    }\n    for (i in oldProps) {\n      value = oldProps[i];\n      if (i == 'children') ; else if (i == 'dangerouslySetInnerHTML') {\n        oldHtml = value;\n      } else if (!(i in newProps)) {\n        if (i == 'value' && 'defaultValue' in newProps || i == 'checked' && 'defaultChecked' in newProps) {\n          continue;\n        }\n        setProperty(dom, i, null, value, namespace);\n      }\n    }\n\n    // During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n    // @TODO we should warn in debug mode when props don't match here.\n    for (i in newProps) {\n      value = newProps[i];\n      if (i == 'children') {\n        newChildren = value;\n      } else if (i == 'dangerouslySetInnerHTML') {\n        newHtml = value;\n      } else if (i == 'value') {\n        inputValue = value;\n      } else if (i == 'checked') {\n        checked = value;\n      } else if ((!isHydrating || typeof value == 'function') && oldProps[i] !== value) {\n        setProperty(dom, i, value, oldProps[i], namespace);\n      }\n    }\n\n    // If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n    if (newHtml) {\n      // Avoid re-applying the same '__html' if it did not changed between re-render\n      if (!isHydrating && (!oldHtml || newHtml.__html !== oldHtml.__html && newHtml.__html !== dom.innerHTML)) {\n        dom.innerHTML = newHtml.__html;\n      }\n      newVNode.__k = [];\n    } else {\n      if (oldHtml) dom.innerHTML = '';\n      diffChildren(dom, isArray(newChildren) ? newChildren : [newChildren], newVNode, oldVNode, globalContext, nodeType === 'foreignObject' ? 'http://www.w3.org/1999/xhtml' : namespace, excessDomChildren, commitQueue, excessDomChildren ? excessDomChildren[0] : oldVNode.__k && getDomSibling(oldVNode, 0), isHydrating, refQueue);\n\n      // Remove children that are not part of any vnode.\n      if (excessDomChildren != null) {\n        for (i = excessDomChildren.length; i--;) {\n          removeNode(excessDomChildren[i]);\n        }\n      }\n    }\n\n    // As above, don't diff props during hydration\n    if (!isHydrating) {\n      i = 'value';\n      if (nodeType === 'progress' && inputValue == null) {\n        dom.removeAttribute('value');\n      } else if (inputValue !== undefined && (\n      // #2756 For the <progress>-element the initial value is 0,\n      // despite the attribute not being present. When the attribute\n      // is missing the progress bar is treated as indeterminate.\n      // To fix that we'll always update it when it is 0 for progress elements\n      inputValue !== dom[i] || nodeType === 'progress' && !inputValue ||\n      // This is only for IE 11 to fix <select> value not being updated.\n      // To avoid a stale select value we need to set the option.value\n      // again, which triggers IE11 to re-evaluate the select value\n      nodeType === 'option' && inputValue !== oldProps[i])) {\n        setProperty(dom, i, inputValue, oldProps[i], namespace);\n      }\n      i = 'checked';\n      if (checked !== undefined && checked !== dom[i]) {\n        setProperty(dom, i, checked, oldProps[i], namespace);\n      }\n    }\n  }\n  return dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {Ref<any> & { _unmount?: unknown }} ref\n * @param {any} value\n * @param {VNode} vnode\n */\nfunction applyRef(ref, value, vnode) {\n  try {\n    if (typeof ref == 'function') {\n      var hasRefUnmount = typeof ref.__u == 'function';\n      if (hasRefUnmount) {\n        // @ts-ignore TS doesn't like moving narrowing checks into variables\n        ref.__u();\n      }\n      if (!hasRefUnmount || value != null) {\n        // Store the cleanup function on the function\n        // instance object itself to avoid shape\n        // transitioning vnode\n        ref.__u = ref(value);\n      }\n    } else ref.current = value;\n  } catch (e) {\n    options.__e(e, vnode);\n  }\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {VNode} vnode The virtual node to unmount\n * @param {VNode} parentVNode The parent of the VNode that initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nfunction unmount(vnode, parentVNode, skipRemove) {\n  var r;\n  if (options.unmount) options.unmount(vnode);\n  if (r = vnode.ref) {\n    if (!r.current || r.current === vnode.__e) {\n      applyRef(r, null, parentVNode);\n    }\n  }\n  if ((r = vnode.__c) != null) {\n    if (r.componentWillUnmount) {\n      try {\n        r.componentWillUnmount();\n      } catch (e) {\n        options.__e(e, parentVNode);\n      }\n    }\n    r.base = r.__P = null;\n  }\n  if (r = vnode.__k) {\n    for (var i = 0; i < r.length; i++) {\n      if (r[i]) {\n        unmount(r[i], parentVNode, skipRemove || typeof vnode.type != 'function');\n      }\n    }\n  }\n  if (!skipRemove) {\n    removeNode(vnode.__e);\n  }\n\n  // Must be set to `undefined` to properly clean up `_nextDom`\n  // for which `null` is a valid value. See comment in `create-element.js`\n  vnode.__c = vnode.__ = vnode.__e = vnode.__d = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n  return this.constructor(props, context);\n}\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {ComponentChild} vnode The virtual node to render\n * @param {PreactElement} parentDom The DOM element to render into\n * @param {PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nfunction render(vnode, parentDom, replaceNode) {\n  if (options.__) options.__(vnode, parentDom);\n\n  // We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n  // hydration mode or not by passing the `hydrate` function instead of a DOM\n  // element..\n  var isHydrating = typeof replaceNode == 'function';\n\n  // To be able to support calling `render()` multiple times on the same\n  // DOM node, we need to obtain a reference to the previous tree. We do\n  // this by assigning a new `_children` property to DOM nodes which points\n  // to the last rendered tree. By default this property is not present, which\n  // means that we are mounting a new tree for the first time.\n  var oldVNode = isHydrating ? null : replaceNode && replaceNode.__k || parentDom.__k;\n  vnode = (!isHydrating && replaceNode || parentDom).__k = createElement(Fragment, null, [vnode]);\n\n  // List of effects that need to be called after diffing.\n  var commitQueue = [],\n    refQueue = [];\n  diff(parentDom,\n  // Determine the new vnode tree and store it on the DOM element on\n  // our custom `_children` property.\n  vnode, oldVNode || EMPTY_OBJ, EMPTY_OBJ, parentDom.namespaceURI, !isHydrating && replaceNode ? [replaceNode] : oldVNode ? null : parentDom.firstChild ? slice.call(parentDom.childNodes) : null, commitQueue, !isHydrating && replaceNode ? replaceNode : oldVNode ? oldVNode.__e : parentDom.firstChild, isHydrating, refQueue);\n\n  // Flush all queued effects\n  commitRoot(commitQueue, vnode, refQueue);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {ComponentChild} vnode The virtual node to render\n * @param {PreactElement} parentDom The DOM element to update\n */\nfunction hydrate(vnode, parentDom) {\n  render(vnode, parentDom, hydrate);\n}\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its\n * children.\n * @param {VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<ComponentChildren>} rest Any additional arguments will be used\n * as replacement children.\n * @returns {VNode}\n */\nfunction cloneElement(vnode, props, children) {\n  var normalizedProps = assign({}, vnode.props),\n    key,\n    ref,\n    i;\n  var defaultProps;\n  if (vnode.type && vnode.type.defaultProps) {\n    defaultProps = vnode.type.defaultProps;\n  }\n  for (i in props) {\n    if (i == 'key') key = props[i];else if (i == 'ref') ref = props[i];else if (props[i] === undefined && defaultProps !== undefined) {\n      normalizedProps[i] = defaultProps[i];\n    } else {\n      normalizedProps[i] = props[i];\n    }\n  }\n  if (arguments.length > 2) {\n    normalizedProps.children = arguments.length > 3 ? slice.call(arguments, 2) : children;\n  }\n  return createVNode(vnode.type, normalizedProps, key || vnode.key, ref || vnode.ref, null);\n}\n\nvar i = 0;\nfunction createContext(defaultValue, contextId) {\n  contextId = '__cC' + i++;\n  var context = {\n    __c: contextId,\n    __: defaultValue,\n    /** @type {FunctionComponent} */Consumer: function Consumer(props, contextValue) {\n      // return props.children(\n      // \tcontext[contextId] ? context[contextId].props.value : defaultValue\n      // );\n      return props.children(contextValue);\n    },\n    /** @type {FunctionComponent} */Provider: function Provider(props) {\n      if (!this.getChildContext) {\n        /** @type {Component[] | null} */\n        var subs = [];\n        var ctx = {};\n        ctx[contextId] = this;\n        this.getChildContext = function () {\n          return ctx;\n        };\n        this.componentWillUnmount = function () {\n          subs = null;\n        };\n        this.shouldComponentUpdate = function (_props) {\n          if (this.props.value !== _props.value) {\n            subs.some(function (c) {\n              c.__e = true;\n              enqueueRender(c);\n            });\n          }\n        };\n        this.sub = function (c) {\n          subs.push(c);\n          var old = c.componentWillUnmount;\n          c.componentWillUnmount = function () {\n            if (subs) {\n              subs.splice(subs.indexOf(c), 1);\n            }\n            if (old) old.call(c);\n          };\n        };\n      }\n      return props.children;\n    }\n  };\n\n  // Devtools needs access to the context object when it\n  // encounters a Provider. This is necessary to support\n  // setting `displayName` on the context object instead\n  // of on the component itself. See:\n  // https://reactjs.org/docs/context.html#contextdisplayname\n\n  return context.Provider.__ = context.Consumer.contextType = context;\n}\n\nexport { BaseComponent as Component, Fragment, cloneElement, createContext, createElement, createRef, createElement as h, hydrate, isValidElement, options, render, toChildArray };\n//# sourceMappingURL=preact.module.js.map\n","import { options as options$1 } from 'preact';\n\n/** @type {number} */\nvar currentIndex;\n\n/** @type {import('./internal').Component} */\nvar currentComponent;\n\n/** @type {import('./internal').Component} */\nvar previousComponent;\n\n/** @type {number} */\nvar currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nvar afterPaintEffects = [];\n\n// Cast to use internal Options type\nvar options = /** @type {import('./internal').Options} */options$1;\nvar oldBeforeDiff = options.__b;\nvar oldBeforeRender = options.__r;\nvar oldAfterDiff = options.diffed;\nvar oldCommit = options.__c;\nvar oldBeforeUnmount = options.unmount;\nvar oldRoot = options.__;\nvar RAF_TIMEOUT = 100;\nvar prevRaf;\n\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions.__b = function (vnode) {\n  currentComponent = null;\n  if (oldBeforeDiff) oldBeforeDiff(vnode);\n};\noptions.__ = function (vnode, parentDom) {\n  if (vnode && parentDom.__k && parentDom.__k.__m) {\n    vnode.__m = parentDom.__k.__m;\n  }\n  if (oldRoot) oldRoot(vnode, parentDom);\n};\n\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions.__r = function (vnode) {\n  if (oldBeforeRender) oldBeforeRender(vnode);\n  currentComponent = vnode.__c;\n  currentIndex = 0;\n  var hooks = currentComponent.__H;\n  if (hooks) {\n    if (previousComponent === currentComponent) {\n      hooks.__h = [];\n      currentComponent.__h = [];\n      hooks.__.forEach(function (hookItem) {\n        if (hookItem.__N) {\n          hookItem.__ = hookItem.__N;\n        }\n        hookItem._pendingArgs = hookItem.__N = undefined;\n      });\n    } else {\n      hooks.__h.forEach(invokeCleanup);\n      hooks.__h.forEach(invokeEffect);\n      hooks.__h = [];\n      currentIndex = 0;\n    }\n  }\n  previousComponent = currentComponent;\n};\n\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions.diffed = function (vnode) {\n  if (oldAfterDiff) oldAfterDiff(vnode);\n  var c = vnode.__c;\n  if (c && c.__H) {\n    if (c.__H.__h.length) afterPaint(afterPaintEffects.push(c));\n    c.__H.__.forEach(function (hookItem) {\n      if (hookItem._pendingArgs) {\n        hookItem.__H = hookItem._pendingArgs;\n      }\n      hookItem._pendingArgs = undefined;\n    });\n  }\n  previousComponent = currentComponent = null;\n};\n\n// TODO: Improve typing of commitQueue parameter\n/** @type {(vnode: import('./internal').VNode, commitQueue: any) => void} */\noptions.__c = function (vnode, commitQueue) {\n  commitQueue.some(function (component) {\n    try {\n      component.__h.forEach(invokeCleanup);\n      component.__h = component.__h.filter(function (cb) {\n        return cb.__ ? invokeEffect(cb) : true;\n      });\n    } catch (e) {\n      commitQueue.some(function (c) {\n        if (c.__h) c.__h = [];\n      });\n      commitQueue = [];\n      options.__e(e, component.__v);\n    }\n  });\n  if (oldCommit) oldCommit(vnode, commitQueue);\n};\n\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions.unmount = function (vnode) {\n  if (oldBeforeUnmount) oldBeforeUnmount(vnode);\n  var c = vnode.__c;\n  if (c && c.__H) {\n    var hasErrored;\n    c.__H.__.forEach(function (s) {\n      try {\n        invokeCleanup(s);\n      } catch (e) {\n        hasErrored = e;\n      }\n    });\n    c.__H = undefined;\n    if (hasErrored) options.__e(hasErrored, c.__v);\n  }\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n  if (options.__h) {\n    options.__h(currentComponent, index, currentHook || type);\n  }\n  currentHook = 0;\n\n  // Largely inspired by:\n  // * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n  // * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n  // Other implementations to look at:\n  // * https://codesandbox.io/s/mnox05qp8\n  var hooks = currentComponent.__H || (currentComponent.__H = {\n    __: [],\n    __h: []\n  });\n  if (index >= hooks.__.length) {\n    hooks.__.push({});\n  }\n  return hooks.__[index];\n}\n\n/**\n * @template {unknown} S\n * @param {import('./index').Dispatch<import('./index').StateUpdater<S>>} [initialState]\n * @returns {[S, (state: S) => void]}\n */\nfunction useState(initialState) {\n  currentHook = 1;\n  return useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @template {unknown} S\n * @template {unknown} A\n * @param {import('./index').Reducer<S, A>} reducer\n * @param {import('./index').Dispatch<import('./index').StateUpdater<S>>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ S, (state: S) => void ]}\n */\nfunction useReducer(reducer, initialState, init) {\n  /** @type {import('./internal').ReducerHookState} */\n  var hookState = getHookState(currentIndex++, 2);\n  hookState._reducer = reducer;\n  if (!hookState.__c) {\n    hookState.__ = [!init ? invokeOrReturn(undefined, initialState) : init(initialState), function (action) {\n      var currentValue = hookState.__N ? hookState.__N[0] : hookState.__[0];\n      var nextValue = hookState._reducer(currentValue, action);\n      if (currentValue !== nextValue) {\n        hookState.__N = [nextValue, hookState.__[1]];\n        hookState.__c.setState({});\n      }\n    }];\n    hookState.__c = currentComponent;\n    if (!currentComponent._hasScuFromHooks) {\n      // This SCU has the purpose of bailing out after repeated updates\n      // to stateful hooks.\n      // we store the next value in _nextValue[0] and keep doing that for all\n      // state setters, if we have next states and\n      // all next states within a component end up being equal to their original state\n      // we are safe to bail out for this specific component.\n      /**\n       *\n       * @type {import('./internal').Component[\"shouldComponentUpdate\"]}\n       */\n      // @ts-ignore - We don't use TS to downtranspile\n      // eslint-disable-next-line no-inner-declarations\n      var updateHookState = function updateHookState(p, s, c) {\n        if (!hookState.__c.__H) return true;\n\n        /** @type {(x: import('./internal').HookState) => x is import('./internal').ReducerHookState} */\n        var isStateHook = function isStateHook(x) {\n          return !!x.__c;\n        };\n        var stateHooks = hookState.__c.__H.__.filter(isStateHook);\n        var allHooksEmpty = stateHooks.every(function (x) {\n          return !x.__N;\n        });\n        // When we have no updated hooks in the component we invoke the previous SCU or\n        // traverse the VDOM tree further.\n        if (allHooksEmpty) {\n          return prevScu ? prevScu.call(this, p, s, c) : true;\n        }\n\n        // We check whether we have components with a nextValue set that\n        // have values that aren't equal to one another this pushes\n        // us to update further down the tree\n        var shouldUpdate = false;\n        stateHooks.forEach(function (hookItem) {\n          if (hookItem.__N) {\n            var currentValue = hookItem.__[0];\n            hookItem.__ = hookItem.__N;\n            hookItem.__N = undefined;\n            if (currentValue !== hookItem.__[0]) shouldUpdate = true;\n          }\n        });\n        return shouldUpdate || hookState.__c.props !== p ? prevScu ? prevScu.call(this, p, s, c) : true : false;\n      };\n      currentComponent._hasScuFromHooks = true;\n      var prevScu = currentComponent.shouldComponentUpdate;\n      var prevCWU = currentComponent.componentWillUpdate;\n\n      // If we're dealing with a forced update `shouldComponentUpdate` will\n      // not be called. But we use that to update the hook values, so we\n      // need to call it.\n      currentComponent.componentWillUpdate = function (p, s, c) {\n        if (this.__e) {\n          var tmp = prevScu;\n          // Clear to avoid other sCU hooks from being called\n          prevScu = undefined;\n          updateHookState(p, s, c);\n          prevScu = tmp;\n        }\n        if (prevCWU) prevCWU.call(this, p, s, c);\n      };\n      currentComponent.shouldComponentUpdate = updateHookState;\n    }\n  }\n  return hookState.__N || hookState.__;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {unknown[]} args\n * @returns {void}\n */\nfunction useEffect(callback, args) {\n  /** @type {import('./internal').EffectHookState} */\n  var state = getHookState(currentIndex++, 3);\n  if (!options.__s && argsChanged(state.__H, args)) {\n    state.__ = callback;\n    state._pendingArgs = args;\n    currentComponent.__H.__h.push(state);\n  }\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {unknown[]} args\n * @returns {void}\n */\nfunction useLayoutEffect(callback, args) {\n  /** @type {import('./internal').EffectHookState} */\n  var state = getHookState(currentIndex++, 4);\n  if (!options.__s && argsChanged(state.__H, args)) {\n    state.__ = callback;\n    state._pendingArgs = args;\n    currentComponent.__h.push(state);\n  }\n}\n\n/** @type {(initialValue: unknown) => unknown} */\nfunction useRef(initialValue) {\n  currentHook = 5;\n  return useMemo(function () {\n    return {\n      current: initialValue\n    };\n  }, []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {unknown[]} args\n * @returns {void}\n */\nfunction useImperativeHandle(ref, createHandle, args) {\n  currentHook = 6;\n  useLayoutEffect(function () {\n    if (typeof ref == 'function') {\n      ref(createHandle());\n      return function () {\n        return ref(null);\n      };\n    } else if (ref) {\n      ref.current = createHandle();\n      return function () {\n        return ref.current = null;\n      };\n    }\n  }, args == null ? args : args.concat(ref));\n}\n\n/**\n * @template {unknown} T\n * @param {() => T} factory\n * @param {unknown[]} args\n * @returns {T}\n */\nfunction useMemo(factory, args) {\n  /** @type {import('./internal').MemoHookState<T>} */\n  var state = getHookState(currentIndex++, 7);\n  if (argsChanged(state.__H, args)) {\n    state.__ = factory();\n    state.__H = args;\n    state.__h = factory;\n  }\n  return state.__;\n}\n\n/**\n * @param {() => void} callback\n * @param {unknown[]} args\n * @returns {() => void}\n */\nfunction useCallback(callback, args) {\n  currentHook = 8;\n  return useMemo(function () {\n    return callback;\n  }, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nfunction useContext(context) {\n  var provider = currentComponent.context[context.__c];\n  // We could skip this call here, but than we'd not call\n  // `options._hook`. We need to do that in order to make\n  // the devtools aware of this hook.\n  /** @type {import('./internal').ContextHookState} */\n  var state = getHookState(currentIndex++, 9);\n  // The devtools needs access to the context object to\n  // be able to pull of the default value when no provider\n  // is present in the tree.\n  state.c = context;\n  if (!provider) return context.__;\n  // This is probably not safe to convert to \"!\"\n  if (state.__ == null) {\n    state.__ = true;\n    provider.sub(currentComponent);\n  }\n  return provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nfunction useDebugValue(value, formatter) {\n  if (options.useDebugValue) {\n    options.useDebugValue(formatter ? formatter(value) : ( /** @type {any}*/value));\n  }\n}\n\n/**\n * @param {(error: unknown, errorInfo: import('preact').ErrorInfo) => void} cb\n * @returns {[unknown, () => void]}\n */\nfunction useErrorBoundary(cb) {\n  /** @type {import('./internal').ErrorBoundaryHookState} */\n  var state = getHookState(currentIndex++, 10);\n  var errState = useState();\n  state.__ = cb;\n  if (!currentComponent.componentDidCatch) {\n    currentComponent.componentDidCatch = function (err, errorInfo) {\n      if (state.__) state.__(err, errorInfo);\n      errState[1](err);\n    };\n  }\n  return [errState[0], function () {\n    errState[1](undefined);\n  }];\n}\n\n/** @type {() => string} */\nfunction useId() {\n  /** @type {import('./internal').IdHookState} */\n  var state = getHookState(currentIndex++, 11);\n  if (!state.__) {\n    // Grab either the root node or the nearest async boundary node.\n    /** @type {import('./internal.d').VNode} */\n    var root = currentComponent.__v;\n    while (root !== null && !root.__m && root.__ !== null) {\n      root = root.__;\n    }\n    var mask = root.__m || (root.__m = [0, 0]);\n    state.__ = 'P' + mask[0] + '-' + mask[1]++;\n  }\n  return state.__;\n}\n\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n  var component;\n  while (component = afterPaintEffects.shift()) {\n    if (!component.__P || !component.__H) continue;\n    try {\n      component.__H.__h.forEach(invokeCleanup);\n      component.__H.__h.forEach(invokeEffect);\n      component.__H.__h = [];\n    } catch (e) {\n      component.__H.__h = [];\n      options.__e(e, component.__v);\n    }\n  }\n}\nvar HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n  var done = function done() {\n    clearTimeout(timeout);\n    if (HAS_RAF) cancelAnimationFrame(raf);\n    setTimeout(callback);\n  };\n  var timeout = setTimeout(done, RAF_TIMEOUT);\n  var raf;\n  if (HAS_RAF) {\n    raf = requestAnimationFrame(done);\n  }\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n * @returns {void}\n */\nfunction afterPaint(newQueueLength) {\n  if (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n    prevRaf = options.requestAnimationFrame;\n    (prevRaf || afterNextFrame)(flushAfterPaintEffects);\n  }\n}\n\n/**\n * @param {import('./internal').HookState} hook\n * @returns {void}\n */\nfunction invokeCleanup(hook) {\n  // A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n  // and move the currentComponent away.\n  var comp = currentComponent;\n  var cleanup = hook.__c;\n  if (typeof cleanup == 'function') {\n    hook.__c = undefined;\n    cleanup();\n  }\n  currentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n * @returns {void}\n */\nfunction invokeEffect(hook) {\n  // A hook call can introduce a call to render which creates a new root, this will call options.vnode\n  // and move the currentComponent away.\n  var comp = currentComponent;\n  hook.__c = hook.__();\n  currentComponent = comp;\n}\n\n/**\n * @param {unknown[]} oldArgs\n * @param {unknown[]} newArgs\n * @returns {boolean}\n */\nfunction argsChanged(oldArgs, newArgs) {\n  return !oldArgs || oldArgs.length !== newArgs.length || newArgs.some(function (arg, index) {\n    return arg !== oldArgs[index];\n  });\n}\n\n/**\n * @template Arg\n * @param {Arg} arg\n * @param {(arg: Arg) => any} f\n * @returns {any}\n */\nfunction invokeOrReturn(arg, f) {\n  return typeof f == 'function' ? f(arg) : f;\n}\n\nexport { useCallback, useContext, useDebugValue, useEffect, useErrorBoundary, useId, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState };\n//# sourceMappingURL=hooks.module.js.map\n","import { options, Fragment } from 'preact';\nexport { Fragment } from 'preact';\n\nvar ENCODED_ENTITIES = /[\"&<]/;\n\n/** @param {string} str */\nfunction encodeEntities(str) {\n  // Skip all work for strings with no entities needing encoding:\n  if (str.length === 0 || ENCODED_ENTITIES.test(str) === false) return str;\n  var last = 0,\n    i = 0,\n    out = '',\n    ch = '';\n\n  // Seek forward in str until the next entity char:\n  for (; i < str.length; i++) {\n    switch (str.charCodeAt(i)) {\n      case 34:\n        ch = '&quot;';\n        break;\n      case 38:\n        ch = '&amp;';\n        break;\n      case 60:\n        ch = '&lt;';\n        break;\n      default:\n        continue;\n    }\n    // Append skipped/buffered characters and the encoded entity:\n    if (i !== last) out += str.slice(last, i);\n    out += ch;\n    // Start the next seek/buffer after the entity's offset:\n    last = i + 1;\n  }\n  if (i !== last) out += str.slice(last, i);\n  return out;\n}\n\n/** Normal hydration that attaches to a DOM tree but does not diff it. */\nvar IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n\nvar vnodeId = 0;\nvar isArray = Array.isArray;\n\n/**\n * @fileoverview\n * This file exports various methods that implement Babel's \"automatic\" JSX runtime API:\n * - jsx(type, props, key)\n * - jsxs(type, props, key)\n * - jsxDEV(type, props, key, __source, __self)\n *\n * The implementation of createVNode here is optimized for performance.\n * Benchmarks: https://esbench.com/bench/5f6b54a0b4632100a7dcd2b3\n */\n\n/**\n * JSX.Element factory used by Babel's {runtime:\"automatic\"} JSX transform\n * @param {VNode['type']} type\n * @param {VNode['props']} props\n * @param {VNode['key']} [key]\n * @param {unknown} [isStaticChildren]\n * @param {unknown} [__source]\n * @param {unknown} [__self]\n */\nfunction createVNode(type, props, key, isStaticChildren, __source, __self) {\n  if (!props) props = {};\n  // We'll want to preserve `ref` in props to get rid of the need for\n  // forwardRef components in the future, but that should happen via\n  // a separate PR.\n  var normalizedProps = props,\n    ref,\n    i;\n  if ('ref' in normalizedProps) {\n    normalizedProps = {};\n    for (i in props) {\n      if (i == 'ref') {\n        ref = props[i];\n      } else {\n        normalizedProps[i] = props[i];\n      }\n    }\n  }\n\n  /** @type {VNode & { __source: any; __self: any }} */\n  var vnode = {\n    type: type,\n    props: normalizedProps,\n    key: key,\n    ref: ref,\n    __k: null,\n    __: null,\n    __b: 0,\n    __e: null,\n    __d: undefined,\n    __c: null,\n    constructor: undefined,\n    __v: --vnodeId,\n    __i: -1,\n    __u: 0,\n    __source: __source,\n    __self: __self\n  };\n\n  // If a Component VNode, check for and apply defaultProps.\n  // Note: `type` is often a String, and can be `undefined` in development.\n  if (typeof type === 'function' && (ref = type.defaultProps)) {\n    for (i in ref) if (typeof normalizedProps[i] === 'undefined') {\n      normalizedProps[i] = ref[i];\n    }\n  }\n  if (options.vnode) options.vnode(vnode);\n  return vnode;\n}\n\n/**\n * Create a template vnode. This function is not expected to be\n * used directly, but rather through a precompile JSX transform\n * @param {string[]} templates\n * @param  {Array<string | null | VNode>} exprs\n * @returns {VNode}\n */\nfunction jsxTemplate(templates) {\n  var vnode = createVNode(Fragment, {\n    tpl: templates,\n    exprs: [].slice.call(arguments, 1)\n  });\n  // Bypass render to string top level Fragment optimization\n  vnode.key = vnode.__v;\n  return vnode;\n}\nvar JS_TO_CSS = {};\nvar CSS_REGEX = /[A-Z]/g;\n\n/**\n * Serialize an HTML attribute to a string. This function is not\n * expected to be used directly, but rather through a precompile\n * JSX transform\n * @param {string} name The attribute name\n * @param {*} value The attribute value\n * @returns {string}\n */\nfunction jsxAttr(name, value) {\n  if (options.attr) {\n    var result = options.attr(name, value);\n    if (typeof result === 'string') return result;\n  }\n  if (name === 'ref' || name === 'key') return '';\n  if (name === 'style' && typeof value === 'object') {\n    var str = '';\n    for (var prop in value) {\n      var val = value[prop];\n      if (val != null && val !== '') {\n        var _name = prop[0] == '-' ? prop : JS_TO_CSS[prop] || (JS_TO_CSS[prop] = prop.replace(CSS_REGEX, '-$&').toLowerCase());\n        var suffix = ';';\n        if (typeof val === 'number' &&\n        // Exclude custom-attributes\n        !_name.startsWith('--') && !IS_NON_DIMENSIONAL.test(_name)) {\n          suffix = 'px;';\n        }\n        str = str + _name + ':' + val + suffix;\n      }\n    }\n    return name + '=\"' + str + '\"';\n  }\n  if (value == null || value === false || typeof value === 'function' || typeof value === 'object') {\n    return '';\n  } else if (value === true) return name;\n  return name + '=\"' + encodeEntities(value) + '\"';\n}\n\n/**\n * Escape a dynamic child passed to `jsxTemplate`. This function\n * is not expected to be used directly, but rather through a\n * precompile JSX transform\n * @param {*} value\n * @returns {string | null | VNode | Array<string | null | VNode>}\n */\nfunction jsxEscape(value) {\n  if (value == null || typeof value === 'boolean' || typeof value === 'function') {\n    return null;\n  }\n  if (typeof value === 'object') {\n    // Check for VNode\n    if (value.constructor === undefined) return value;\n    if (isArray(value)) {\n      for (var i = 0; i < value.length; i++) {\n        value[i] = jsxEscape(value[i]);\n      }\n      return value;\n    }\n  }\n  return encodeEntities('' + value);\n}\n\nexport { createVNode as jsx, jsxAttr, createVNode as jsxDEV, jsxEscape, jsxTemplate, createVNode as jsxs };\n//# sourceMappingURL=jsxRuntime.module.js.map\n","// import { useCallback, useEffect, useState } from '@lynx-js/react'\nimport { useEffect, useRef } from '@lynx-js/react'\n\nimport './App.css'\n// import arrow from './assets/arrow.png'\n// import lynxLogo from './assets/lynx-logo.png'\n// import reactLynxLogo from './assets/react-logo.png'\n\nexport function App() {\n  // const [alterLogo, setAlterLogo] = useState(false)\n\n  // useEffect(() => {\n  //   console.info('Hello, ReactLynx')\n  // }, [])\n\n  // const onTap = useCallback(() => {\n  //   'background only'\n  //   setAlterLogo(!alterLogo)\n  // }, [alterLogo])\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const descriptionRef = useRef<HTMLParagraphElement>(null);\n  \n  const baseWidth = 300;\n  const baseHeight = 500;\n\n  useEffect(() => {\n    const cvs = canvasRef.current as HTMLCanvasElement;\n    const description = descriptionRef.current as HTMLElement;\n    const ctx = cvs.getContext('2d') as CanvasRenderingContext2D;\n    \n    let theme1 = new Image();\n    let theme2 = new Image();\n    let frame: number = 0;\n    let degree: number = Math.PI / 180;\n    let scale: number = 1;\n\n    let bg: any, pipes: any, ground: any, map: any, score: any, bird: any, bird1: any, bird2: any;\n    let getReady: any, gameOver: any, medal: any;\n\n    const SFX_SCORE = new Audio();\n    const SFX_FLAP = new Audio();\n    const SFX_COLLISION = new Audio();\n    const SFX_FALL = new Audio();\n    const SFX_SWOOSH = new Audio();\n\n    theme1.src = './assets/img/og-theme.png';\n    theme2.src = './assets/img/og-theme-2.png';\n    SFX_SCORE.src = './assets/audio/sfx_point.wav';\n    SFX_FLAP.src = './assets/audio/sfx_wing.wav';\n    SFX_COLLISION.src = './assets/audio/sfx_hit.wav';\n    SFX_FALL.src = './assets/audio/sfx_die.wav';\n    SFX_SWOOSH.src = './assets/audio/sfx_swooshing.wav';\n\n    let gameState = {\n      current: 0,\n      getReady: 0,\n      play: 1,\n      gameOver: 2\n    };\n\n    bg = {\n      imgX: 0,\n      imgY: 0,\n      width: 276, \n      height: 228, \n      x: 0,\n      y: 0,\n      w: 276,\n      h: 228,\n      dx: 0.2,\n      render: function() {\n        ctx.drawImage(theme1, this.imgX, this.imgY, this.width, this.height, this.x, this.y, this.w, this.h);\n        ctx.drawImage(theme1, this.imgX, this.imgY, this.width, this.height, this.x + this.w, this.y, this.w, this.h);\n        ctx.drawImage(theme1, this.imgX, this.imgY, this.width, this.height, this.x + this.w * 2, this.y, this.w, this.h);\n      },\n      position: function () {\n        if (gameState.current === gameState.getReady) {\n          this.x = 0;\n        }\n        if (gameState.current === gameState.play) {\n          this.x = (this.x - this.dx * scale) % this.w;\n        }\n      }\n    };\n\n    medal = {\n      bronze: { imgX: 359, imgY: 157 },\n      silver: { imgX: 359, imgY: 113 },\n      gold: { imgX: 359, imgY: 69 },\n      platinum: { imgX: 359, imgY: 25 },\n      width: 44, \n      height: 44, \n      x: 0,\n      y: 0,\n      w: 44,\n      h: 44,\n\n      relativeX: 31, \n      relativeY: 47, \n      type: null as string | null,\n\n      setMedalType: function(score: number) {\n        if (score >= 40) {\n          this.type = 'platinum';\n        } else if (score >= 30) {\n          this.type = 'gold';\n        } else if (score >= 20) {\n          this.type = 'silver';\n        } else if (score >= 10) {\n          this.type = 'bronze';\n        } else {\n          this.type = null;\n        }\n      },\n\n      render: function() {\n        if (gameState.current === gameState.gameOver && this.type) {\n          const medalType = this.type as 'bronze' | 'silver' | 'gold' | 'platinum';\n\n          ctx.drawImage(\n            theme1,\n            this[medalType].imgX, \n            this[medalType].imgY,\n            this.width,\n            this.height,\n            this.x,\n            this.y,\n            this.w,\n            this.h\n          );\n        }\n      }\n    };\n\n    pipes = {\n      top: { imgX: 56, imgY: 323 },\n      bot: { imgX: 84, imgY: 323 },\n      width: 26,\n      height: 160,\n      w: 55,\n      h: 300,\n      gap: 150,\n      dx: 2,\n      minY: 0,\n      maxY: 0,\n      pipeGenerator: [] as any[],\n      reset: function() {\n        this.pipeGenerator = [];\n      },\n      render: function() {\n        for (let i = 0; i < this.pipeGenerator.length; i++) {\n          let pipe = this.pipeGenerator[i];\n\n          ctx.drawImage(\n            theme2,\n            this.top.imgX,\n            this.top.imgY,\n            this.width,\n            this.height,\n            pipe.x,\n            pipe.topY,\n            this.w,\n            this.h\n          );\n\n          ctx.drawImage(\n            theme2,\n            this.bot.imgX,\n            this.bot.imgY,\n            this.width,\n            this.height,\n            pipe.x,\n            pipe.bottomY,\n            this.w,\n            this.h\n          );\n        }\n      },\n      position: function() {\n        if (gameState.current !== gameState.play) {\n          return;\n        }\n\n        if (frame % 100 === 0) {\n          const minPipeVisibility = -this.h / 2;\n\n          let minGapPos = cvs.height * 0.25;\n          let maxGapPos = cvs.height * 0.65 - this.gap; \n\n          let gapCenter = Math.floor(Math.random() * (maxGapPos - minGapPos)) + minGapPos;\n\n          let topPipeY = gapCenter - this.h;\n\n          topPipeY = Math.max(topPipeY, minPipeVisibility);\n\n          let bottomPipeY = gapCenter + this.gap;\n\n          bottomPipeY = Math.min(bottomPipeY, cvs.height - ground.h - this.h/4);\n\n          this.pipeGenerator.push({\n            x: cvs.width,\n            topY: topPipeY,\n            bottomY: bottomPipeY\n          });\n        }\n\n        for (let i = 0; i < this.pipeGenerator.length; i++) {\n          let pg = this.pipeGenerator[i];\n          let b = {\n            left: bird.x - bird.r,\n            right: bird.x + bird.r,\n            top: bird.y - bird.r,\n            bottom: bird.y + bird.r\n          };\n\n          let p = {\n            top: { top: pg.topY, bottom: pg.topY + this.h },\n            bot: { top: pg.bottomY, bottom: pg.bottomY + this.h },\n            left: pg.x,\n            right: pg.x + this.w\n          };\n\n          pg.x -= this.dx * scale;\n\n          if (pg.x < -this.w) {\n            this.pipeGenerator.shift();\n            score.current++;\n            SFX_SCORE.play();\n          }\n\n          if (\n            b.left < p.right &&\n            b.right > p.left &&\n            b.top < p.top.bottom &&\n            b.bottom > p.top.top\n          ) {\n            gameState.current = gameState.gameOver;\n            SFX_COLLISION.play();\n\n            score.setBestScore();\n            medal.setMedalType(score.current);\n          }\n\n          if (\n            b.left < p.right &&\n            b.right > p.left &&\n            b.top < p.bot.bottom &&\n            b.bottom > p.bot.top\n          ) {\n            gameState.current = gameState.gameOver;\n            SFX_COLLISION.play();\n\n            score.setBestScore();\n            medal.setMedalType(score.current);\n          }\n        }\n      }\n    };\n\n    ground = {\n      imgX: 276,\n      imgY: 0,\n      width: 224,\n      height: 112,\n      x: 0,\n      y: 0,\n      w: 224,\n      h: 112,\n      dx: 2,\n      render: function() {\n        ctx.drawImage(theme1, this.imgX, this.imgY, this.width, this.height, this.x, this.y, this.w, this.h);\n        ctx.drawImage(theme1, this.imgX, this.imgY, this.width, this.height, this.x + this.w, this.y, this.w, this.h);\n      },\n      position: function() {\n        if (gameState.current === gameState.getReady) {\n          this.x = 0;\n        }\n        if (gameState.current === gameState.play) {\n          this.x = (this.x - this.dx * scale) % (this.w / 2);\n        }\n      }\n    };\n\n    map = [\n      { imgX: 496, imgY: 60, width: 12, height: 18 },\n      { imgX: 135, imgY: 455, width: 10, height: 18 },\n      { imgX: 292, imgY: 160, width: 12, height: 18 },\n      { imgX: 306, imgY: 160, width: 12, height: 18 },\n      { imgX: 320, imgY: 160, width: 12, height: 18 },\n      { imgX: 334, imgY: 160, width: 12, height: 18 },\n      { imgX: 292, imgY: 184, width: 12, height: 18 },\n      { imgX: 306, imgY: 184, width: 12, height: 18 },\n      { imgX: 320, imgY: 184, width: 12, height: 18 },\n      { imgX: 334, imgY: 184, width: 12, height: 18 }\n    ];\n\n    score = {\n      current: 0,\n      best: 0,\n      x: cvs.width / 2,\n      y: 40,\n      w: 15,\n      h: 25,\n\n      setBestScore: function() {\n        if (this.current > this.best) {\n          this.best = this.current;\n\n          localStorage.setItem('flappyBirdBestScore', this.best.toString());\n        }\n      },\n\n      reset: function() {\n        this.current = 0;\n      },\n\n      render: function() {\n        if (gameState.current === gameState.play) {\n          this.drawNumber(this.current, this.x, this.y);\n        } \n        else if (gameState.current === gameState.gameOver) {\n          const scoreY = gameOver.y + gameOver.h * 0.38;\n          const bestY = gameOver.y + gameOver.h * 0.58;\n\n          this.drawNumber(this.current, gameOver.x + gameOver.w * 0.6, scoreY);\n          this.drawNumber(this.best, gameOver.x + gameOver.w * 0.6, bestY);\n        }\n      },\n\n      drawNumber: function(value: number, x: number, y: number) {\n        const string = value.toString();\n        const digits = string.length;\n\n        let startX = x - ((digits * this.w) / 2);\n        if (digits % 2 === 0) {\n          startX += this.w / 4; \n        }\n\n        for (let i = 0; i < digits; i++) {\n          const digit = parseInt(string[i]);\n\n          ctx.drawImage(\n            theme2,\n            map[digit].imgX,\n            map[digit].imgY,\n            map[digit].width,\n            map[digit].height,\n            startX + (i * this.w),\n            y,\n            this.w,\n            this.h\n          );\n        }\n      }\n    };\n\n    const savedBestScore = localStorage.getItem('flappyBirdBestScore');\n    if (savedBestScore) {\n      score.best = parseInt(savedBestScore, 10);\n    }\n\n    bird = {\n      animation: [\n        { imgX: 276, imgY: 114 },\n        { imgX: 276, imgY: 140 },\n        { imgX: 276, imgY: 166 },\n        { imgX: 276, imgY: 140 }\n      ],\n      fr: 0,\n      width: 34,\n      height: 24,\n      x: 50,\n      y: 160,\n      w: 34,\n      h: 24,\n      r: 12,\n      fly: 5.25,\n      gravity: 0.32,\n      velocity: 0,\n      rotation: 0,\n\n      reset: function() {\n        this.velocity = 0;\n        this.y = 160 * scale;\n        this.rotation = 0;\n        this.fr = 0;\n      },\n\n      render: function() {\n        let birdFrame = this.animation[this.fr];\n        ctx.save();\n        ctx.translate(this.x, this.y);\n        ctx.rotate(this.rotation);\n        ctx.drawImage(theme1, birdFrame.imgX, birdFrame.imgY, this.width, this.height, -this.w/2, -this.h/2, this.w, this.h);\n        ctx.restore();\n      },\n      flap: function() {\n        this.velocity = -this.fly;\n      },\n      position: function() {\n        if (gameState.current === gameState.getReady) {\n          this.y = 160 * scale;\n          this.rotation = 0;\n          if (frame % 20 === 0) {\n            this.fr = (this.fr + 1) % this.animation.length;\n          }\n        } else {\n          if (frame % 4 === 0) {\n            this.fr = (this.fr + 1) % this.animation.length;\n          }\n          this.velocity += this.gravity;\n          this.y += this.velocity * scale;\n          if (this.velocity <= this.fly) {\n            this.rotation = -15 * degree;\n          } else if (this.velocity >= this.fly + 2) {\n            this.rotation = 70 * degree;\n            this.fr = 1;\n          } else {\n            this.rotation = 0;\n          }\n          if (this.y + this.h/2 >= cvs.height - ground.h) {\n            this.y = cvs.height - ground.h - this.h/2;\n            this.fr = 2;\n            this.rotation = 70 * degree;\n            if (gameState.current === gameState.play) {\n              gameState.current = gameState.gameOver;\n              SFX_FALL.play();\n\n              score.setBestScore();\n              medal.setMedalType(score.current);\n            }\n          }\n          if (this.y - this.h/2 <= 0) {\n            this.y = this.r * scale;\n          }\n        }\n      }\n    };\n\n    bird1 = {\n      animation: [\n        { imgX: 115, imgY: 381 },\n        { imgX: 115, imgY: 407 },\n        { imgX: 115, imgY: 433 },\n        { imgX: 115, imgY: 407 }\n      ],\n      fr: 0,\n      width: 18,\n      height: 12,\n      x: 50,\n      y: 160,\n      w: 34,\n      h: 24,\n      r: 12,\n      fly: 5.25,\n      gravity: 0.32,\n      velocity: 0,\n      render: function() {\n        let birdFrame = this.animation[this.fr];\n        ctx.drawImage(theme2, birdFrame.imgX, birdFrame.imgY, this.width, this.height, this.x - this.w/2, this.y - this.h/2, this.w, this.h);\n      },\n      flap: function() {\n        this.velocity = -this.fly;\n      },\n      position: function() {\n        if (gameState.current === gameState.getReady) {\n          this.y = 160 * scale;\n          if (frame % 20 === 0) {\n            this.fr = (this.fr + 1) % this.animation.length;\n          }\n        } else {\n          if (frame % 4 === 0) {\n            this.fr = (this.fr + 1) % this.animation.length;\n          }\n          this.velocity += this.gravity;\n          this.y += this.velocity * scale;\n          if (this.y + this.h/2 >= cvs.height - ground.h) {\n            this.y = cvs.height - ground.h - this.h/2;\n            this.fr = 2;\n            if (gameState.current === gameState.play) {\n              gameState.current = gameState.gameOver;\n              SFX_FALL.play();\n\n              score.setBestScore();\n              medal.setMedalType(score.current);\n            }\n          }\n          if (this.y - this.h/2 <= 0) {\n            this.y = this.r * scale;\n          }\n        }\n      }\n    };\n\n    bird2 = {\n      animation: [\n        { imgX: 87, imgY: 491 },\n        { imgX: 115, imgY: 329 },\n        { imgX: 115, imgY: 355 },\n        { imgX: 115, imgY: 329 }\n      ],\n      fr: 0,\n      width: 18,\n      height: 12,\n      x: 50,\n      y: 160,\n      w: 34,\n      h: 24,\n      r: 12,\n      fly: 5.25,\n      gravity: 0.32,\n      velocity: 0,\n      render: function() {\n        let birdFrame = this.animation[this.fr];\n        ctx.drawImage(theme2, birdFrame.imgX, birdFrame.imgY, this.width, this.height, this.x - this.w/2, this.y - this.h/2, this.w, this.h);\n      },\n      flap: function() {\n        this.velocity = -this.fly;\n      },\n      position: function() {\n        if (gameState.current === gameState.getReady) {\n          this.y = 160 * scale;\n          if (frame % 20 === 0) {\n            this.fr = (this.fr + 1) % this.animation.length;\n          }\n        } else {\n          if (frame % 4 === 0) {\n            this.fr = (this.fr + 1) % this.animation.length;\n          }\n          this.velocity += this.gravity;\n          this.y += this.velocity * scale;\n          if (this.y + this.h/2 >= cvs.height - ground.h) {\n            this.y = cvs.height - ground.h - this.h/2;\n            this.fr = 2;\n            if (gameState.current === gameState.play) {\n              gameState.current = gameState.gameOver;\n              SFX_FALL.play();\n\n              score.setBestScore();\n              medal.setMedalType(score.current);\n            }\n          }\n          if (this.y - this.h/2 <= 0) {\n            this.y = this.r * scale;\n          }\n        }\n      }\n    };\n\n    getReady = {\n      imgX: 0,\n      imgY: 228,\n      width: 174,\n      height: 160,\n      x: 0,\n      y: 0,\n      w: 174,\n      h: 160,\n      render: function() {\n        if (gameState.current === gameState.getReady) {\n          ctx.drawImage(theme1, this.imgX, this.imgY, this.width, this.height, this.x, this.y, this.w, this.h);\n        }\n      }\n    };\n\n    gameOver = {\n      imgX: 174,\n      imgY: 228,\n      width: 226,\n      height: 158,\n      x: 0,\n      y: 0,\n      w: 226,\n      h: 158,\n      render: function() {\n        if (gameState.current === gameState.gameOver) {\n          ctx.drawImage(theme1, this.imgX, this.imgY, this.width, this.height, this.x, this.y, this.w, this.h);\n          if (description) {\n            description.style.visibility = \"visible\";\n          }\n        }\n      }\n    };\n\n    const resizeCanvas = () => {\n      if (cvs) {\n        cvs.width = window.innerWidth;\n        cvs.height = window.innerHeight;\n\n        scale = Math.min(cvs.width/baseWidth, cvs.height/baseHeight);\n\n        bg.w = 276 * scale;\n        bg.h = 228 * scale;\n        bg.y = cvs.height - bg.h;\n\n        ground.w = 224 * scale;\n        ground.h = 112 * scale;\n        ground.y = cvs.height - ground.h;\n\n        getReady.w = 174 * scale;\n        getReady.h = 160 * scale;\n        getReady.x = (cvs.width - getReady.w) / 2;\n        getReady.y = (cvs.height - getReady.h) / 2;\n\n        gameOver.w = 226 * scale;\n        gameOver.h = 158 * scale;\n        gameOver.x = (cvs.width - gameOver.w) / 2;\n        gameOver.y = (cvs.height - gameOver.h) / 2;\n\n        medal.w = 40 * scale; \n        medal.h = 40 * scale;\n\n        const medalRelativeXScale = medal.relativeX / gameOver.width; \n        const medalRelativeYScale = medal.relativeY / gameOver.height; \n\n        medal.x = gameOver.x + (gameOver.w * medalRelativeXScale);\n        medal.y = gameOver.y + (gameOver.h * medalRelativeYScale);\n\n        pipes.w = 55 * scale;\n        pipes.h = 300 * scale;\n        pipes.gap = 150 * scale;\n\n        score.x = cvs.width / 2;\n        score.y = 40 * scale;\n        score.w = 15 * scale;\n        score.h = 25 * scale;\n\n        bird.w = 34 * scale;\n        bird.h = 24 * scale;\n        bird.x = 50 * scale;\n        bird.y = 160 * scale;\n        bird.r = 12 * scale;\n\n        bird1.w = 34 * scale;\n        bird1.h = 24 * scale;\n        bird1.x = 50 * scale;\n        bird1.y = 160 * scale;\n        bird1.r = 12 * scale;\n\n        bird2.w = 34 * scale;\n        bird2.h = 24 * scale;\n        bird2.x = 50 * scale;\n        bird2.y = 160 * scale;\n        bird2.r = 12 * scale;\n      }\n    };\n\n    const draw = () => {\n      ctx.fillStyle = '#00bbc4';\n      ctx.fillRect(0, 0, cvs.width, cvs.height);\n      bg.render();\n      pipes.render();\n      ground.render();\n      bird.render();\n      getReady.render();\n      gameOver.render(); \n      if (gameState.current === gameState.gameOver) {\n        medal.render(); \n      }\n      score.render();\n    };\n\n    const update = () => {\n      bird.position();\n      bg.position();\n      pipes.position();\n      ground.position();\n    };\n\n    const loop = () => {\n      draw();\n      update();\n      frame++;\n    };\n\n    const resetGame = () => {\n      pipes.reset();\n      score.reset();\n      bird.reset();\n      medal.type = null; \n      gameState.current = gameState.getReady;\n      SFX_SWOOSH.play();\n      if (description) {\n        description.style.visibility = \"hidden\";\n      }\n    };\n\n    const handleClick = () => {\n      if (gameState.current === gameState.getReady) {\n        gameState.current = gameState.play;\n      } else if (gameState.current === gameState.play) {\n        bird.flap();\n        SFX_FLAP.play();\n        if (description) {\n          description.style.visibility = \"hidden\";\n        }\n      } else if (gameState.current === gameState.gameOver) {\n        resetGame();\n      }\n    };\n\n    // Set up event listeners\n    window.addEventListener('resize', resizeCanvas);\n    cvs.addEventListener('click', handleClick);\n\n    // Initialize the game\n    resizeCanvas();\n    const gameInterval = setInterval(loop, 17);\n\n    // Cleanup function when component unmounts\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      cvs.removeEventListener('click', handleClick);\n      clearInterval(gameInterval);\n    };   \n  }, [])\n\n  return (\n    // <view>\n    //   <view className='Background' />\n    //   <view className='App'>\n    //     <view className='Banner'>\n    //       <view className='Logo' bindtap={onTap}>\n    //         {alterLogo\n    //           ? <image src={reactLynxLogo} className='Logo--react' />\n    //           : <image src={lynxLogo} className='Logo--lynx' />}\n    //       </view>\n    //       <text className='Title'>wrewwefw</text>\n    //       <text className='Subtitle'>on Lynx</text>\n    //     </view>\n    //     <view className='Content'>\n    //       <image src={arrow} className='Arrow' />\n    //       <text className='Description'>Tap the logo and have fun!</text>\n    //       <text className='Hint'>\n    //         Edit<text style={{ fontStyle: 'italic' }}>{' src/App.tsx '}</text>\n    //         to see updates!\n    //       </text>\n    //     </view>\n    //     <view style={{ flex: 1 }}></view>\n    //   </view>\n    // </view>\n\n    <view>\n      <canvas ref={canvasRef} id=\"game\"></canvas>\n      <p ref={descriptionRef} id=\"description\" className=\"game-description\">Press 'spacebar' or 'click' to begin</p>\n    </view>\n  )\n}","import { root } from '@lynx-js/react'\n\nimport { App } from './App.js'\n\nroot.render(<App />)\n\nif (import.meta.webpackHot) {\n  import.meta.webpackHot.accept()\n}\n","// extracted by mini-css-extract-plugin\nexport {};\n  if (module.hot) {\n    (function() {\n      var localsJsonString = undefined;\n      // 1742235157681\n      var cssReload = require(\"../node_modules/@lynx-js/css-extract-webpack-plugin/runtime/hotModuleReplacement.cjs\")(module.id, {}, \"\");\n      // only invalidate when locals change\n      if (\n        module.hot.data &&\n        module.hot.data.value &&\n        module.hot.data.value !== localsJsonString\n      ) {\n        module.hot.invalidate();\n      } else {\n        module.hot.accept();\n      }\n      module.hot.dispose(function(data) {\n        data.value = localsJsonString;\n        cssReload();\n      });\n    })();\n  }"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA;AAEA;AAEA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAIA;AAIA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;;;;;AAKA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;;;;;ACtEA;AAEA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAOA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3DA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnTA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgvOA;AASA;AACA;AACA;AACA;AACA;AAZA;AACA;AACA;AACA;AACA;AACA;AAkOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AAKA;AAGA;AAGA;AACA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1VA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAEA;AACA;AAIA;AAcA;;AACA;AAEA;AAEA;AAjBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAOA;AACA;AACA;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AAAA;AACA;AACA;AAiBA;AAhBA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;AAEA;AACA;AACA;;;;;;;;AAQA;AAEA;AACA;AACA;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7QA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;AAKA;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAEA;;;;;;;;;;AC1CA;AACA;AACA;AACA;AAOA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAGA;AACA;AAEA;AAIA;AAHA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AA9IA;AA0BA;AACA;AACA;AACA;AACA;AA7BA;AACA;AACA;AACA;AA2IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;AASA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AAEA;AAKA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AAEA;;;;;AAKA;AAEA;;;;;;;;;;;;;;;AAeA;AAEA;;;;;;;;;;;;AAYA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAeA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAEA;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAmFA;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAGA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AA0BA;AAxBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AACA;;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AAEA;AACA;AACA;;;;;;;;AAQA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACfeA;AAdA;AASA;AACA;AAGA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAWA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAIA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5SA;AAJA;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlHA;AACA;AACA;AACA;AACA;AACA;AAuSA;;;;;;;;;AC3dA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AACA;AACA;AAGA;AACA;;;;;;;;;;ACrBA;AACA;AACA;AAGA;AAGA;AACA;AAGA;AAGA;;;;;;;;;;;AChBA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAHA;AACA;AACA;;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoBA;AAnBA;AACA;AACA;AAGA;AAIA;AAEA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACpHA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AAGA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAKA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AAGA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAKA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AASA;AARA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;AC/RA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAIA;AAAA;AAAA;;AAGA;AACA;AAIA;AAHA;AAGA;;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AAAA;AAAA;AAAA;AAEA;AAIA;AAEA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;;;;;;;;;;;AC9BA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;ACXA;AACA;;;;;;;;;;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAGA;AACA;AACA;;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAGA;AACA;AAKA;AACA;;;;;;;;;ACnBA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAZA;AACA;;AAYA;AACA;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;AAEA;AAIA;AAsBA;AACA;;;;;;;;;;;;;ACvGA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3CA;AACA;;;;AAIA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AAkCA;AACA;AAOA;AAEA;AACA;AACA;AAMA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AA3CA;;AAEA;AAGA;AACA;AACA;AACA;AAQA;AA4BA;AACA;;;;;;AAMA;AAEA;AACA;AACA;AAEA;AADA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;;;;;;;AAOA;;AAEA;AACA;AACA;AACA;;;;AAIA;AAEA;AAAA;AACA;AACA;;;;;;AAMA;;AAEA;AACA;AACA;;;;AAIA;AAEA;AAAA;AAGA;AACA;;;;AAIA;;AAEA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACvBA;;;;;;;;;;ACAA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA;AAeA;;AAEA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AAlCA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAyBA;AAtCA;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAIA;AAAA;AACA;AAGA;AAAA;AACA;AAGA;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClDA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AApBA;;;;;;;;;;;;;AC5BA;AACA;AACA;;;;AACA;;AACA;;;;;;;;;AASA;AA2BA;;;;AAIA;AAEA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;;;;;;;;;;;;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;;;;;AAMA;AAEA;AACA;AACA;;;;;;AAMA;AAEA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;;;;;AAKA;AAEA;AACA;AApJA;;;;AAIA;;;AALA;;AAOA;AACA;AA8IA;AAtKA;;AAEA;AAEA;;AAEA;AAEA;;AAEA;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;;;;;;;AACA;AACA;AACA;;;;;AAKA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;;AACA;;AAEA;AAyBA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAGA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AAwBA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AA/JA;;AACA;;AAFA;AAsFA;;;;;AAuBA;;;AAmBA;AAsBA;;;AAzJA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AAiKA;AAnLA;;AAAA;;AAiEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAaA;AACA;AAGA;AACA;AAKA;AAAA;AAAA;AACA;AAYA;AACA;AAGA;AACA;AACA;AACA;AAYA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;AC5NA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACNA;;;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAOA;AAIA;AAGA;AACA;AAEA;AAIA;AAEA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACxEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;;;;;ACpBA;;;AAGA;;;AAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;;;;;AChDA;AAKA;AAEA;;;AAGA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AAGA;AACA;AAEA;;;AAGA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;AAEA;AAEA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;;;;;;;;;AC9EA;AACA;AAGA;AACA;;;;;;;;;ACLA;AACA;AAEA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;ACZA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;AC3BA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AAGA;AACA;;;;;;;;;ACLA;AACA;AAEA;AACA;AACA;;;;;;;;;;;ACLA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;ACPA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;AACA;AAEA;AACA;AACA;;;;;;;;;;ACLA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;ACVA;AAEA;AAGA;;;;;;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AAEA;AAIA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AAIA;AAEA;AAIA;AAIA;AACA;AAEA;;;;;;AAMA;AAEA;AAGA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAEA;;;;;;AAMA;AAEA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AAEA;AAEA;AAKA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;AAQA;AAEA;AACA;AAEA;;;;;;;;AAQA;AAEA;AACA;AAEA;;;;;;;;;AASA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAQA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;AC7UA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;;;AAIA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;AAgBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAGA;AAEA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AAEA;;;;;;;;AAQA;AAEA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;AAIA;AAEA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;AC72BA;AAEA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AACA;AAEA;;;;;;;;AAQA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;AAQA;AAEA;AACA;AAEA;AAEA;;;;;;;;AAQA;AAEA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AAEA;;;;;;;;AAQA;AAEA;AACA;AACA;AAGA;AAEA;AAGA;AAEA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AAGA;;;AAGA;AAEA;AAIA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAGA;;;;;;;AAOA;AAGA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;;;;;AAKA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAKA;AACA;AACA;AAKA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AAEA;AACA;AAEA;;;;AAIA;AAEA;;;;AAIA;AAEA;AACA;AACA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;AAiBA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;;;AAIA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAct6CA;AAEA;AAGA;AAGA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AAEA;;;;;;;AAOA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AAGA;AAEA;;;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;ACngBA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;;;;;;;;;AASA;;;;;;;;AAUA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACnMA;;AACA;AAEA;;;;AAquBA;AAAA;;AACA;AAAA;AAAA;;;;;;;;;;;;;;AAruBA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AAWA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAWA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AAWA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5uBA;AAEA;AAEA;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}